
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	200005f8 	.word	0x200005f8
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&mutex, *(uintptr_t *)&timeout, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00000bf1 	.word	0x00000bf1
   8:	00002863 	.word	0x00002863
		if (fdtable[fd].obj == NULL) {
   c:	00000b69 	.word	0x00000b69
  10:	00000b69 	.word	0x00000b69
  14:	00000b69 	.word	0x00000b69
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	00000b69 	.word	0x00000b69
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  1c:	00000b69 	.word	0x00000b69
	errno = ENFILE;
  20:	00000b69 	.word	0x00000b69
	return -1;
  24:	00000b69 	.word	0x00000b69
		arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_mutex_unlock(mutex);
  28:	00000b69 	.word	0x00000b69
  2c:	00000a61 	.word	0x00000a61
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	00000b69 	.word	0x00000b69
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	00000b69 	.word	0x00000b69
  38:	00000a0d 	.word	0x00000a0d
  3c:	0000284f 	.word	0x0000284f

00000040 <_irq_vector_table>:
  40:	00000bb1 00000bb1 00000bb1 00000bb1     ................
  50:	00000bb1 00000bb1 00000bb1 00000bb1     ................
  60:	00000bb1 00000bb1 00000bb1 00000bb1     ................
  70:	00000bb1 00000bb1 00000bb1 00000bb1     ................
  80:	00000bb1 00000bb1 00000bb1 00000bb1     ................
  90:	00000bb1 00000bb1 00000bb1 00000bb1     ................
  a0:	00000bb1 00000bb1 00000bb1 00000bb1     ................
  b0:	00000bb1 00000bb1 00000bb1 00000bb1     ................
  c0:	00000bb1 00000bb1 00000bb1 00000bb1     ................
  d0:	00000bb1 00000bb1 00000bb1              ............

Disassembly of section _TEXT_SECTION_NAME_2:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f0:	f000 b80c 	b.w	10c <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f808 	bl	110 <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__aeabi_idiv0>:
     10c:	4770      	bx	lr
     10e:	bf00      	nop

00000110 <__udivmoddi4>:
     110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     114:	9f09      	ldr	r7, [sp, #36]	; 0x24
     116:	4615      	mov	r5, r2
     118:	4604      	mov	r4, r0
     11a:	468e      	mov	lr, r1
     11c:	461e      	mov	r6, r3
     11e:	2b00      	cmp	r3, #0
     120:	f040 80cc 	bne.w	2bc <CONFIG_FLASH_SIZE+0xbc>
     124:	428a      	cmp	r2, r1
     126:	fab2 fc82 	clz	ip, r2
     12a:	d94c      	bls.n	1c6 <CONFIG_IDLE_STACK_SIZE+0x86>
     12c:	f1bc 0f00 	cmp.w	ip, #0
     130:	d00b      	beq.n	14a <CONFIG_IDLE_STACK_SIZE+0xa>
     132:	f1cc 0820 	rsb	r8, ip, #32
     136:	fa01 fe0c 	lsl.w	lr, r1, ip
     13a:	fa20 f808 	lsr.w	r8, r0, r8
     13e:	fa02 f50c 	lsl.w	r5, r2, ip
     142:	ea48 0e0e 	orr.w	lr, r8, lr
     146:	fa00 f40c 	lsl.w	r4, r0, ip
     14a:	ea4f 4915 	mov.w	r9, r5, lsr #16
     14e:	fa1f f885 	uxth.w	r8, r5
     152:	fbbe faf9 	udiv	sl, lr, r9
     156:	0c21      	lsrs	r1, r4, #16
     158:	fb09 e31a 	mls	r3, r9, sl, lr
     15c:	fb0a fb08 	mul.w	fp, sl, r8
     160:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     164:	459b      	cmp	fp, r3
     166:	d92a      	bls.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     168:	18eb      	adds	r3, r5, r3
     16a:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
     16e:	d204      	bcs.n	17a <CONFIG_IDLE_STACK_SIZE+0x3a>
     170:	459b      	cmp	fp, r3
     172:	d902      	bls.n	17a <CONFIG_IDLE_STACK_SIZE+0x3a>
     174:	f1aa 0002 	sub.w	r0, sl, #2
     178:	442b      	add	r3, r5
     17a:	eba3 030b 	sub.w	r3, r3, fp
     17e:	b2a4      	uxth	r4, r4
     180:	fbb3 f2f9 	udiv	r2, r3, r9
     184:	fb09 3312 	mls	r3, r9, r2, r3
     188:	fb02 f808 	mul.w	r8, r2, r8
     18c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     190:	45a0      	cmp	r8, r4
     192:	d916      	bls.n	1c2 <CONFIG_IDLE_STACK_SIZE+0x82>
     194:	192c      	adds	r4, r5, r4
     196:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     19a:	d203      	bcs.n	1a4 <CONFIG_IDLE_STACK_SIZE+0x64>
     19c:	45a0      	cmp	r8, r4
     19e:	d901      	bls.n	1a4 <CONFIG_IDLE_STACK_SIZE+0x64>
     1a0:	1e93      	subs	r3, r2, #2
     1a2:	442c      	add	r4, r5
     1a4:	eba4 0408 	sub.w	r4, r4, r8
     1a8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1ac:	b127      	cbz	r7, 1b8 <CONFIG_IDLE_STACK_SIZE+0x78>
     1ae:	fa24 f40c 	lsr.w	r4, r4, ip
     1b2:	2300      	movs	r3, #0
     1b4:	603c      	str	r4, [r7, #0]
     1b6:	607b      	str	r3, [r7, #4]
     1b8:	4631      	mov	r1, r6
     1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1be:	4650      	mov	r0, sl
     1c0:	e7db      	b.n	17a <CONFIG_IDLE_STACK_SIZE+0x3a>
     1c2:	4613      	mov	r3, r2
     1c4:	e7ee      	b.n	1a4 <CONFIG_IDLE_STACK_SIZE+0x64>
     1c6:	b902      	cbnz	r2, 1ca <CONFIG_IDLE_STACK_SIZE+0x8a>
     1c8:	deff      	udf	#255	; 0xff
     1ca:	f1bc 0f00 	cmp.w	ip, #0
     1ce:	d12e      	bne.n	22e <CONFIG_FLASH_SIZE+0x2e>
     1d0:	1a8b      	subs	r3, r1, r2
     1d2:	2601      	movs	r6, #1
     1d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1d8:	b2aa      	uxth	r2, r5
     1da:	fbb3 f8fe 	udiv	r8, r3, lr
     1de:	0c21      	lsrs	r1, r4, #16
     1e0:	fb0e 3318 	mls	r3, lr, r8, r3
     1e4:	fb08 f902 	mul.w	r9, r8, r2
     1e8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     1ec:	4599      	cmp	r9, r3
     1ee:	d961      	bls.n	2b4 <CONFIG_FLASH_SIZE+0xb4>
     1f0:	18eb      	adds	r3, r5, r3
     1f2:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     1f6:	d204      	bcs.n	202 <CONFIG_FLASH_SIZE+0x2>
     1f8:	4599      	cmp	r9, r3
     1fa:	d902      	bls.n	202 <CONFIG_FLASH_SIZE+0x2>
     1fc:	f1a8 0002 	sub.w	r0, r8, #2
     200:	442b      	add	r3, r5
     202:	eba3 0309 	sub.w	r3, r3, r9
     206:	b2a4      	uxth	r4, r4
     208:	fbb3 f1fe 	udiv	r1, r3, lr
     20c:	fb0e 3311 	mls	r3, lr, r1, r3
     210:	434a      	muls	r2, r1
     212:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     216:	42a2      	cmp	r2, r4
     218:	d94e      	bls.n	2b8 <CONFIG_FLASH_SIZE+0xb8>
     21a:	192c      	adds	r4, r5, r4
     21c:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
     220:	d203      	bcs.n	22a <CONFIG_FLASH_SIZE+0x2a>
     222:	42a2      	cmp	r2, r4
     224:	d901      	bls.n	22a <CONFIG_FLASH_SIZE+0x2a>
     226:	1e8b      	subs	r3, r1, #2
     228:	442c      	add	r4, r5
     22a:	1aa4      	subs	r4, r4, r2
     22c:	e7bc      	b.n	1a8 <CONFIG_IDLE_STACK_SIZE+0x68>
     22e:	f1cc 0e20 	rsb	lr, ip, #32
     232:	fa02 f50c 	lsl.w	r5, r2, ip
     236:	fa21 f90e 	lsr.w	r9, r1, lr
     23a:	fa01 f30c 	lsl.w	r3, r1, ip
     23e:	fa20 fe0e 	lsr.w	lr, r0, lr
     242:	ea4e 0303 	orr.w	r3, lr, r3
     246:	ea4f 4815 	mov.w	r8, r5, lsr #16
     24a:	fa00 f40c 	lsl.w	r4, r0, ip
     24e:	fbb9 f1f8 	udiv	r1, r9, r8
     252:	fa1f fe85 	uxth.w	lr, r5
     256:	fb08 9211 	mls	r2, r8, r1, r9
     25a:	0c18      	lsrs	r0, r3, #16
     25c:	fb01 f60e 	mul.w	r6, r1, lr
     260:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
     264:	4296      	cmp	r6, r2
     266:	d921      	bls.n	2ac <CONFIG_FLASH_SIZE+0xac>
     268:	18aa      	adds	r2, r5, r2
     26a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     26e:	d203      	bcs.n	278 <CONFIG_FLASH_SIZE+0x78>
     270:	4296      	cmp	r6, r2
     272:	d901      	bls.n	278 <CONFIG_FLASH_SIZE+0x78>
     274:	1e88      	subs	r0, r1, #2
     276:	442a      	add	r2, r5
     278:	1b92      	subs	r2, r2, r6
     27a:	b29b      	uxth	r3, r3
     27c:	fbb2 f9f8 	udiv	r9, r2, r8
     280:	fb08 2219 	mls	r2, r8, r9, r2
     284:	fb09 fe0e 	mul.w	lr, r9, lr
     288:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
     28c:	459e      	cmp	lr, r3
     28e:	d90f      	bls.n	2b0 <CONFIG_FLASH_SIZE+0xb0>
     290:	18eb      	adds	r3, r5, r3
     292:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
     296:	d204      	bcs.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
     298:	459e      	cmp	lr, r3
     29a:	d902      	bls.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
     29c:	f1a9 0602 	sub.w	r6, r9, #2
     2a0:	442b      	add	r3, r5
     2a2:	eba3 030e 	sub.w	r3, r3, lr
     2a6:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     2aa:	e793      	b.n	1d4 <CONFIG_IDLE_STACK_SIZE+0x94>
     2ac:	4608      	mov	r0, r1
     2ae:	e7e3      	b.n	278 <CONFIG_FLASH_SIZE+0x78>
     2b0:	464e      	mov	r6, r9
     2b2:	e7f6      	b.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
     2b4:	4640      	mov	r0, r8
     2b6:	e7a4      	b.n	202 <CONFIG_FLASH_SIZE+0x2>
     2b8:	460b      	mov	r3, r1
     2ba:	e7b6      	b.n	22a <CONFIG_FLASH_SIZE+0x2a>
     2bc:	428b      	cmp	r3, r1
     2be:	d905      	bls.n	2cc <CONFIG_FLASH_SIZE+0xcc>
     2c0:	b10f      	cbz	r7, 2c6 <CONFIG_FLASH_SIZE+0xc6>
     2c2:	e9c7 0100 	strd	r0, r1, [r7]
     2c6:	2600      	movs	r6, #0
     2c8:	4630      	mov	r0, r6
     2ca:	e775      	b.n	1b8 <CONFIG_IDLE_STACK_SIZE+0x78>
     2cc:	fab3 fc83 	clz	ip, r3
     2d0:	f1bc 0f00 	cmp.w	ip, #0
     2d4:	d10f      	bne.n	2f6 <CONFIG_FLASH_SIZE+0xf6>
     2d6:	428b      	cmp	r3, r1
     2d8:	d301      	bcc.n	2de <CONFIG_FLASH_SIZE+0xde>
     2da:	4282      	cmp	r2, r0
     2dc:	d809      	bhi.n	2f2 <CONFIG_FLASH_SIZE+0xf2>
     2de:	1a84      	subs	r4, r0, r2
     2e0:	eb61 0e03 	sbc.w	lr, r1, r3
     2e4:	2001      	movs	r0, #1
     2e6:	2f00      	cmp	r7, #0
     2e8:	d06a      	beq.n	3c0 <CONFIG_FLASH_SIZE+0x1c0>
     2ea:	e9c7 4e00 	strd	r4, lr, [r7]
     2ee:	2600      	movs	r6, #0
     2f0:	e762      	b.n	1b8 <CONFIG_IDLE_STACK_SIZE+0x78>
     2f2:	4660      	mov	r0, ip
     2f4:	e7f7      	b.n	2e6 <CONFIG_FLASH_SIZE+0xe6>
     2f6:	f1cc 0e20 	rsb	lr, ip, #32
     2fa:	fa03 f30c 	lsl.w	r3, r3, ip
     2fe:	fa22 f50e 	lsr.w	r5, r2, lr
     302:	fa21 f40e 	lsr.w	r4, r1, lr
     306:	431d      	orrs	r5, r3
     308:	fa01 f30c 	lsl.w	r3, r1, ip
     30c:	fa20 f10e 	lsr.w	r1, r0, lr
     310:	430b      	orrs	r3, r1
     312:	ea4f 4a15 	mov.w	sl, r5, lsr #16
     316:	fa00 f60c 	lsl.w	r6, r0, ip
     31a:	fbb4 f9fa 	udiv	r9, r4, sl
     31e:	fa1f f885 	uxth.w	r8, r5
     322:	fb0a 4019 	mls	r0, sl, r9, r4
     326:	0c1c      	lsrs	r4, r3, #16
     328:	fb09 f108 	mul.w	r1, r9, r8
     32c:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
     330:	42a1      	cmp	r1, r4
     332:	fa02 f20c 	lsl.w	r2, r2, ip
     336:	d93f      	bls.n	3b8 <CONFIG_FLASH_SIZE+0x1b8>
     338:	192c      	adds	r4, r5, r4
     33a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     33e:	d204      	bcs.n	34a <CONFIG_FLASH_SIZE+0x14a>
     340:	42a1      	cmp	r1, r4
     342:	d902      	bls.n	34a <CONFIG_FLASH_SIZE+0x14a>
     344:	f1a9 0002 	sub.w	r0, r9, #2
     348:	442c      	add	r4, r5
     34a:	1a64      	subs	r4, r4, r1
     34c:	b29b      	uxth	r3, r3
     34e:	fbb4 f9fa 	udiv	r9, r4, sl
     352:	fb0a 4419 	mls	r4, sl, r9, r4
     356:	fb09 f808 	mul.w	r8, r9, r8
     35a:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
     35e:	4588      	cmp	r8, r1
     360:	d92c      	bls.n	3bc <CONFIG_FLASH_SIZE+0x1bc>
     362:	1869      	adds	r1, r5, r1
     364:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
     368:	d204      	bcs.n	374 <CONFIG_FLASH_SIZE+0x174>
     36a:	4588      	cmp	r8, r1
     36c:	d902      	bls.n	374 <CONFIG_FLASH_SIZE+0x174>
     36e:	f1a9 0302 	sub.w	r3, r9, #2
     372:	4429      	add	r1, r5
     374:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     378:	eba1 0108 	sub.w	r1, r1, r8
     37c:	fba0 8902 	umull	r8, r9, r0, r2
     380:	4549      	cmp	r1, r9
     382:	46c2      	mov	sl, r8
     384:	464c      	mov	r4, r9
     386:	d302      	bcc.n	38e <CONFIG_FLASH_SIZE+0x18e>
     388:	d106      	bne.n	398 <CONFIG_FLASH_SIZE+0x198>
     38a:	4546      	cmp	r6, r8
     38c:	d204      	bcs.n	398 <CONFIG_FLASH_SIZE+0x198>
     38e:	ebb8 0a02 	subs.w	sl, r8, r2
     392:	eb69 0405 	sbc.w	r4, r9, r5
     396:	3801      	subs	r0, #1
     398:	b197      	cbz	r7, 3c0 <CONFIG_FLASH_SIZE+0x1c0>
     39a:	ebb6 030a 	subs.w	r3, r6, sl
     39e:	eb61 0604 	sbc.w	r6, r1, r4
     3a2:	fa06 fe0e 	lsl.w	lr, r6, lr
     3a6:	fa23 f30c 	lsr.w	r3, r3, ip
     3aa:	ea4e 0303 	orr.w	r3, lr, r3
     3ae:	fa26 f60c 	lsr.w	r6, r6, ip
     3b2:	e9c7 3600 	strd	r3, r6, [r7]
     3b6:	e79a      	b.n	2ee <CONFIG_FLASH_SIZE+0xee>
     3b8:	4648      	mov	r0, r9
     3ba:	e7c6      	b.n	34a <CONFIG_FLASH_SIZE+0x14a>
     3bc:	464b      	mov	r3, r9
     3be:	e7d9      	b.n	374 <CONFIG_FLASH_SIZE+0x174>
     3c0:	463e      	mov	r6, r7
     3c2:	e6f9      	b.n	1b8 <CONFIG_IDLE_STACK_SIZE+0x78>

000003c4 <button0_callback>:
int activate_sequence1 = 0;
int activate_sequence2 = 0;
int activate_sequence3 = 0;

void button0_callback(struct device *gpiob, struct gpio_callback *cb, u32_t pins)
{
     3c4:	b508      	push	{r3, lr}
    printk("Button 0 pressed!\n");
     3c6:	4805      	ldr	r0, [pc, #20]	; (3dc <button0_callback+0x18>)
     3c8:	f002 f96e 	bl	26a8 <printk>
    sequence = '0';
     3cc:	4b04      	ldr	r3, [pc, #16]	; (3e0 <button0_callback+0x1c>)
     3ce:	2230      	movs	r2, #48	; 0x30
     3d0:	701a      	strb	r2, [r3, #0]
    activate_sequence0 = 1;
     3d2:	4b04      	ldr	r3, [pc, #16]	; (3e4 <button0_callback+0x20>)
     3d4:	2201      	movs	r2, #1
     3d6:	601a      	str	r2, [r3, #0]
}
     3d8:	bd08      	pop	{r3, pc}
     3da:	bf00      	nop
     3dc:	00003020 	.word	0x00003020
     3e0:	20000f54 	.word	0x20000f54
     3e4:	20000008 	.word	0x20000008

000003e8 <button1_callback>:

void button1_callback(struct device *gpiob, struct gpio_callback *cb, u32_t pins)
{
     3e8:	b508      	push	{r3, lr}
    printk("Button 1 pressed!\n");
     3ea:	4805      	ldr	r0, [pc, #20]	; (400 <CONFIG_MAIN_STACK_SIZE>)
     3ec:	f002 f95c 	bl	26a8 <printk>
    sequence = '1';
     3f0:	4b04      	ldr	r3, [pc, #16]	; (404 <CONFIG_MAIN_STACK_SIZE+0x4>)
     3f2:	2231      	movs	r2, #49	; 0x31
     3f4:	701a      	strb	r2, [r3, #0]
    activate_sequence1 = 1;
     3f6:	4b04      	ldr	r3, [pc, #16]	; (408 <CONFIG_MAIN_STACK_SIZE+0x8>)
     3f8:	2201      	movs	r2, #1
     3fa:	601a      	str	r2, [r3, #0]
}
     3fc:	bd08      	pop	{r3, pc}
     3fe:	bf00      	nop
     400:	00003033 	.word	0x00003033
     404:	20000f54 	.word	0x20000f54
     408:	2000000c 	.word	0x2000000c

0000040c <button2_callback>:

void button2_callback(struct device *gpiob, struct gpio_callback *cb, u32_t pins)
{
     40c:	b508      	push	{r3, lr}
    printk("Button 2 pressed!\n");
     40e:	4805      	ldr	r0, [pc, #20]	; (424 <button2_callback+0x18>)
     410:	f002 f94a 	bl	26a8 <printk>
    sequence = '2';
     414:	4b04      	ldr	r3, [pc, #16]	; (428 <button2_callback+0x1c>)
     416:	2232      	movs	r2, #50	; 0x32
     418:	701a      	strb	r2, [r3, #0]
    activate_sequence2 = 1;
     41a:	4b04      	ldr	r3, [pc, #16]	; (42c <button2_callback+0x20>)
     41c:	2201      	movs	r2, #1
     41e:	601a      	str	r2, [r3, #0]
}
     420:	bd08      	pop	{r3, pc}
     422:	bf00      	nop
     424:	00003046 	.word	0x00003046
     428:	20000f54 	.word	0x20000f54
     42c:	20000010 	.word	0x20000010

00000430 <button3_callback>:

void button3_callback(struct device *gpiob, struct gpio_callback *cb, u32_t pins)
{
     430:	b508      	push	{r3, lr}
    printk("Button 3 pressed!\n");
     432:	4805      	ldr	r0, [pc, #20]	; (448 <button3_callback+0x18>)
     434:	f002 f938 	bl	26a8 <printk>
    sequence = '3';
     438:	4b04      	ldr	r3, [pc, #16]	; (44c <button3_callback+0x1c>)
     43a:	2233      	movs	r2, #51	; 0x33
     43c:	701a      	strb	r2, [r3, #0]
    activate_sequence3 = 1;
     43e:	4b04      	ldr	r3, [pc, #16]	; (450 <button3_callback+0x20>)
     440:	2201      	movs	r2, #1
     442:	601a      	str	r2, [r3, #0]
}
     444:	bd08      	pop	{r3, pc}
     446:	bf00      	nop
     448:	00003059 	.word	0x00003059
     44c:	20000f54 	.word	0x20000f54
     450:	20000014 	.word	0x20000014

00000454 <main>:

void main(void)
{
     454:	b58f      	push	{r0, r1, r2, r3, r7, lr}
    printk("Inicializando LEDs\n");
     456:	4870      	ldr	r0, [pc, #448]	; (618 <main+0x1c4>)
    set_all_led(&led0, &led1, &led2, &led3, 1);

    while(1)
    {
        k_sleep(300);
        switch (sequence)
     458:	4f70      	ldr	r7, [pc, #448]	; (61c <main+0x1c8>)
            }
            
            break;

        case '3':
            printk("Current Sequence -> %c\n", sequence);
     45a:	4c71      	ldr	r4, [pc, #452]	; (620 <main+0x1cc>)
    printk("Inicializando LEDs\n");
     45c:	f002 f924 	bl	26a8 <printk>
    led_init(&led0, LED_DEVICE0, LED_PIN0);
     460:	2211      	movs	r2, #17
     462:	4970      	ldr	r1, [pc, #448]	; (624 <main+0x1d0>)
     464:	4870      	ldr	r0, [pc, #448]	; (628 <main+0x1d4>)
     466:	f001 fed2 	bl	220e <led_init>
    led_init(&led1, LED_DEVICE1, LED_PIN1);
     46a:	2212      	movs	r2, #18
     46c:	496d      	ldr	r1, [pc, #436]	; (624 <main+0x1d0>)
     46e:	486f      	ldr	r0, [pc, #444]	; (62c <main+0x1d8>)
     470:	f001 fecd 	bl	220e <led_init>
    led_init(&led2, LED_DEVICE2, LED_PIN2);
     474:	2213      	movs	r2, #19
     476:	496b      	ldr	r1, [pc, #428]	; (624 <main+0x1d0>)
     478:	486d      	ldr	r0, [pc, #436]	; (630 <main+0x1dc>)
     47a:	f001 fec8 	bl	220e <led_init>
    led_init(&led3, LED_DEVICE3, LED_PIN3);
     47e:	2214      	movs	r2, #20
     480:	4968      	ldr	r1, [pc, #416]	; (624 <main+0x1d0>)
     482:	486c      	ldr	r0, [pc, #432]	; (634 <main+0x1e0>)
     484:	f001 fec3 	bl	220e <led_init>
    printk("LEDS ok\n");
     488:	486b      	ldr	r0, [pc, #428]	; (638 <main+0x1e4>)
     48a:	f002 f90d 	bl	26a8 <printk>
    printk("Inicializando os Botões\n");
     48e:	486b      	ldr	r0, [pc, #428]	; (63c <main+0x1e8>)
     490:	f002 f90a 	bl	26a8 <printk>
    button_create(&button0, BUTTON_DEVICE, BUTTON_PIN0, button0_callback);
     494:	4b6a      	ldr	r3, [pc, #424]	; (640 <main+0x1ec>)
     496:	4963      	ldr	r1, [pc, #396]	; (624 <main+0x1d0>)
     498:	486a      	ldr	r0, [pc, #424]	; (644 <main+0x1f0>)
     49a:	220d      	movs	r2, #13
     49c:	f001 ff10 	bl	22c0 <button_create>
    button_create(&button1, BUTTON_DEVICE, BUTTON_PIN1, button1_callback);
     4a0:	4b69      	ldr	r3, [pc, #420]	; (648 <main+0x1f4>)
     4a2:	4960      	ldr	r1, [pc, #384]	; (624 <main+0x1d0>)
     4a4:	4869      	ldr	r0, [pc, #420]	; (64c <main+0x1f8>)
     4a6:	220e      	movs	r2, #14
     4a8:	f001 ff0a 	bl	22c0 <button_create>
    button_create(&button2, BUTTON_DEVICE, BUTTON_PIN2, button2_callback);
     4ac:	4b68      	ldr	r3, [pc, #416]	; (650 <main+0x1fc>)
     4ae:	495d      	ldr	r1, [pc, #372]	; (624 <main+0x1d0>)
     4b0:	4868      	ldr	r0, [pc, #416]	; (654 <main+0x200>)
     4b2:	220f      	movs	r2, #15
     4b4:	f001 ff04 	bl	22c0 <button_create>
    button_create(&button3, BUTTON_DEVICE, BUTTON_PIN3, button3_callback);
     4b8:	4b67      	ldr	r3, [pc, #412]	; (658 <main+0x204>)
     4ba:	495a      	ldr	r1, [pc, #360]	; (624 <main+0x1d0>)
     4bc:	4867      	ldr	r0, [pc, #412]	; (65c <main+0x208>)
     4be:	2210      	movs	r2, #16
     4c0:	f001 fefe 	bl	22c0 <button_create>
    printk("Botões OK\n");
     4c4:	4866      	ldr	r0, [pc, #408]	; (660 <main+0x20c>)
     4c6:	f002 f8ef 	bl	26a8 <printk>
    set_all_led(&led0, &led1, &led2, &led3, 1);
     4ca:	2301      	movs	r3, #1
     4cc:	9300      	str	r3, [sp, #0]
     4ce:	4a58      	ldr	r2, [pc, #352]	; (630 <main+0x1dc>)
     4d0:	4b58      	ldr	r3, [pc, #352]	; (634 <main+0x1e0>)
     4d2:	4956      	ldr	r1, [pc, #344]	; (62c <main+0x1d8>)
     4d4:	4854      	ldr	r0, [pc, #336]	; (628 <main+0x1d4>)
     4d6:	f001 feab 	bl	2230 <set_all_led>
     4da:	46b8      	mov	r8, r7
        k_sleep(300);
     4dc:	f001 fe8a 	bl	21f4 <k_sleep.constprop.0>
        switch (sequence)
     4e0:	783b      	ldrb	r3, [r7, #0]
     4e2:	3b30      	subs	r3, #48	; 0x30
     4e4:	2b03      	cmp	r3, #3
     4e6:	d8f9      	bhi.n	4dc <main+0x88>
     4e8:	e8df f003 	tbb	[pc, r3]
     4ec:	77552702 	.word	0x77552702
            printk("Value of activate sequence 0 -> %d\n", activate_sequence0);
     4f0:	4d5c      	ldr	r5, [pc, #368]	; (664 <main+0x210>)
            printk("Current Sequence -> %c\n", sequence);
     4f2:	2130      	movs	r1, #48	; 0x30
     4f4:	4620      	mov	r0, r4
     4f6:	f002 f8d7 	bl	26a8 <printk>
            printk("Value of activate sequence 0 -> %d\n", activate_sequence0);
     4fa:	6829      	ldr	r1, [r5, #0]
     4fc:	485a      	ldr	r0, [pc, #360]	; (668 <main+0x214>)
     4fe:	f002 f8d3 	bl	26a8 <printk>
            if(activate_sequence0 == 1)
     502:	682e      	ldr	r6, [r5, #0]
     504:	2e01      	cmp	r6, #1
     506:	d113      	bne.n	530 <main+0xdc>
                set_all_led(&led0, &led1, &led2, &led3, 0);
     508:	2300      	movs	r3, #0
     50a:	9300      	str	r3, [sp, #0]
     50c:	4a48      	ldr	r2, [pc, #288]	; (630 <main+0x1dc>)
     50e:	4b49      	ldr	r3, [pc, #292]	; (634 <main+0x1e0>)
     510:	4946      	ldr	r1, [pc, #280]	; (62c <main+0x1d8>)
     512:	4845      	ldr	r0, [pc, #276]	; (628 <main+0x1d4>)
     514:	f001 fe8c 	bl	2230 <set_all_led>
                k_sleep(K_MSEC(300));
     518:	f001 fe6c 	bl	21f4 <k_sleep.constprop.0>
                set_all_led(&led0, &led1, &led2, &led3, 1);
     51c:	9600      	str	r6, [sp, #0]
                set_all_led(&led0, &led1, &led2, &led3, 1);
     51e:	4b45      	ldr	r3, [pc, #276]	; (634 <main+0x1e0>)
     520:	4a43      	ldr	r2, [pc, #268]	; (630 <main+0x1dc>)
     522:	4942      	ldr	r1, [pc, #264]	; (62c <main+0x1d8>)
     524:	4840      	ldr	r0, [pc, #256]	; (628 <main+0x1d4>)
     526:	f001 fe83 	bl	2230 <set_all_led>
                activate_sequence0 = 0;
     52a:	2300      	movs	r3, #0
     52c:	602b      	str	r3, [r5, #0]
            break;
     52e:	e7d5      	b.n	4dc <main+0x88>
            else if (activate_sequence0 == 0)
     530:	2e00      	cmp	r6, #0
     532:	d1fa      	bne.n	52a <main+0xd6>
                set_all_led(&led0, &led1, &led2, &led3, 1);
     534:	2301      	movs	r3, #1
     536:	9300      	str	r3, [sp, #0]
     538:	e7f1      	b.n	51e <main+0xca>
            printk("Value of activate sequence 1 -> %d\n", activate_sequence1);
     53a:	4d4c      	ldr	r5, [pc, #304]	; (66c <main+0x218>)
            printk("Current Sequence -> %c\n", sequence);
     53c:	2131      	movs	r1, #49	; 0x31
     53e:	4620      	mov	r0, r4
     540:	f002 f8b2 	bl	26a8 <printk>
            printk("Value of activate sequence 1 -> %d\n", activate_sequence1);
     544:	6829      	ldr	r1, [r5, #0]
     546:	484a      	ldr	r0, [pc, #296]	; (670 <main+0x21c>)
     548:	f002 f8ae 	bl	26a8 <printk>
            if(activate_sequence1 % 2 != 0)
     54c:	682b      	ldr	r3, [r5, #0]
     54e:	07d9      	lsls	r1, r3, #31
     550:	d518      	bpl.n	584 <main+0x130>
                turn_leds(&led0, &led1, &led2, &led3, 0, 1, 0, 1);
     552:	2600      	movs	r6, #0
     554:	2501      	movs	r5, #1
     556:	4b37      	ldr	r3, [pc, #220]	; (634 <main+0x1e0>)
     558:	4a35      	ldr	r2, [pc, #212]	; (630 <main+0x1dc>)
     55a:	4934      	ldr	r1, [pc, #208]	; (62c <main+0x1d8>)
     55c:	4832      	ldr	r0, [pc, #200]	; (628 <main+0x1d4>)
     55e:	e9cd 6502 	strd	r6, r5, [sp, #8]
     562:	e9cd 6500 	strd	r6, r5, [sp]
     566:	f001 fe83 	bl	2270 <turn_leds>
                k_sleep(K_MSEC(300));
     56a:	f001 fe43 	bl	21f4 <k_sleep.constprop.0>
                turn_leds(&led0, &led1, &led2, &led3, 1, 0, 1, 0);
     56e:	e9cd 5602 	strd	r5, r6, [sp, #8]
                turn_leds(&led0, &led1, &led2, &led3, 1, 0, 0, 1);
     572:	9601      	str	r6, [sp, #4]
            printk("Value of activate sequence 3 -> %d\n", activate_sequence3);
            if (activate_sequence3 % 2 != 0)
            {
                turn_leds(&led0, &led1, &led2, &led3, 0, 0, 1, 1);
                k_sleep(K_MSEC(300));
                turn_leds(&led0, &led1, &led2, &led3, 1, 1, 0, 0);
     574:	9500      	str	r5, [sp, #0]
     576:	4b2f      	ldr	r3, [pc, #188]	; (634 <main+0x1e0>)
     578:	4a2d      	ldr	r2, [pc, #180]	; (630 <main+0x1dc>)
     57a:	492c      	ldr	r1, [pc, #176]	; (62c <main+0x1d8>)
     57c:	482a      	ldr	r0, [pc, #168]	; (628 <main+0x1d4>)
     57e:	f001 fe77 	bl	2270 <turn_leds>
     582:	e7ab      	b.n	4dc <main+0x88>
                set_all_led(&led0, &led1, &led2, &led3, 1);
     584:	2301      	movs	r3, #1
     586:	9300      	str	r3, [sp, #0]
     588:	4a29      	ldr	r2, [pc, #164]	; (630 <main+0x1dc>)
     58a:	4b2a      	ldr	r3, [pc, #168]	; (634 <main+0x1e0>)
     58c:	4927      	ldr	r1, [pc, #156]	; (62c <main+0x1d8>)
     58e:	4826      	ldr	r0, [pc, #152]	; (628 <main+0x1d4>)
     590:	f001 fe4e 	bl	2230 <set_all_led>
     594:	e7a2      	b.n	4dc <main+0x88>
            printk("Value of activate sequence 2 -> %d\n", activate_sequence2);
     596:	4d37      	ldr	r5, [pc, #220]	; (674 <main+0x220>)
            printk("Current Sequence -> %c\n", sequence);
     598:	2132      	movs	r1, #50	; 0x32
     59a:	4620      	mov	r0, r4
     59c:	f002 f884 	bl	26a8 <printk>
            printk("Value of activate sequence 2 -> %d\n", activate_sequence2);
     5a0:	6829      	ldr	r1, [r5, #0]
     5a2:	4835      	ldr	r0, [pc, #212]	; (678 <main+0x224>)
     5a4:	f002 f880 	bl	26a8 <printk>
            if (activate_sequence2 % 2 != 0)
     5a8:	682b      	ldr	r3, [r5, #0]
     5aa:	07da      	lsls	r2, r3, #31
     5ac:	d5ea      	bpl.n	584 <main+0x130>
                turn_leds(&led0, &led1, &led2, &led3, 0, 1, 1, 0);
     5ae:	2501      	movs	r5, #1
     5b0:	2600      	movs	r6, #0
                printk("Current Sequence -> %c\n", sequence);
     5b2:	f898 1000 	ldrb.w	r1, [r8]
     5b6:	4620      	mov	r0, r4
     5b8:	f002 f876 	bl	26a8 <printk>
                turn_leds(&led0, &led1, &led2, &led3, 0, 1, 1, 0);
     5bc:	4b1d      	ldr	r3, [pc, #116]	; (634 <main+0x1e0>)
     5be:	4a1c      	ldr	r2, [pc, #112]	; (630 <main+0x1dc>)
     5c0:	491a      	ldr	r1, [pc, #104]	; (62c <main+0x1d8>)
     5c2:	4819      	ldr	r0, [pc, #100]	; (628 <main+0x1d4>)
     5c4:	e9cd 5602 	strd	r5, r6, [sp, #8]
     5c8:	e9cd 6500 	strd	r6, r5, [sp]
     5cc:	f001 fe50 	bl	2270 <turn_leds>
                k_sleep(K_MSEC(300));
     5d0:	f001 fe10 	bl	21f4 <k_sleep.constprop.0>
                turn_leds(&led0, &led1, &led2, &led3, 1, 0, 0, 1);
     5d4:	e9cd 6502 	strd	r6, r5, [sp, #8]
     5d8:	e7cb      	b.n	572 <main+0x11e>
            printk("Value of activate sequence 3 -> %d\n", activate_sequence3);
     5da:	4d28      	ldr	r5, [pc, #160]	; (67c <main+0x228>)
            printk("Current Sequence -> %c\n", sequence);
     5dc:	2133      	movs	r1, #51	; 0x33
     5de:	4620      	mov	r0, r4
     5e0:	f002 f862 	bl	26a8 <printk>
            printk("Value of activate sequence 3 -> %d\n", activate_sequence3);
     5e4:	6829      	ldr	r1, [r5, #0]
     5e6:	4826      	ldr	r0, [pc, #152]	; (680 <main+0x22c>)
     5e8:	f002 f85e 	bl	26a8 <printk>
            if (activate_sequence3 % 2 != 0)
     5ec:	682b      	ldr	r3, [r5, #0]
     5ee:	07db      	lsls	r3, r3, #31
     5f0:	d5c8      	bpl.n	584 <main+0x130>
                turn_leds(&led0, &led1, &led2, &led3, 0, 0, 1, 1);
     5f2:	2501      	movs	r5, #1
     5f4:	2600      	movs	r6, #0
     5f6:	4b0f      	ldr	r3, [pc, #60]	; (634 <main+0x1e0>)
     5f8:	4a0d      	ldr	r2, [pc, #52]	; (630 <main+0x1dc>)
     5fa:	490c      	ldr	r1, [pc, #48]	; (62c <main+0x1d8>)
     5fc:	480a      	ldr	r0, [pc, #40]	; (628 <main+0x1d4>)
     5fe:	e9cd 5502 	strd	r5, r5, [sp, #8]
     602:	e9cd 6600 	strd	r6, r6, [sp]
     606:	f001 fe33 	bl	2270 <turn_leds>
                k_sleep(K_MSEC(300));
     60a:	f001 fdf3 	bl	21f4 <k_sleep.constprop.0>
                turn_leds(&led0, &led1, &led2, &led3, 1, 1, 0, 0);
     60e:	e9cd 6602 	strd	r6, r6, [sp, #8]
     612:	9501      	str	r5, [sp, #4]
     614:	e7ae      	b.n	574 <main+0x120>
     616:	bf00      	nop
     618:	0000306c 	.word	0x0000306c
     61c:	20000f54 	.word	0x20000f54
     620:	000030b6 	.word	0x000030b6
     624:	00003080 	.word	0x00003080
     628:	20000068 	.word	0x20000068
     62c:	20000074 	.word	0x20000074
     630:	20000080 	.word	0x20000080
     634:	2000008c 	.word	0x2000008c
     638:	00003087 	.word	0x00003087
     63c:	00003090 	.word	0x00003090
     640:	000003c5 	.word	0x000003c5
     644:	20000018 	.word	0x20000018
     648:	000003e9 	.word	0x000003e9
     64c:	2000002c 	.word	0x2000002c
     650:	0000040d 	.word	0x0000040d
     654:	20000040 	.word	0x20000040
     658:	00000431 	.word	0x00000431
     65c:	20000054 	.word	0x20000054
     660:	000030aa 	.word	0x000030aa
     664:	20000008 	.word	0x20000008
     668:	000030ce 	.word	0x000030ce
     66c:	2000000c 	.word	0x2000000c
     670:	000030f2 	.word	0x000030f2
     674:	20000010 	.word	0x20000010
     678:	00003116 	.word	0x00003116
     67c:	20000014 	.word	0x20000014
     680:	0000313a 	.word	0x0000313a

00000684 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     684:	680b      	ldr	r3, [r1, #0]
     686:	3301      	adds	r3, #1
     688:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     68a:	4b01      	ldr	r3, [pc, #4]	; (690 <char_out+0xc>)
     68c:	681b      	ldr	r3, [r3, #0]
     68e:	4718      	bx	r3
     690:	20000f38 	.word	0x20000f38

00000694 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     698:	b085      	sub	sp, #20
     69a:	469b      	mov	fp, r3
     69c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     69e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 728 <_printk_dec_ulong+0x94>
     6a2:	2c01      	cmp	r4, #1
     6a4:	bfb8      	it	lt
     6a6:	2401      	movlt	r4, #1
     6a8:	2b01      	cmp	r3, #1
     6aa:	bf0c      	ite	eq
     6ac:	2330      	moveq	r3, #48	; 0x30
     6ae:	2320      	movne	r3, #32
     6b0:	4616      	mov	r6, r2
     6b2:	4682      	mov	sl, r0
     6b4:	4688      	mov	r8, r1
     6b6:	9302      	str	r3, [sp, #8]
     6b8:	2501      	movs	r5, #1
     6ba:	270a      	movs	r7, #10
     6bc:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
     6be:	fbb6 f3f9 	udiv	r3, r6, r9
     6c2:	9301      	str	r3, [sp, #4]
     6c4:	b90a      	cbnz	r2, 6ca <_printk_dec_ulong+0x36>
     6c6:	45b1      	cmp	r9, r6
     6c8:	d81d      	bhi.n	706 <_printk_dec_ulong+0x72>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
     6ca:	9b01      	ldr	r3, [sp, #4]
     6cc:	4641      	mov	r1, r8
     6ce:	f103 0030 	add.w	r0, r3, #48	; 0x30
     6d2:	47d0      	blx	sl
			digits++;
     6d4:	3501      	adds	r5, #1
			found_largest_digit = 1;
     6d6:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
     6d8:	9b01      	ldr	r3, [sp, #4]
		remaining--;
     6da:	3f01      	subs	r7, #1
	while (pos >= 10) {
     6dc:	2f01      	cmp	r7, #1
		remainder %= pos;
     6de:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
     6e2:	f04f 030a 	mov.w	r3, #10
     6e6:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
     6ea:	d1e8      	bne.n	6be <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
     6ec:	4641      	mov	r1, r8
     6ee:	f106 0030 	add.w	r0, r6, #48	; 0x30
     6f2:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
     6f4:	f1bb 0f03 	cmp.w	fp, #3
     6f8:	d102      	bne.n	700 <_printk_dec_ulong+0x6c>
		remaining = min_width - digits;
     6fa:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
     6fc:	2c00      	cmp	r4, #0
     6fe:	dc0e      	bgt.n	71e <_printk_dec_ulong+0x8a>
			out(' ', ctx);
		}
	}
}
     700:	b005      	add	sp, #20
     702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     706:	42bc      	cmp	r4, r7
     708:	dbe6      	blt.n	6d8 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     70a:	f1bb 0f02 	cmp.w	fp, #2
     70e:	d8e3      	bhi.n	6d8 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     710:	4641      	mov	r1, r8
     712:	9802      	ldr	r0, [sp, #8]
     714:	9203      	str	r2, [sp, #12]
			digits++;
     716:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     718:	47d0      	blx	sl
			digits++;
     71a:	9a03      	ldr	r2, [sp, #12]
     71c:	e7dc      	b.n	6d8 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     71e:	4641      	mov	r1, r8
     720:	2020      	movs	r0, #32
     722:	47d0      	blx	sl
     724:	3c01      	subs	r4, #1
     726:	e7e9      	b.n	6fc <_printk_dec_ulong+0x68>
     728:	3b9aca00 	.word	0x3b9aca00

0000072c <__printk_hook_install>:
	_char_out = fn;
     72c:	4b01      	ldr	r3, [pc, #4]	; (734 <__printk_hook_install+0x8>)
     72e:	6018      	str	r0, [r3, #0]
}
     730:	4770      	bx	lr
     732:	bf00      	nop
     734:	20000f38 	.word	0x20000f38

00000738 <vprintk>:
{
     738:	b507      	push	{r0, r1, r2, lr}
	struct out_context ctx = { 0 };
     73a:	2300      	movs	r3, #0
     73c:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
     73e:	4602      	mov	r2, r0
     740:	460b      	mov	r3, r1
     742:	4803      	ldr	r0, [pc, #12]	; (750 <vprintk+0x18>)
     744:	a901      	add	r1, sp, #4
     746:	f001 fe3f 	bl	23c8 <z_vprintk>
}
     74a:	b003      	add	sp, #12
     74c:	f85d fb04 	ldr.w	pc, [sp], #4
     750:	00000685 	.word	0x00000685

00000754 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
     754:	280a      	cmp	r0, #10
{
     756:	b538      	push	{r3, r4, r5, lr}
     758:	4604      	mov	r4, r0
     75a:	4d07      	ldr	r5, [pc, #28]	; (778 <console_out+0x24>)
	if ('\n' == c) {
     75c:	d104      	bne.n	768 <console_out+0x14>
     75e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
     760:	6843      	ldr	r3, [r0, #4]
     762:	210d      	movs	r1, #13
     764:	685b      	ldr	r3, [r3, #4]
     766:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
     768:	6828      	ldr	r0, [r5, #0]
     76a:	6843      	ldr	r3, [r0, #4]
     76c:	b2e1      	uxtb	r1, r4
     76e:	685b      	ldr	r3, [r3, #4]
     770:	4798      	blx	r3

	return c;
}
     772:	4620      	mov	r0, r4
     774:	bd38      	pop	{r3, r4, r5, pc}
     776:	bf00      	nop
     778:	20000098 	.word	0x20000098

0000077c <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
     77c:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
     77e:	4c04      	ldr	r4, [pc, #16]	; (790 <uart_console_hook_install+0x14>)
     780:	4620      	mov	r0, r4
     782:	f000 fc07 	bl	f94 <__stdout_hook_install>
	__printk_hook_install(console_out);
     786:	4620      	mov	r0, r4
}
     788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
     78c:	f7ff bfce 	b.w	72c <__printk_hook_install>
     790:	00000755 	.word	0x00000755

00000794 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     794:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     796:	4804      	ldr	r0, [pc, #16]	; (7a8 <uart_console_init+0x14>)
     798:	f001 f818 	bl	17cc <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     79c:	4b03      	ldr	r3, [pc, #12]	; (7ac <uart_console_init+0x18>)
     79e:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
     7a0:	f7ff ffec 	bl	77c <uart_console_hook_install>

	return 0;
}
     7a4:	2000      	movs	r0, #0
     7a6:	bd08      	pop	{r3, pc}
     7a8:	0000315e 	.word	0x0000315e
     7ac:	20000098 	.word	0x20000098

000007b0 <nrf_power_clock_isr>:
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     7b0:	4b15      	ldr	r3, [pc, #84]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
     7b2:	b507      	push	{r0, r1, r2, lr}
     7b4:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     7b6:	b182      	cbz	r2, 7da <nrf_power_clock_isr+0x2a>
    return p_reg->INTENSET & mask;
     7b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     7bc:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     7c0:	07d1      	lsls	r1, r2, #31
     7c2:	d50a      	bpl.n	7da <nrf_power_clock_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     7c4:	2200      	movs	r2, #0
     7c6:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
     7c8:	681b      	ldr	r3, [r3, #0]
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
     7ca:	4810      	ldr	r0, [pc, #64]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
     7cc:	9300      	str	r3, [sp, #0]
    (void)dummy;
     7ce:	9b00      	ldr	r3, [sp, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
     7d0:	6883      	ldr	r3, [r0, #8]
     7d2:	7a5b      	ldrb	r3, [r3, #9]
     7d4:	b90b      	cbnz	r3, 7da <nrf_power_clock_isr+0x2a>
			clkstarted_handle(hfclk_dev);
     7d6:	f002 f81d 	bl	2814 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     7da:	4b0d      	ldr	r3, [pc, #52]	; (810 <CONFIG_ISR_STACK_SIZE+0x10>)
     7dc:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     7de:	b182      	cbz	r2, 802 <CONFIG_ISR_STACK_SIZE+0x2>
    return p_reg->INTENSET & mask;
     7e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     7e4:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     7e8:	0792      	lsls	r2, r2, #30
     7ea:	d50a      	bpl.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     7ec:	2200      	movs	r2, #0
     7ee:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
     7f0:	681b      	ldr	r3, [r3, #0]
     7f2:	9301      	str	r3, [sp, #4]
    (void)dummy;
     7f4:	9b01      	ldr	r3, [sp, #4]

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
     7f6:	4807      	ldr	r0, [pc, #28]	; (814 <CONFIG_ISR_STACK_SIZE+0x14>)
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
     7f8:	b003      	add	sp, #12
     7fa:	f85d eb04 	ldr.w	lr, [sp], #4
		clkstarted_handle(lfclk_dev);
     7fe:	f002 b809 	b.w	2814 <clkstarted_handle>
}
     802:	b003      	add	sp, #12
     804:	f85d fb04 	ldr.w	pc, [sp], #4
     808:	40000100 	.word	0x40000100
     80c:	20000f7c 	.word	0x20000f7c
     810:	40000104 	.word	0x40000104
     814:	20000f88 	.word	0x20000f88

00000818 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
     818:	4b0d      	ldr	r3, [pc, #52]	; (850 <rtc1_nrf_isr+0x38>)
     81a:	2200      	movs	r2, #0
     81c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     820:	f04f 0220 	mov.w	r2, #32
     824:	f3ef 8111 	mrs	r1, BASEPRI
     828:	f382 8811 	msr	BASEPRI, r2
     82c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
     830:	4a08      	ldr	r2, [pc, #32]	; (854 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
     832:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
     836:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
     838:	1ac0      	subs	r0, r0, r3
     83a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
     83e:	4403      	add	r3, r0
     840:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     842:	f381 8811 	msr	BASEPRI, r1
     846:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
     84a:	f001 bc4b 	b.w	20e4 <z_clock_announce>
     84e:	bf00      	nop
     850:	40011000 	.word	0x40011000
     854:	200000b4 	.word	0x200000b4

00000858 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
     858:	b573      	push	{r0, r1, r4, r5, r6, lr}
     85a:	481c      	ldr	r0, [pc, #112]	; (8cc <z_clock_driver_init+0x74>)
     85c:	f000 ffb6 	bl	17cc <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
     860:	b380      	cbz	r0, 8c4 <z_clock_driver_init+0x6c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
     862:	6843      	ldr	r3, [r0, #4]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
     864:	4d1a      	ldr	r5, [pc, #104]	; (8d0 <z_clock_driver_init+0x78>)
     866:	681b      	ldr	r3, [r3, #0]
     868:	2100      	movs	r1, #0
     86a:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
     86c:	2601      	movs	r6, #1
    p_reg->PRESCALER = val;
     86e:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
     870:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
     874:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
     878:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
     87c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     880:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     884:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     888:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     88c:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
     88e:	681b      	ldr	r3, [r3, #0]
     890:	9301      	str	r3, [sp, #4]
    (void)dummy;
     892:	9b01      	ldr	r3, [sp, #4]
     894:	4b0f      	ldr	r3, [pc, #60]	; (8d4 <z_clock_driver_init+0x7c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
     896:	4631      	mov	r1, r6
     898:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     89c:	2011      	movs	r0, #17
     89e:	4622      	mov	r2, r4
     8a0:	f000 f8fe 	bl	aa0 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
     8a4:	2011      	movs	r0, #17
     8a6:	f000 f8eb 	bl	a80 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
     8aa:	4b0b      	ldr	r3, [pc, #44]	; (8d8 <z_clock_driver_init+0x80>)
     8ac:	601e      	str	r6, [r3, #0]
     8ae:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
     8b0:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
     8b4:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     8b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     8ba:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	}

	return 0;
     8be:	4620      	mov	r0, r4
}
     8c0:	b002      	add	sp, #8
     8c2:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
     8c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     8c8:	e7fa      	b.n	8c0 <z_clock_driver_init+0x68>
     8ca:	bf00      	nop
     8cc:	00003165 	.word	0x00003165
     8d0:	40011000 	.word	0x40011000
     8d4:	e000e100 	.word	0xe000e100
     8d8:	40011008 	.word	0x40011008

000008dc <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
     8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
     8de:	4e25      	ldr	r6, [pc, #148]	; (974 <z_clock_set_timeout+0x98>)
     8e0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
     8e4:	bf08      	it	eq
     8e6:	4630      	moveq	r0, r6
	__asm__ volatile(
     8e8:	f04f 0320 	mov.w	r3, #32
     8ec:	f3ef 8511 	mrs	r5, BASEPRI
     8f0:	f383 8811 	msr	BASEPRI, r3
     8f4:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     8f8:	491f      	ldr	r1, [pc, #124]	; (978 <z_clock_set_timeout+0x9c>)
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
     8fa:	4b20      	ldr	r3, [pc, #128]	; (97c <z_clock_set_timeout+0xa0>)
     8fc:	f8d1 4504 	ldr.w	r4, [r1, #1284]	; 0x504
     900:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
     902:	1ae2      	subs	r2, r4, r3
     904:	f022 477f 	bic.w	r7, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
     908:	0212      	lsls	r2, r2, #8
     90a:	d419      	bmi.n	940 <z_clock_set_timeout+0x64>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
     90c:	1e42      	subs	r2, r0, #1
     90e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
     912:	42b2      	cmp	r2, r6
     914:	bfa8      	it	ge
     916:	4632      	movge	r2, r6
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
     918:	1c78      	adds	r0, r7, #1
     91a:	4410      	add	r0, r2
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
     91c:	42b0      	cmp	r0, r6
     91e:	bf94      	ite	ls
     920:	1818      	addls	r0, r3, r0
     922:	1998      	addhi	r0, r3, r6
	return (a - b) & COUNTER_MAX;
     924:	1b04      	subs	r4, r0, r4
     926:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
     92a:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
     92e:	2c02      	cmp	r4, #2
    p_reg->CC[ch] = cc_val;
     930:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
     934:	d906      	bls.n	944 <z_clock_set_timeout+0x68>
	__asm__ volatile(
     936:	f385 8811 	msr	BASEPRI, r5
     93a:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
     93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticks = 0;
     940:	2200      	movs	r2, #0
     942:	e7e9      	b.n	918 <z_clock_set_timeout+0x3c>
     return p_reg->COUNTER;
     944:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
     948:	4a0d      	ldr	r2, [pc, #52]	; (980 <z_clock_set_timeout+0xa4>)
	return (a - b) & COUNTER_MAX;
     94a:	1ac3      	subs	r3, r0, r3
     94c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
     950:	1e5c      	subs	r4, r3, #1
     952:	4294      	cmp	r4, r2
     954:	d905      	bls.n	962 <z_clock_set_timeout+0x86>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     956:	4b0b      	ldr	r3, [pc, #44]	; (984 <z_clock_set_timeout+0xa8>)
     958:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     95c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
     960:	e7e9      	b.n	936 <z_clock_set_timeout+0x5a>
		} else if (dt == 1) {
     962:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
     964:	bf02      	ittt	eq
     966:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     968:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     96c:	f8c1 0540 	streq.w	r0, [r1, #1344]	; 0x540
     970:	e7e1      	b.n	936 <z_clock_set_timeout+0x5a>
     972:	bf00      	nop
     974:	00fffffe 	.word	0x00fffffe
     978:	40011000 	.word	0x40011000
     97c:	200000b4 	.word	0x200000b4
     980:	007ffffe 	.word	0x007ffffe
     984:	e000e100 	.word	0xe000e100

00000988 <z_clock_elapsed>:
	__asm__ volatile(
     988:	f04f 0220 	mov.w	r2, #32
     98c:	f3ef 8311 	mrs	r3, BASEPRI
     990:	f382 8811 	msr	BASEPRI, r2
     994:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     998:	4a06      	ldr	r2, [pc, #24]	; (9b4 <z_clock_elapsed+0x2c>)
     99a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
     99e:	4a06      	ldr	r2, [pc, #24]	; (9b8 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
     9a0:	6812      	ldr	r2, [r2, #0]
     9a2:	1a80      	subs	r0, r0, r2
     9a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
     9a8:	f383 8811 	msr	BASEPRI, r3
     9ac:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
     9b0:	4770      	bx	lr
     9b2:	bf00      	nop
     9b4:	40011000 	.word	0x40011000
     9b8:	200000b4 	.word	0x200000b4

000009bc <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     9bc:	4804      	ldr	r0, [pc, #16]	; (9d0 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     9be:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
     9c0:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
     9c2:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     9c4:	d003      	beq.n	9ce <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     9c6:	4903      	ldr	r1, [pc, #12]	; (9d4 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     9c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     9cc:	600a      	str	r2, [r1, #0]

000009ce <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
     9ce:	4770      	bx	lr
    ldr r0, =_kernel
     9d0:	200001b0 	.word	0x200001b0
    ldr r1, =_SCS_ICSR
     9d4:	e000ed04 	.word	0xe000ed04

000009d8 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     9d8:	4a09      	ldr	r2, [pc, #36]	; (a00 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
     9da:	490a      	ldr	r1, [pc, #40]	; (a04 <arch_swap+0x2c>)
	_current->arch.basepri = key;
     9dc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     9de:	6809      	ldr	r1, [r1, #0]
     9e0:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     9e2:	4909      	ldr	r1, [pc, #36]	; (a08 <arch_swap+0x30>)
	_current->arch.basepri = key;
     9e4:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     9e6:	684b      	ldr	r3, [r1, #4]
     9e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     9ec:	604b      	str	r3, [r1, #4]
     9ee:	2300      	movs	r3, #0
     9f0:	f383 8811 	msr	BASEPRI, r3
     9f4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
     9f8:	6893      	ldr	r3, [r2, #8]
}
     9fa:	6e98      	ldr	r0, [r3, #104]	; 0x68
     9fc:	4770      	bx	lr
     9fe:	bf00      	nop
     a00:	200001b0 	.word	0x200001b0
     a04:	0000301c 	.word	0x0000301c
     a08:	e000ed00 	.word	0xe000ed00

00000a0c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     a0c:	4912      	ldr	r1, [pc, #72]	; (a58 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     a0e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     a10:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
     a14:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
     a16:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     a1a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     a1e:	2020      	movs	r0, #32
    msr BASEPRI, r0
     a20:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
     a24:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
     a28:	4f0c      	ldr	r7, [pc, #48]	; (a5c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     a2a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
     a2e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
     a30:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
     a32:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
     a34:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
     a36:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     a38:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     a3a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
     a3e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
     a40:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
     a42:	f001 ff15 	bl	2870 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
     a46:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     a4a:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     a4e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
     a52:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
     a56:	4770      	bx	lr
    ldr r1, =_kernel
     a58:	200001b0 	.word	0x200001b0
    ldr v4, =_SCS_ICSR
     a5c:	e000ed04 	.word	0xe000ed04

00000a60 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
     a60:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     a64:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     a66:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     a6a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     a6e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
     a70:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
     a74:	2902      	cmp	r1, #2
    beq _oops
     a76:	d0ff      	beq.n	a78 <_oops>

00000a78 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
     a78:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
     a7a:	f001 feee 	bl	285a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
     a7e:	bd01      	pop	{r0, pc}

00000a80 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     a80:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     a82:	2b00      	cmp	r3, #0
     a84:	db08      	blt.n	a98 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a86:	2201      	movs	r2, #1
     a88:	f000 001f 	and.w	r0, r0, #31
     a8c:	fa02 f000 	lsl.w	r0, r2, r0
     a90:	095b      	lsrs	r3, r3, #5
     a92:	4a02      	ldr	r2, [pc, #8]	; (a9c <arch_irq_enable+0x1c>)
     a94:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
     a98:	4770      	bx	lr
     a9a:	bf00      	nop
     a9c:	e000e100 	.word	0xe000e100

00000aa0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     aa0:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
     aa2:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     aa4:	bfa8      	it	ge
     aa6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
     aaa:	f101 0101 	add.w	r1, r1, #1
     aae:	ea4f 1141 	mov.w	r1, r1, lsl #5
     ab2:	bfae      	itee	ge
     ab4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ab8:	f000 000f 	andlt.w	r0, r0, #15
     abc:	4b03      	ldrlt	r3, [pc, #12]	; (acc <z_arm_irq_priority_set+0x2c>)
     abe:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ac0:	bfac      	ite	ge
     ac2:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ac6:	5419      	strblt	r1, [r3, r0]
}
     ac8:	4770      	bx	lr
     aca:	bf00      	nop
     acc:	e000ed14 	.word	0xe000ed14

00000ad0 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
     ad0:	b573      	push	{r0, r1, r4, r5, r6, lr}
     ad2:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
     ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     ad6:	9300      	str	r3, [sp, #0]
	stackEnd = pStackMem + stackSize;
     ad8:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
     ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
     adc:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
     ade:	f002 f908 	bl	2cf2 <z_new_thread_init>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     ae2:	f1a4 0320 	sub.w	r3, r4, #32
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
     ae6:	4a0a      	ldr	r2, [pc, #40]	; (b10 <arch_new_thread+0x40>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     ae8:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
     aec:	f022 0201 	bic.w	r2, r2, #1
     af0:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
     af2:	9a06      	ldr	r2, [sp, #24]
     af4:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
     af6:	9a07      	ldr	r2, [sp, #28]
     af8:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
     afa:	9a08      	ldr	r2, [sp, #32]
     afc:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
     afe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	pInitCtx->basic.a1 = (u32_t)pEntry;
     b02:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.xpsr =
     b04:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
     b06:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
     b08:	2300      	movs	r3, #0
     b0a:	666b      	str	r3, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
     b0c:	b002      	add	sp, #8
     b0e:	bd70      	pop	{r4, r5, r6, pc}
     b10:	00002395 	.word	0x00002395

00000b14 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
     b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b16:	4605      	mov	r5, r0
     b18:	460c      	mov	r4, r1
     b1a:	4617      	mov	r7, r2
     b1c:	461e      	mov	r6, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
     b1e:	f000 f979 	bl	e14 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
     b22:	4b0a      	ldr	r3, [pc, #40]	; (b4c <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
     b24:	443c      	add	r4, r7
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
     b26:	4628      	mov	r0, r5
	_current = main_thread;
     b28:	609d      	str	r5, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
     b2a:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
     b2e:	f001 fe9f 	bl	2870 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
     b32:	4630      	mov	r0, r6
     b34:	f384 8809 	msr	PSP, r4
     b38:	2100      	movs	r1, #0
     b3a:	b663      	cpsie	if
     b3c:	f381 8811 	msr	BASEPRI, r1
     b40:	f3bf 8f6f 	isb	sy
     b44:	2200      	movs	r2, #0
     b46:	2300      	movs	r3, #0
     b48:	f001 fc24 	bl	2394 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
     b4c:	200001b0 	.word	0x200001b0

00000b50 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
     b50:	4901      	ldr	r1, [pc, #4]	; (b58 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
     b52:	2210      	movs	r2, #16
	str r2, [r1]
     b54:	600a      	str	r2, [r1, #0]
#endif
	bx lr
     b56:	4770      	bx	lr
	ldr r1, =_SCB_SCR
     b58:	e000ed10 	.word	0xe000ed10

00000b5c <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
     b5c:	4040      	eors	r0, r0
	msr BASEPRI, r0
     b5e:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
     b62:	bf30      	wfi

	bx lr
     b64:	4770      	bx	lr
     b66:	bf00      	nop

00000b68 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
     b68:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
     b6c:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
     b70:	4672      	mov	r2, lr

	push {r0, lr}
     b72:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
     b74:	f000 f8a0 	bl	cb8 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
     b78:	bd01      	pop	{r0, pc}
     b7a:	bf00      	nop

00000b7c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
     b7c:	bf30      	wfi
    b z_SysNmiOnReset
     b7e:	f7ff bffd 	b.w	b7c <z_SysNmiOnReset>
     b82:	bf00      	nop

00000b84 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
     b84:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     b86:	4b08      	ldr	r3, [pc, #32]	; (ba8 <z_arm_prep_c+0x24>)
     b88:	4a08      	ldr	r2, [pc, #32]	; (bac <z_arm_prep_c+0x28>)
     b8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     b8e:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     b90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     b94:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
     b98:	f000 fe58 	bl	184c <z_bss_zero>
	z_data_copy();
     b9c:	f000 fe60 	bl	1860 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
     ba0:	f000 f906 	bl	db0 <z_arm_int_lib_init>
	z_cstart();
     ba4:	f000 fe94 	bl	18d0 <z_cstart>
     ba8:	00000000 	.word	0x00000000
     bac:	e000ed00 	.word	0xe000ed00

00000bb0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
     bb0:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
     bb2:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
     bb4:	4a0b      	ldr	r2, [pc, #44]	; (be4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
     bb6:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
     bb8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
     bba:	bf1e      	ittt	ne
	movne	r1, #0
     bbc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
     bbe:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
     bc0:	f002 f812 	blne	2be8 <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
     bc4:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
     bc6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
     bca:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
     bce:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
     bd2:	4905      	ldr	r1, [pc, #20]	; (be8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
     bd4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
     bd6:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
     bd8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
     bda:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
     bde:	4903      	ldr	r1, [pc, #12]	; (bec <_isr_wrapper+0x3c>)
	bx r1
     be0:	4708      	bx	r1
     be2:	0000      	.short	0x0000
	ldr r2, =_kernel
     be4:	200001b0 	.word	0x200001b0
	ldr r1, =_sw_isr_table
     be8:	00002de0 	.word	0x00002de0
	ldr r1, =z_arm_int_exit
     bec:	000009bd 	.word	0x000009bd

00000bf0 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
     bf0:	f001 fea1 	bl	2936 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     bf4:	2020      	movs	r0, #32
    msr BASEPRI, r0
     bf6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
     bfa:	4808      	ldr	r0, [pc, #32]	; (c1c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
     bfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
     c00:	1840      	adds	r0, r0, r1
    msr PSP, r0
     c02:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
     c06:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
     c0a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
     c0c:	4308      	orrs	r0, r1
    msr CONTROL, r0
     c0e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
     c12:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
     c16:	f7ff ffb5 	bl	b84 <z_arm_prep_c>
     c1a:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
     c1c:	20000738 	.word	0x20000738

00000c20 <mem_manage_fault.isra.2>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
     c20:	4b0c      	ldr	r3, [pc, #48]	; (c54 <mem_manage_fault.isra.2+0x34>)
     c22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
     c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
     c26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c28:	0792      	lsls	r2, r2, #30
     c2a:	d508      	bpl.n	c3e <mem_manage_fault.isra.2+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
     c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
     c2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c30:	0612      	lsls	r2, r2, #24
     c32:	d504      	bpl.n	c3e <mem_manage_fault.isra.2+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
     c34:	b118      	cbz	r0, c3e <mem_manage_fault.isra.2+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
     c36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
     c3c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
     c3e:	4b05      	ldr	r3, [pc, #20]	; (c54 <mem_manage_fault.isra.2+0x34>)
     c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
     c42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
     c46:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
     c48:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
     c4a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
     c4e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
     c50:	7008      	strb	r0, [r1, #0]

	return reason;
}
     c52:	4770      	bx	lr
     c54:	e000ed00 	.word	0xe000ed00

00000c58 <bus_fault.isra.3>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     c58:	4b0d      	ldr	r3, [pc, #52]	; (c90 <bus_fault.isra.3+0x38>)
     c5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
     c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     c5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c60:	0592      	lsls	r2, r2, #22
     c62:	d508      	bpl.n	c76 <bus_fault.isra.3+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
     c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
     c66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c68:	0412      	lsls	r2, r2, #16
     c6a:	d504      	bpl.n	c76 <bus_fault.isra.3+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
     c6c:	b118      	cbz	r0, c76 <bus_fault.isra.3+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
     c6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
     c74:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     c76:	4b06      	ldr	r3, [pc, #24]	; (c90 <bus_fault.isra.3+0x38>)
     c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
     c7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c7c:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
     c7e:	bf58      	it	pl
     c80:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
     c82:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
     c84:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
     c86:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
     c8a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
     c8c:	7008      	strb	r0, [r1, #0]

	return reason;
}
     c8e:	4770      	bx	lr
     c90:	e000ed00 	.word	0xe000ed00

00000c94 <usage_fault.isra.4>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
     c94:	4b07      	ldr	r3, [pc, #28]	; (cb4 <usage_fault.isra.4+0x20>)
     c96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
     c98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
     c9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
     c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
     c9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
     ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
     ca2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     ca4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
     ca8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
     cac:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
     cae:	2000      	movs	r0, #0
     cb0:	4770      	bx	lr
     cb2:	bf00      	nop
     cb4:	e000ed00 	.word	0xe000ed00

00000cb8 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
     cb8:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     cba:	4b36      	ldr	r3, [pc, #216]	; (d94 <z_arm_fault+0xdc>)
     cbc:	685b      	ldr	r3, [r3, #4]
{
     cbe:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
     cc4:	2500      	movs	r5, #0
     cc6:	f385 8811 	msr	BASEPRI, r5
     cca:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
     cce:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
     cd2:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
     cd6:	d112      	bne.n	cfe <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
     cd8:	f002 040c 	and.w	r4, r2, #12
     cdc:	2c08      	cmp	r4, #8
     cde:	d00e      	beq.n	cfe <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
     ce0:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
     ce2:	bf4e      	itee	mi
     ce4:	460e      	movmi	r6, r1
			ptr_esf = (z_arch_esf_t *)msp;
     ce6:	4606      	movpl	r6, r0
			*nested_exc = true;
     ce8:	2501      	movpl	r5, #1
	*recoverable = false;
     cea:	2200      	movs	r2, #0
	switch (fault) {
     cec:	3b03      	subs	r3, #3
	*recoverable = false;
     cee:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
     cf2:	2b03      	cmp	r3, #3
     cf4:	d847      	bhi.n	d86 <z_arm_fault+0xce>
     cf6:	e8df f003 	tbb	[pc, r3]
     cfa:	3e04      	.short	0x3e04
     cfc:	3b42      	.short	0x3b42
		return NULL;
     cfe:	462e      	mov	r6, r5
     d00:	e7f3      	b.n	cea <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
     d02:	4b24      	ldr	r3, [pc, #144]	; (d94 <z_arm_fault+0xdc>)
     d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     d06:	0792      	lsls	r2, r2, #30
     d08:	d43d      	bmi.n	d86 <z_arm_fault+0xce>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
     d0a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
     d0c:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
     d10:	d008      	beq.n	d24 <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
     d12:	3328      	adds	r3, #40	; 0x28
     d14:	781b      	ldrb	r3, [r3, #0]
     d16:	b1eb      	cbz	r3, d54 <z_arm_fault+0x9c>
			reason = mem_manage_fault(esf, 1, recoverable);
     d18:	f10d 0107 	add.w	r1, sp, #7
     d1c:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
     d1e:	f7ff ff7f 	bl	c20 <mem_manage_fault.isra.2>
		reason = usage_fault(esf);
     d22:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
     d24:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d28:	b993      	cbnz	r3, d50 <z_arm_fault+0x98>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
     d2a:	2220      	movs	r2, #32
     d2c:	4631      	mov	r1, r6
     d2e:	a802      	add	r0, sp, #8
     d30:	f001 fdb2 	bl	2898 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
     d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d36:	b345      	cbz	r5, d8a <z_arm_fault+0xd2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
     d38:	f3c3 0208 	ubfx	r2, r3, #0, #9
     d3c:	b922      	cbnz	r2, d48 <z_arm_fault+0x90>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
     d3e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
     d42:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
     d46:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
     d48:	a902      	add	r1, sp, #8
     d4a:	4620      	mov	r0, r4
     d4c:	f001 fd83 	bl	2856 <z_arm_fatal_error>
}
     d50:	b00a      	add	sp, #40	; 0x28
     d52:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
     d54:	4b10      	ldr	r3, [pc, #64]	; (d98 <z_arm_fault+0xe0>)
     d56:	781b      	ldrb	r3, [r3, #0]
     d58:	b12b      	cbz	r3, d66 <z_arm_fault+0xae>
			reason = bus_fault(esf, 1, recoverable);
     d5a:	f10d 0107 	add.w	r1, sp, #7
     d5e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
     d60:	f7ff ff7a 	bl	c58 <bus_fault.isra.3>
     d64:	e7dd      	b.n	d22 <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
     d66:	4b0d      	ldr	r3, [pc, #52]	; (d9c <z_arm_fault+0xe4>)
     d68:	881c      	ldrh	r4, [r3, #0]
     d6a:	b2a4      	uxth	r4, r4
     d6c:	2c00      	cmp	r4, #0
     d6e:	d0d9      	beq.n	d24 <z_arm_fault+0x6c>
		reason = usage_fault(esf);
     d70:	f7ff ff90 	bl	c94 <usage_fault.isra.4>
     d74:	e7d5      	b.n	d22 <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
     d76:	f10d 0107 	add.w	r1, sp, #7
     d7a:	2000      	movs	r0, #0
     d7c:	e7cf      	b.n	d1e <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
     d7e:	f10d 0107 	add.w	r1, sp, #7
     d82:	2000      	movs	r0, #0
     d84:	e7ec      	b.n	d60 <z_arm_fault+0xa8>
	u32_t reason = K_ERR_CPU_EXCEPTION;
     d86:	2400      	movs	r4, #0
     d88:	e7cc      	b.n	d24 <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
     d8a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
     d8e:	f023 0301 	bic.w	r3, r3, #1
     d92:	e7d8      	b.n	d46 <z_arm_fault+0x8e>
     d94:	e000ed00 	.word	0xe000ed00
     d98:	e000ed29 	.word	0xe000ed29
     d9c:	e000ed2a 	.word	0xe000ed2a

00000da0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
     da0:	4a02      	ldr	r2, [pc, #8]	; (dac <z_arm_fault_init+0xc>)
     da2:	6953      	ldr	r3, [r2, #20]
     da4:	f043 0310 	orr.w	r3, r3, #16
     da8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
     daa:	4770      	bx	lr
     dac:	e000ed00 	.word	0xe000ed00

00000db0 <z_arm_int_lib_init>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     db0:	4804      	ldr	r0, [pc, #16]	; (dc4 <z_arm_int_lib_init+0x14>)
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
     db2:	2300      	movs	r3, #0
     db4:	2120      	movs	r1, #32
     db6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     db8:	3301      	adds	r3, #1
     dba:	2b27      	cmp	r3, #39	; 0x27
     dbc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     dc0:	d1f9      	bne.n	db6 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     dc2:	4770      	bx	lr
     dc4:	e000e100 	.word	0xe000e100

00000dc8 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
     dc8:	b538      	push	{r3, r4, r5, lr}
     dca:	4605      	mov	r5, r0
	__asm__ volatile(
     dcc:	f04f 0320 	mov.w	r3, #32
     dd0:	f3ef 8411 	mrs	r4, BASEPRI
     dd4:	f383 8811 	msr	BASEPRI, r3
     dd8:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
     ddc:	f001 ff98 	bl	2d10 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
     de0:	4b0a      	ldr	r3, [pc, #40]	; (e0c <z_impl_k_thread_abort+0x44>)
     de2:	689b      	ldr	r3, [r3, #8]
     de4:	42ab      	cmp	r3, r5
     de6:	d10b      	bne.n	e00 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
     de8:	4b09      	ldr	r3, [pc, #36]	; (e10 <z_impl_k_thread_abort+0x48>)
     dea:	685a      	ldr	r2, [r3, #4]
     dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
     df0:	b912      	cbnz	r2, df8 <z_impl_k_thread_abort+0x30>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
     df2:	4620      	mov	r0, r4
     df4:	f7ff fdf0 	bl	9d8 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     df8:	685a      	ldr	r2, [r3, #4]
     dfa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
     dfe:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
     e00:	4620      	mov	r0, r4
}
     e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
     e06:	f001 bf1e 	b.w	2c46 <z_reschedule_irqlock>
     e0a:	bf00      	nop
     e0c:	200001b0 	.word	0x200001b0
     e10:	e000ed00 	.word	0xe000ed00

00000e14 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
     e14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
     e16:	4b08      	ldr	r3, [pc, #32]	; (e38 <z_arm_configure_static_mpu_regions+0x24>)
     e18:	9301      	str	r3, [sp, #4]
     e1a:	4b08      	ldr	r3, [pc, #32]	; (e3c <z_arm_configure_static_mpu_regions+0x28>)
     e1c:	9302      	str	r3, [sp, #8]
     e1e:	4b08      	ldr	r3, [pc, #32]	; (e40 <z_arm_configure_static_mpu_regions+0x2c>)
     e20:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
     e22:	ab01      	add	r3, sp, #4
     e24:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
     e26:	4a07      	ldr	r2, [pc, #28]	; (e44 <z_arm_configure_static_mpu_regions+0x30>)
     e28:	4b07      	ldr	r3, [pc, #28]	; (e48 <z_arm_configure_static_mpu_regions+0x34>)
     e2a:	2101      	movs	r1, #1
     e2c:	4668      	mov	r0, sp
     e2e:	f000 f891 	bl	f54 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
     e32:	b005      	add	sp, #20
     e34:	f85d fb04 	ldr.w	pc, [sp], #4
     e38:	20000000 	.word	0x20000000
     e3c:	00000000 	.word	0x00000000
     e40:	060b0000 	.word	0x060b0000
     e44:	20000000 	.word	0x20000000
     e48:	20010000 	.word	0x20010000

00000e4c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
     e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
     e4e:	4f20      	ldr	r7, [pc, #128]	; (ed0 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
     e50:	2600      	movs	r6, #0
     e52:	428e      	cmp	r6, r1
     e54:	db01      	blt.n	e5a <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
     e56:	4610      	mov	r0, r2
     e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
     e5a:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
     e5e:	f8dc 4004 	ldr.w	r4, [ip, #4]
     e62:	b394      	cbz	r4, eca <mpu_configure_regions+0x7e>
		if (do_sanity_check &&
     e64:	b15b      	cbz	r3, e7e <mpu_configure_regions+0x32>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
     e66:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
     e6a:	ea14 0f0e 	tst.w	r4, lr
     e6e:	d11a      	bne.n	ea6 <mpu_configure_regions+0x5a>
		&&
     e70:	2c1f      	cmp	r4, #31
     e72:	d918      	bls.n	ea6 <mpu_configure_regions+0x5a>
		((part->start & (part->size - 1)) == 0U);
     e74:	f8dc 5000 	ldr.w	r5, [ip]
		&&
     e78:	ea1e 0f05 	tst.w	lr, r5
     e7c:	d113      	bne.n	ea6 <mpu_configure_regions+0x5a>
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
     e7e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
     e80:	f8dc 5000 	ldr.w	r5, [ip]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
     e84:	f8dc c008 	ldr.w	ip, [ip, #8]
		reg_index = mpu_configure_region(reg_index, regions[i]);
     e88:	b2d2      	uxtb	r2, r2
     e8a:	d90f      	bls.n	eac <mpu_configure_regions+0x60>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
     e8c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
     e90:	d80e      	bhi.n	eb0 <mpu_configure_regions+0x64>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
     e92:	3c01      	subs	r4, #1
     e94:	fab4 f484 	clz	r4, r4
     e98:	f1c4 041f 	rsb	r4, r4, #31
     e9c:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
     e9e:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
     ea0:	ea4c 0404 	orr.w	r4, ip, r4
     ea4:	d906      	bls.n	eb4 <mpu_configure_regions+0x68>
			return -EINVAL;
     ea6:	f06f 0215 	mvn.w	r2, #21
     eaa:	e7d4      	b.n	e56 <mpu_configure_regions+0xa>
		return REGION_32B;
     eac:	2408      	movs	r4, #8
     eae:	e7f6      	b.n	e9e <mpu_configure_regions+0x52>
		return REGION_4G;
     eb0:	243e      	movs	r4, #62	; 0x3e
     eb2:	e7f4      	b.n	e9e <mpu_configure_regions+0x52>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     eb4:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
     eb8:	4315      	orrs	r5, r2
     eba:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
     ebe:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
     ec2:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     ec4:	60fd      	str	r5, [r7, #12]
		reg_index++;
     ec6:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
     ec8:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
     eca:	3601      	adds	r6, #1
     ecc:	e7c1      	b.n	e52 <mpu_configure_regions+0x6>
     ece:	bf00      	nop
     ed0:	e000ed90 	.word	0xe000ed90

00000ed4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
     ed4:	4b03      	ldr	r3, [pc, #12]	; (ee4 <arm_core_mpu_enable+0x10>)
     ed6:	2205      	movs	r2, #5
     ed8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
     eda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     ede:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
     ee2:	4770      	bx	lr
     ee4:	e000ed90 	.word	0xe000ed90

00000ee8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     ee8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
     eec:	4b01      	ldr	r3, [pc, #4]	; (ef4 <arm_core_mpu_disable+0xc>)
     eee:	2200      	movs	r2, #0
     ef0:	605a      	str	r2, [r3, #4]
}
     ef2:	4770      	bx	lr
     ef4:	e000ed90 	.word	0xe000ed90

00000ef8 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
     ef8:	4913      	ldr	r1, [pc, #76]	; (f48 <arm_mpu_init+0x50>)
     efa:	6808      	ldr	r0, [r1, #0]
     efc:	2808      	cmp	r0, #8
{
     efe:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
     f00:	d81e      	bhi.n	f40 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
     f02:	f7ff fff1 	bl	ee8 <arm_core_mpu_disable>
	MPU->RNR = index;
     f06:	4c11      	ldr	r4, [pc, #68]	; (f4c <arm_mpu_init+0x54>)
     f08:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
     f0a:	2200      	movs	r2, #0
     f0c:	4290      	cmp	r0, r2
     f0e:	f101 010c 	add.w	r1, r1, #12
     f12:	d105      	bne.n	f20 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
     f14:	4b0e      	ldr	r3, [pc, #56]	; (f50 <arm_mpu_init+0x58>)
     f16:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
     f18:	f7ff ffdc 	bl	ed4 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
     f1c:	2000      	movs	r0, #0
}
     f1e:	bd10      	pop	{r4, pc}
     f20:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     f22:	f851 3c0c 	ldr.w	r3, [r1, #-12]
     f26:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
     f2a:	4313      	orrs	r3, r2
     f2c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     f30:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
     f32:	f851 3c04 	ldr.w	r3, [r1, #-4]
     f36:	f043 0301 	orr.w	r3, r3, #1
     f3a:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
     f3c:	3201      	adds	r2, #1
     f3e:	e7e5      	b.n	f0c <arm_mpu_init+0x14>
		return -1;
     f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     f44:	e7eb      	b.n	f1e <arm_mpu_init+0x26>
     f46:	bf00      	nop
     f48:	00002fb0 	.word	0x00002fb0
     f4c:	e000ed90 	.word	0xe000ed90
     f50:	200001f0 	.word	0x200001f0

00000f54 <arm_core_mpu_configure_static_mpu_regions>:
{
     f54:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
     f56:	4c03      	ldr	r4, [pc, #12]	; (f64 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
     f58:	2301      	movs	r3, #1
     f5a:	7822      	ldrb	r2, [r4, #0]
     f5c:	f7ff ff76 	bl	e4c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
     f60:	7020      	strb	r0, [r4, #0]
}
     f62:	bd10      	pop	{r4, pc}
     f64:	200001f0 	.word	0x200001f0

00000f68 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
     f68:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
     f6a:	4a08      	ldr	r2, [pc, #32]	; (f8c <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
     f6c:	2300      	movs	r3, #0
     f6e:	7812      	ldrb	r2, [r2, #0]
     f70:	f7ff ff6c 	bl	e4c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
     f74:	f110 0f16 	cmn.w	r0, #22
     f78:	d003      	beq.n	f82 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
     f7a:	4b05      	ldr	r3, [pc, #20]	; (f90 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
     f7c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
     f7e:	2807      	cmp	r0, #7
     f80:	dd00      	ble.n	f84 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
     f82:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
     f84:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
     f86:	611a      	str	r2, [r3, #16]
     f88:	3001      	adds	r0, #1
     f8a:	e7f8      	b.n	f7e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
     f8c:	200001f0 	.word	0x200001f0
     f90:	e000ed90 	.word	0xe000ed90

00000f94 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
     f94:	4b01      	ldr	r3, [pc, #4]	; (f9c <__stdout_hook_install+0x8>)
     f96:	6018      	str	r0, [r3, #0]
}
     f98:	4770      	bx	lr
     f9a:	bf00      	nop
     f9c:	20000f3c 	.word	0x20000f3c

00000fa0 <nordicsemi_nrf52_init>:
     fa0:	f04f 0320 	mov.w	r3, #32
     fa4:	f3ef 8211 	mrs	r2, BASEPRI
     fa8:	f383 8811 	msr	BASEPRI, r3
     fac:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     fb0:	4906      	ldr	r1, [pc, #24]	; (fcc <nordicsemi_nrf52_init+0x2c>)
     fb2:	2301      	movs	r3, #1
     fb4:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
     fb8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     fbc:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
     fc0:	f382 8811 	msr	BASEPRI, r2
     fc4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     fc8:	2000      	movs	r0, #0
     fca:	4770      	bx	lr
     fcc:	4001e000 	.word	0x4001e000

00000fd0 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
     fd0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
     fd2:	4b09      	ldr	r3, [pc, #36]	; (ff8 <gpio_nrfx_init+0x28>)
     fd4:	781a      	ldrb	r2, [r3, #0]
     fd6:	b96a      	cbnz	r2, ff4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
     fd8:	2101      	movs	r1, #1
     fda:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
     fdc:	2006      	movs	r0, #6
     fde:	2105      	movs	r1, #5
     fe0:	f7ff fd5e 	bl	aa0 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
     fe4:	2006      	movs	r0, #6
     fe6:	f7ff fd4b 	bl	a80 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
     fea:	4b04      	ldr	r3, [pc, #16]	; (ffc <gpio_nrfx_init+0x2c>)
     fec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
     ff0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
     ff4:	2000      	movs	r0, #0
     ff6:	bd08      	pop	{r3, pc}
     ff8:	200001f1 	.word	0x200001f1
     ffc:	40006000 	.word	0x40006000

00001000 <gpiote_pin_int_cfg>:
{
    1000:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return port->config->config_info;
    1002:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    1004:	4d55      	ldr	r5, [pc, #340]	; (115c <gpiote_pin_int_cfg+0x15c>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1006:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
    1008:	6882      	ldr	r2, [r0, #8]
    100a:	f8d5 4304 	ldr.w	r4, [r5, #772]	; 0x304
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    100e:	7918      	ldrb	r0, [r3, #4]
    1010:	f001 031f 	and.w	r3, r1, #31
    1014:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
    1018:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    101a:	2000      	movs	r0, #0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    101c:	f500 76a2 	add.w	r6, r0, #324	; 0x144
    1020:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
    1024:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    1028:	42b3      	cmp	r3, r6
    102a:	d175      	bne.n	1118 <gpiote_pin_int_cfg+0x118>
		    && (intenset & BIT(i))) {
    102c:	fa24 f600 	lsr.w	r6, r4, r0
    1030:	07f6      	lsls	r6, r6, #31
    1032:	d571      	bpl.n	1118 <gpiote_pin_int_cfg+0x118>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    1034:	0084      	lsls	r4, r0, #2
    1036:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    103a:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000
    103e:	f8d4 6510 	ldr.w	r6, [r4, #1296]	; 0x510
    1042:	f026 0601 	bic.w	r6, r6, #1
    1046:	f8c4 6510 	str.w	r6, [r4, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    104a:	2401      	movs	r4, #1
    104c:	fa04 f000 	lsl.w	r0, r4, r0
    p_reg->INTENCLR = mask;
    1050:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    1054:	009c      	lsls	r4, r3, #2
    1056:	f104 44a0 	add.w	r4, r4, #1342177280	; 0x50000000
    105a:	f8d4 0700 	ldr.w	r0, [r4, #1792]	; 0x700
    105e:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    1062:	f8c4 0700 	str.w	r0, [r4, #1792]	; 0x700
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    1066:	6890      	ldr	r0, [r2, #8]
    1068:	40c8      	lsrs	r0, r1
    106a:	f010 0001 	ands.w	r0, r0, #1
    106e:	d051      	beq.n	1114 <gpiote_pin_int_cfg+0x114>
    1070:	68d0      	ldr	r0, [r2, #12]
    1072:	40c8      	lsrs	r0, r1
    1074:	f010 0001 	ands.w	r0, r0, #1
    1078:	d04c      	beq.n	1114 <gpiote_pin_int_cfg+0x114>
		if (data->trig_edge & BIT(pin)) {
    107a:	6950      	ldr	r0, [r2, #20]
    107c:	40c8      	lsrs	r0, r1
    107e:	f010 0001 	ands.w	r0, r0, #1
    1082:	d056      	beq.n	1132 <gpiote_pin_int_cfg+0x132>
			if (data->double_edge & BIT(pin)) {
    1084:	6990      	ldr	r0, [r2, #24]
    1086:	40c8      	lsrs	r0, r1
    1088:	07c0      	lsls	r0, r0, #31
    108a:	d44a      	bmi.n	1122 <gpiote_pin_int_cfg+0x122>
			} else if (((data->active_level & BIT(pin)) != 0U)
    108c:	6910      	ldr	r0, [r2, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    108e:	69d2      	ldr	r2, [r2, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
    1090:	40c8      	lsrs	r0, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    1092:	fa22 f101 	lsr.w	r1, r2, r1
			} else if (((data->active_level & BIT(pin)) != 0U)
    1096:	f000 0001 	and.w	r0, r0, #1
    109a:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    109e:	4288      	cmp	r0, r1
    10a0:	bf14      	ite	ne
    10a2:	2101      	movne	r1, #1
    10a4:	2102      	moveq	r1, #2
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    10a6:	4d2d      	ldr	r5, [pc, #180]	; (115c <gpiote_pin_int_cfg+0x15c>)
    10a8:	2400      	movs	r4, #0
    10aa:	f504 72a2 	add.w	r2, r4, #324	; 0x144
    10ae:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    10b2:	f010 0003 	ands.w	r0, r0, #3
    10b6:	d136      	bne.n	1126 <gpiote_pin_int_cfg+0x126>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    10b8:	00a2      	lsls	r2, r4, #2
    10ba:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    10be:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    10c2:	021b      	lsls	r3, r3, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    10c4:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    10c8:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    10cc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    10d0:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
			nrf_gpiote_event_t evt =
    10d4:	f104 0340 	add.w	r3, r4, #64	; 0x40
    10d8:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    10dc:	009b      	lsls	r3, r3, #2
    10de:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    10e2:	b29b      	uxth	r3, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    10e4:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    10e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    10ec:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    10f0:	4331      	orrs	r1, r6
    10f2:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    10f6:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    10f8:	681b      	ldr	r3, [r3, #0]
    10fa:	9301      	str	r3, [sp, #4]
    (void)dummy;
    10fc:	9b01      	ldr	r3, [sp, #4]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    10fe:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    1102:	f043 0301 	orr.w	r3, r3, #1
    1106:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    110a:	2301      	movs	r3, #1
    110c:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENSET = mask;
    1110:	f8c5 4304 	str.w	r4, [r5, #772]	; 0x304
}
    1114:	b002      	add	sp, #8
    1116:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1118:	3001      	adds	r0, #1
    111a:	2808      	cmp	r0, #8
    111c:	f47f af7e 	bne.w	101c <gpiote_pin_int_cfg+0x1c>
    1120:	e798      	b.n	1054 <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    1122:	2103      	movs	r1, #3
    1124:	e7bf      	b.n	10a6 <gpiote_pin_int_cfg+0xa6>
    1126:	3401      	adds	r4, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    1128:	2c08      	cmp	r4, #8
    112a:	d1be      	bne.n	10aa <gpiote_pin_int_cfg+0xaa>
	return -ENODEV;
    112c:	f06f 0012 	mvn.w	r0, #18
    1130:	e7f0      	b.n	1114 <gpiote_pin_int_cfg+0x114>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    1132:	6913      	ldr	r3, [r2, #16]
    1134:	69d2      	ldr	r2, [r2, #28]
    1136:	4053      	eors	r3, r2
    1138:	fa23 f101 	lsr.w	r1, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    113c:	f8d4 3700 	ldr.w	r3, [r4, #1792]	; 0x700
		return NRF_GPIO_PIN_SENSE_HIGH;
    1140:	f011 0f01 	tst.w	r1, #1
    1144:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    1148:	bf14      	ite	ne
    114a:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    114e:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    1152:	4313      	orrs	r3, r2
    1154:	f8c4 3700 	str.w	r3, [r4, #1792]	; 0x700
    1158:	e7dc      	b.n	1114 <gpiote_pin_int_cfg+0x114>
    115a:	bf00      	nop
    115c:	40006000 	.word	0x40006000

00001160 <gpiote_event_handler>:
{
    1160:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1164:	4953      	ldr	r1, [pc, #332]	; (12b4 <gpiote_event_handler+0x154>)
    1166:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
    1168:	2d00      	cmp	r5, #0
    116a:	d067      	beq.n	123c <gpiote_event_handler+0xdc>
	struct gpio_nrfx_data *data = get_port_data(port);
    116c:	4b52      	ldr	r3, [pc, #328]	; (12b8 <gpiote_event_handler+0x158>)
    116e:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
    1170:	681b      	ldr	r3, [r3, #0]
    1172:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    1174:	e9d2 0302 	ldrd	r0, r3, [r2, #8]
    1178:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
    117a:	e9d2 0405 	ldrd	r0, r4, [r2, #20]
    117e:	4320      	orrs	r0, r4
    1180:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    1184:	6830      	ldr	r0, [r6, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    1186:	69d4      	ldr	r4, [r2, #28]
    1188:	6912      	ldr	r2, [r2, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
    118a:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    118e:	4054      	eors	r4, r2
    1190:	4044      	eors	r4, r0
	u32_t out = pin_states & level_pins;
    1192:	ea23 0404 	bic.w	r4, r3, r4
	u32_t bit = 1U << pin;
    1196:	2001      	movs	r0, #1
	u32_t pin = 0U;
    1198:	2700      	movs	r7, #0
	while (level_pins) {
    119a:	2b00      	cmp	r3, #0
    119c:	d138      	bne.n	1210 <gpiote_event_handler+0xb0>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    119e:	600b      	str	r3, [r1, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    11a0:	680b      	ldr	r3, [r1, #0]
    11a2:	9300      	str	r3, [sp, #0]
    (void)dummy;
    11a4:	9b00      	ldr	r3, [sp, #0]
    return p_reg->INTENSET & mask;
    11a6:	4845      	ldr	r0, [pc, #276]	; (12bc <gpiote_event_handler+0x15c>)
	u32_t fired_triggers[GPIO_COUNT] = {0};
    11a8:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    11aa:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    11ac:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    11ae:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    11b2:	fa06 f103 	lsl.w	r1, r6, r3
    11b6:	4211      	tst	r1, r2
    11b8:	d013      	beq.n	11e2 <gpiote_event_handler+0x82>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    11ba:	009a      	lsls	r2, r3, #2
    11bc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    11c0:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
    11c4:	6811      	ldr	r1, [r2, #0]
    11c6:	b161      	cbz	r1, 11e2 <gpiote_event_handler+0x82>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    11c8:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    11cc:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    11d0:	6017      	str	r7, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    11d2:	6812      	ldr	r2, [r2, #0]
    11d4:	9201      	str	r2, [sp, #4]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    11d6:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    11da:	fa06 f101 	lsl.w	r1, r6, r1
    (void)dummy;
    11de:	9a01      	ldr	r2, [sp, #4]
    11e0:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    11e2:	3301      	adds	r3, #1
    11e4:	2b08      	cmp	r3, #8
    11e6:	d1e2      	bne.n	11ae <gpiote_event_handler+0x4e>
	if (fired_triggers[0]) {
    11e8:	bb54      	cbnz	r4, 1240 <gpiote_event_handler+0xe0>
	if (port_event) {
    11ea:	b175      	cbz	r5, 120a <gpiote_event_handler+0xaa>
	const struct gpio_nrfx_data *data = get_port_data(port);
    11ec:	4b32      	ldr	r3, [pc, #200]	; (12b8 <gpiote_event_handler+0x158>)
    11ee:	6899      	ldr	r1, [r3, #8]
	return port->config->config_info;
    11f0:	681b      	ldr	r3, [r3, #0]
    11f2:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    11f4:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    11f8:	4013      	ands	r3, r2
	out &= ~data->trig_edge & ~data->double_edge;
    11fa:	e9d1 2005 	ldrd	r2, r0, [r1, #20]
    11fe:	4302      	orrs	r2, r0
    1200:	ea23 0302 	bic.w	r3, r3, r2
	u32_t bit = 1U << pin;
    1204:	2401      	movs	r4, #1
	u32_t pin = 0U;
    1206:	2500      	movs	r5, #0
	while (level_pins) {
    1208:	bb8b      	cbnz	r3, 126e <gpiote_event_handler+0x10e>
}
    120a:	b002      	add	sp, #8
    120c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    1210:	4203      	tst	r3, r0
    1212:	d010      	beq.n	1236 <gpiote_event_handler+0xd6>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1214:	f896 c004 	ldrb.w	ip, [r6, #4]
    1218:	f007 021f 	and.w	r2, r7, #31
    121c:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
    1220:	0092      	lsls	r2, r2, #2
    1222:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
			level_pins &= ~bit;
    1226:	ea23 0300 	bic.w	r3, r3, r0
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    122a:	f8d2 c700 	ldr.w	ip, [r2, #1792]	; 0x700
    122e:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    1232:	f8c2 c700 	str.w	ip, [r2, #1792]	; 0x700
		++pin;
    1236:	3701      	adds	r7, #1
		bit <<= 1;
    1238:	0040      	lsls	r0, r0, #1
    123a:	e7ae      	b.n	119a <gpiote_event_handler+0x3a>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    123c:	462c      	mov	r4, r5
    123e:	e7b2      	b.n	11a6 <gpiote_event_handler+0x46>
	struct gpio_nrfx_data *data = get_port_data(port);
    1240:	4f1d      	ldr	r7, [pc, #116]	; (12b8 <gpiote_event_handler+0x158>)
    1242:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1246:	f8d8 1000 	ldr.w	r1, [r8]
    124a:	2900      	cmp	r1, #0
    124c:	d0cd      	beq.n	11ea <gpiote_event_handler+0x8a>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    124e:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
    1250:	f8d8 300c 	ldr.w	r3, [r8, #12]
    1254:	688a      	ldr	r2, [r1, #8]
    1256:	4023      	ands	r3, r4
    1258:	4213      	tst	r3, r2
    125a:	d003      	beq.n	1264 <gpiote_event_handler+0x104>
			cb->handler(port, cb, pins);
    125c:	684b      	ldr	r3, [r1, #4]
    125e:	4622      	mov	r2, r4
    1260:	4638      	mov	r0, r7
    1262:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1264:	2e00      	cmp	r6, #0
    1266:	d0c0      	beq.n	11ea <gpiote_event_handler+0x8a>
    1268:	4631      	mov	r1, r6
    126a:	6836      	ldr	r6, [r6, #0]
    126c:	e7f0      	b.n	1250 <gpiote_event_handler+0xf0>
		if (level_pins & bit) {
    126e:	421c      	tst	r4, r3
    1270:	d01c      	beq.n	12ac <gpiote_event_handler+0x14c>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1272:	7930      	ldrb	r0, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    1274:	69cf      	ldr	r7, [r1, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1276:	f005 021f 	and.w	r2, r5, #31
    127a:	ea42 1240 	orr.w	r2, r2, r0, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    127e:	6908      	ldr	r0, [r1, #16]
    1280:	0092      	lsls	r2, r2, #2
    1282:	4078      	eors	r0, r7
    1284:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    1288:	40e8      	lsrs	r0, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
    128a:	f010 0f01 	tst.w	r0, #1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    128e:	f8d2 0700 	ldr.w	r0, [r2, #1792]	; 0x700
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    1292:	bf18      	it	ne
    1294:	f44f 3700 	movne.w	r7, #131072	; 0x20000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    1298:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    129c:	bf08      	it	eq
    129e:	f44f 3740 	moveq.w	r7, #196608	; 0x30000
    12a2:	4338      	orrs	r0, r7
    12a4:	f8c2 0700 	str.w	r0, [r2, #1792]	; 0x700
			level_pins &= ~bit;
    12a8:	ea23 0304 	bic.w	r3, r3, r4
		++pin;
    12ac:	3501      	adds	r5, #1
		bit <<= 1;
    12ae:	0064      	lsls	r4, r4, #1
    12b0:	e7aa      	b.n	1208 <gpiote_event_handler+0xa8>
    12b2:	bf00      	nop
    12b4:	4000617c 	.word	0x4000617c
    12b8:	20000fb8 	.word	0x20000fb8
    12bc:	40006000 	.word	0x40006000

000012c0 <uart_nrfx_err_check>:
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    12c0:	4b02      	ldr	r3, [pc, #8]	; (12cc <uart_nrfx_err_check+0xc>)
    12c2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    12c6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    12ca:	4770      	bx	lr
    12cc:	40002000 	.word	0x40002000

000012d0 <uart_nrfx_configure>:

static int uart_nrfx_configure(struct device *dev,
			       const struct uart_config *cfg)
{
    12d0:	b530      	push	{r4, r5, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    12d2:	794b      	ldrb	r3, [r1, #5]
    12d4:	2b01      	cmp	r3, #1
    12d6:	d120      	bne.n	131a <uart_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    12d8:	798b      	ldrb	r3, [r1, #6]
    12da:	2b03      	cmp	r3, #3
    12dc:	d11d      	bne.n	131a <uart_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    12de:	79ca      	ldrb	r2, [r1, #7]
    12e0:	b12a      	cbz	r2, 12ee <uart_nrfx_configure+0x1e>
    12e2:	2a01      	cmp	r2, #1
    12e4:	d119      	bne.n	131a <uart_nrfx_configure+0x4a>
	return dev->config->config_info;
    12e6:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uart_cfg.hwfc = NRF_UART_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    12e8:	689b      	ldr	r3, [r3, #8]
    12ea:	781b      	ldrb	r3, [r3, #0]
    12ec:	b1ab      	cbz	r3, 131a <uart_nrfx_configure+0x4a>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    12ee:	790c      	ldrb	r4, [r1, #4]
    12f0:	b114      	cbz	r4, 12f8 <uart_nrfx_configure+0x28>
    12f2:	2c02      	cmp	r4, #2
    12f4:	d111      	bne.n	131a <uart_nrfx_configure+0x4a>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
    12f6:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    12f8:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    12fa:	f647 2512 	movw	r5, #31250	; 0x7a12
    12fe:	42ab      	cmp	r3, r5
    1300:	d05f      	beq.n	13c2 <uart_nrfx_configure+0xf2>
    1302:	d827      	bhi.n	1354 <uart_nrfx_configure+0x84>
    1304:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1308:	d05e      	beq.n	13c8 <uart_nrfx_configure+0xf8>
    130a:	d812      	bhi.n	1332 <uart_nrfx_configure+0x62>
    130c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1310:	d05c      	beq.n	13cc <uart_nrfx_configure+0xfc>
    1312:	d805      	bhi.n	1320 <uart_nrfx_configure+0x50>
    1314:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1318:	d05b      	beq.n	13d2 <uart_nrfx_configure+0x102>
		return -ENOTSUP;
    131a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    131e:	e04f      	b.n	13c0 <uart_nrfx_configure+0xf0>
	switch (baudrate) {
    1320:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    1324:	d058      	beq.n	13d8 <uart_nrfx_configure+0x108>
    1326:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    132a:	d1f6      	bne.n	131a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    132c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    1330:	e03b      	b.n	13aa <uart_nrfx_configure+0xda>
	switch (baudrate) {
    1332:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    1336:	d052      	beq.n	13de <uart_nrfx_configure+0x10e>
    1338:	d804      	bhi.n	1344 <uart_nrfx_configure+0x74>
    133a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    133e:	d1ec      	bne.n	131a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    1340:	4b30      	ldr	r3, [pc, #192]	; (1404 <uart_nrfx_configure+0x134>)
    1342:	e032      	b.n	13aa <uart_nrfx_configure+0xda>
	switch (baudrate) {
    1344:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    1348:	d04c      	beq.n	13e4 <uart_nrfx_configure+0x114>
    134a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    134e:	d1e4      	bne.n	131a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    1350:	4b2d      	ldr	r3, [pc, #180]	; (1408 <uart_nrfx_configure+0x138>)
    1352:	e02a      	b.n	13aa <uart_nrfx_configure+0xda>
	switch (baudrate) {
    1354:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    1358:	d046      	beq.n	13e8 <uart_nrfx_configure+0x118>
    135a:	d811      	bhi.n	1380 <uart_nrfx_configure+0xb0>
    135c:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    1360:	42ab      	cmp	r3, r5
    1362:	d043      	beq.n	13ec <uart_nrfx_configure+0x11c>
    1364:	d804      	bhi.n	1370 <uart_nrfx_configure+0xa0>
    1366:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    136a:	d1d6      	bne.n	131a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    136c:	4b27      	ldr	r3, [pc, #156]	; (140c <uart_nrfx_configure+0x13c>)
    136e:	e01c      	b.n	13aa <uart_nrfx_configure+0xda>
	switch (baudrate) {
    1370:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    1374:	d03d      	beq.n	13f2 <uart_nrfx_configure+0x122>
    1376:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    137a:	d1ce      	bne.n	131a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    137c:	4b24      	ldr	r3, [pc, #144]	; (1410 <uart_nrfx_configure+0x140>)
    137e:	e014      	b.n	13aa <uart_nrfx_configure+0xda>
	switch (baudrate) {
    1380:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    1384:	d037      	beq.n	13f6 <uart_nrfx_configure+0x126>
    1386:	d808      	bhi.n	139a <uart_nrfx_configure+0xca>
    1388:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    138c:	d035      	beq.n	13fa <uart_nrfx_configure+0x12a>
    138e:	4d21      	ldr	r5, [pc, #132]	; (1414 <uart_nrfx_configure+0x144>)
    1390:	42ab      	cmp	r3, r5
    1392:	d1c2      	bne.n	131a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    1394:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1398:	e007      	b.n	13aa <uart_nrfx_configure+0xda>
	switch (baudrate) {
    139a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    139e:	d02e      	beq.n	13fe <uart_nrfx_configure+0x12e>
    13a0:	4d1d      	ldr	r5, [pc, #116]	; (1418 <uart_nrfx_configure+0x148>)
    13a2:	42ab      	cmp	r3, r5
    13a4:	d1b9      	bne.n	131a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    13a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    13aa:	4d1c      	ldr	r5, [pc, #112]	; (141c <uart_nrfx_configure+0x14c>)
                    | (uint32_t)p_cfg->hwfc;
    13ac:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
    13ae:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    13b2:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    13b6:	6883      	ldr	r3, [r0, #8]
    13b8:	c903      	ldmia	r1, {r0, r1}
    13ba:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    13be:	2000      	movs	r0, #0
}
    13c0:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    13c2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    13c6:	e7f0      	b.n	13aa <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    13c8:	4b15      	ldr	r3, [pc, #84]	; (1420 <uart_nrfx_configure+0x150>)
    13ca:	e7ee      	b.n	13aa <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00027000;
    13cc:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    13d0:	e7eb      	b.n	13aa <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
    13d2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    13d6:	e7e8      	b.n	13aa <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    13d8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    13dc:	e7e5      	b.n	13aa <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    13de:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    13e2:	e7e2      	b.n	13aa <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    13e4:	4b0f      	ldr	r3, [pc, #60]	; (1424 <uart_nrfx_configure+0x154>)
    13e6:	e7e0      	b.n	13aa <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    13e8:	4b0f      	ldr	r3, [pc, #60]	; (1428 <uart_nrfx_configure+0x158>)
    13ea:	e7de      	b.n	13aa <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    13ec:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    13f0:	e7db      	b.n	13aa <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    13f2:	4b0e      	ldr	r3, [pc, #56]	; (142c <uart_nrfx_configure+0x15c>)
    13f4:	e7d9      	b.n	13aa <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    13f6:	4b0e      	ldr	r3, [pc, #56]	; (1430 <uart_nrfx_configure+0x160>)
    13f8:	e7d7      	b.n	13aa <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    13fa:	4b0e      	ldr	r3, [pc, #56]	; (1434 <uart_nrfx_configure+0x164>)
    13fc:	e7d5      	b.n	13aa <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    13fe:	4b0e      	ldr	r3, [pc, #56]	; (1438 <uart_nrfx_configure+0x168>)
    1400:	e7d3      	b.n	13aa <uart_nrfx_configure+0xda>
    1402:	bf00      	nop
    1404:	00275000 	.word	0x00275000
    1408:	0075f000 	.word	0x0075f000
    140c:	009d5000 	.word	0x009d5000
    1410:	013a9000 	.word	0x013a9000
    1414:	0003d090 	.word	0x0003d090
    1418:	000f4240 	.word	0x000f4240
    141c:	40002000 	.word	0x40002000
    1420:	0013b000 	.word	0x0013b000
    1424:	004ea000 	.word	0x004ea000
    1428:	01d7e000 	.word	0x01d7e000
    142c:	00ebf000 	.word	0x00ebf000
    1430:	075f7000 	.word	0x075f7000
    1434:	03afb000 	.word	0x03afb000
    1438:	0ebed000 	.word	0x0ebed000

0000143c <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    143c:	4b08      	ldr	r3, [pc, #32]	; (1460 <uart_nrfx_poll_in+0x24>)
    143e:	681a      	ldr	r2, [r3, #0]
{
    1440:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    1442:	b152      	cbz	r2, 145a <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1444:	2000      	movs	r0, #0
    1446:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1448:	681b      	ldr	r3, [r3, #0]
    144a:	9301      	str	r3, [sp, #4]
    (void)dummy;
    144c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
    144e:	4b05      	ldr	r3, [pc, #20]	; (1464 <uart_nrfx_poll_in+0x28>)
    1450:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    1454:	700b      	strb	r3, [r1, #0]
}
    1456:	b002      	add	sp, #8
    1458:	4770      	bx	lr
		return -1;
    145a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    145e:	e7fa      	b.n	1456 <uart_nrfx_poll_in+0x1a>
    1460:	40002108 	.word	0x40002108
    1464:	40002000 	.word	0x40002000

00001468 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1468:	4b09      	ldr	r3, [pc, #36]	; (1490 <uart_nrfx_poll_out+0x28>)
    146a:	2200      	movs	r2, #0
    146c:	601a      	str	r2, [r3, #0]
{
    146e:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1470:	681a      	ldr	r2, [r3, #0]
    1472:	9201      	str	r2, [sp, #4]
    (void)dummy;
    1474:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1476:	4a07      	ldr	r2, [pc, #28]	; (1494 <uart_nrfx_poll_out+0x2c>)
    1478:	2001      	movs	r0, #1
    147a:	6010      	str	r0, [r2, #0]
    p_reg->TXD = txd;
    147c:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1480:	681a      	ldr	r2, [r3, #0]
	while (!event_txdrdy_check()) {
    1482:	2a00      	cmp	r2, #0
    1484:	d0fc      	beq.n	1480 <uart_nrfx_poll_out+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1486:	4b04      	ldr	r3, [pc, #16]	; (1498 <uart_nrfx_poll_out+0x30>)
    1488:	2201      	movs	r2, #1
    148a:	601a      	str	r2, [r3, #0]
}
    148c:	b002      	add	sp, #8
    148e:	4770      	bx	lr
    1490:	4000211c 	.word	0x4000211c
    1494:	40002008 	.word	0x40002008
    1498:	4000200c 	.word	0x4000200c

0000149c <uart_nrfx_init>:
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    149c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
    14a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSELRXD = pselrxd;
    14a2:	4c16      	ldr	r4, [pc, #88]	; (14fc <uart_nrfx_init+0x60>)
    14a4:	2240      	movs	r2, #64	; 0x40
    14a6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    14aa:	2103      	movs	r1, #3
    14ac:	2200      	movs	r2, #0
    14ae:	2508      	movs	r5, #8
    14b0:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
    14b4:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    14b8:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
    14bc:	2506      	movs	r5, #6
    14be:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    14c2:	2520      	movs	r5, #32
    14c4:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    14c8:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
    14cc:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSELRTS = pselrts;
    14d0:	2305      	movs	r3, #5
    14d2:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSELCTS = pselcts;
    14d6:	2307      	movs	r3, #7
    14d8:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
			       DT_NORDIC_NRF_UART_UART_0_RTS_PIN,
			       DT_NORDIC_NRF_UART_UART_0_CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    14dc:	6881      	ldr	r1, [r0, #8]
    14de:	f7ff fef7 	bl	12d0 <uart_nrfx_configure>
	if (err) {
    14e2:	b948      	cbnz	r0, 14f8 <uart_nrfx_init+0x5c>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    14e4:	2304      	movs	r3, #4
    14e6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    14ea:	4b05      	ldr	r3, [pc, #20]	; (1500 <uart_nrfx_init+0x64>)
    14ec:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    14ee:	681b      	ldr	r3, [r3, #0]
    14f0:	9301      	str	r3, [sp, #4]
    (void)dummy;
    14f2:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    14f4:	2301      	movs	r3, #1
    14f6:	6023      	str	r3, [r4, #0]
	defined(DT_NORDIC_NRF_UART_UART_0_CTS_PIN)
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
    14f8:	b003      	add	sp, #12
    14fa:	bd30      	pop	{r4, r5, pc}
    14fc:	40002000 	.word	0x40002000
    1500:	40002108 	.word	0x40002108

00001504 <errata_108>:
static bool errata_12(void)
{
    uint32_t var1;
    uint32_t var2;

    if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    1504:	4b04      	ldr	r3, [pc, #16]	; (1518 <errata_108+0x14>)
    1506:	6818      	ldr	r0, [r3, #0]
    1508:	1c42      	adds	r2, r0, #1
    {
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    150a:	bf04      	itt	eq
    150c:	4b03      	ldreq	r3, [pc, #12]	; (151c <errata_108+0x18>)
    150e:	7818      	ldrbeq	r0, [r3, #0]
        break;

    }

    return false;
}
    1510:	1f83      	subs	r3, r0, #6
    1512:	4258      	negs	r0, r3
    1514:	4158      	adcs	r0, r3
    1516:	4770      	bx	lr
    1518:	10000130 	.word	0x10000130
    151c:	f0000fe0 	.word	0xf0000fe0

00001520 <errata_16>:
    return false;
}

static bool errata_16(void)
{
    uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    1520:	4b07      	ldr	r3, [pc, #28]	; (1540 <errata_16+0x20>)
    1522:	781b      	ldrb	r3, [r3, #0]
    uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;

    switch(var1)
    1524:	2b06      	cmp	r3, #6
    1526:	d109      	bne.n	153c <errata_16+0x1c>
    uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    1528:	4b06      	ldr	r3, [pc, #24]	; (1544 <errata_16+0x24>)
    152a:	681b      	ldr	r3, [r3, #0]
    152c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    1530:	3b03      	subs	r3, #3
    1532:	2b03      	cmp	r3, #3
    1534:	d802      	bhi.n	153c <errata_16+0x1c>
    1536:	4a04      	ldr	r2, [pc, #16]	; (1548 <errata_16+0x28>)
    1538:	5cd0      	ldrb	r0, [r2, r3]
    153a:	4770      	bx	lr
            }
        break;

    }

    return false;
    153c:	2000      	movs	r0, #0
}
    153e:	4770      	bx	lr
    1540:	f0000fe0 	.word	0xf0000fe0
    1544:	f0000fe8 	.word	0xf0000fe8
    1548:	00003193 	.word	0x00003193

0000154c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    154c:	b508      	push	{r3, lr}
        NRF_P0->PIN_CNF[20] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_12()){
    154e:	f7ff ffd9 	bl	1504 <errata_108>
    1552:	b128      	cbz	r0, 1560 <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    1554:	4b7c      	ldr	r3, [pc, #496]	; (1748 <SystemInit+0x1fc>)
    1556:	4a7d      	ldr	r2, [pc, #500]	; (174c <SystemInit+0x200>)
    1558:	681b      	ldr	r3, [r3, #0]
    155a:	f3c3 2304 	ubfx	r3, r3, #8, #5
    155e:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_16()){
    1560:	f7ff ffde 	bl	1520 <errata_16>
    1564:	b110      	cbz	r0, 156c <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    1566:	4b7a      	ldr	r3, [pc, #488]	; (1750 <SystemInit+0x204>)
    1568:	4a7a      	ldr	r2, [pc, #488]	; (1754 <SystemInit+0x208>)
    156a:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_31()){
    156c:	f7ff ffca 	bl	1504 <errata_108>
    1570:	b128      	cbz	r0, 157e <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    1572:	4b79      	ldr	r3, [pc, #484]	; (1758 <SystemInit+0x20c>)
    1574:	4a79      	ldr	r2, [pc, #484]	; (175c <SystemInit+0x210>)
    1576:	681b      	ldr	r3, [r3, #0]
    1578:	f3c3 3342 	ubfx	r3, r3, #13, #3
    157c:	6013      	str	r3, [r2, #0]
    }

    /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_32()){
    157e:	f7ff ffcf 	bl	1520 <errata_16>
    1582:	b120      	cbz	r0, 158e <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    1584:	4a76      	ldr	r2, [pc, #472]	; (1760 <SystemInit+0x214>)
    1586:	68d3      	ldr	r3, [r2, #12]
    1588:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    158c:	60d3      	str	r3, [r2, #12]
    }

    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_36()){
    158e:	f7ff ffb9 	bl	1504 <errata_108>
    1592:	b140      	cbz	r0, 15a6 <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
    1594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1598:	2200      	movs	r2, #0
    159a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    159e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    15a2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }

    /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_37()){
    15a6:	f7ff ffbb 	bl	1520 <errata_16>
    15aa:	b110      	cbz	r0, 15b2 <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    15ac:	4b6d      	ldr	r3, [pc, #436]	; (1764 <SystemInit+0x218>)
    15ae:	2203      	movs	r2, #3
    15b0:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_57()){
    15b2:	f7ff ffb5 	bl	1520 <errata_16>
    15b6:	b140      	cbz	r0, 15ca <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    15b8:	4b6b      	ldr	r3, [pc, #428]	; (1768 <SystemInit+0x21c>)
    15ba:	2205      	movs	r2, #5
    15bc:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    15be:	2201      	movs	r2, #1
    15c0:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    15c2:	2200      	movs	r2, #0
    15c4:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    15c6:	223f      	movs	r2, #63	; 0x3f
    15c8:	605a      	str	r2, [r3, #4]
static bool errata_66(void)
{
    uint32_t var1;
    uint32_t var2;

    if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    15ca:	4b68      	ldr	r3, [pc, #416]	; (176c <SystemInit+0x220>)
    15cc:	681a      	ldr	r2, [r3, #0]
    15ce:	1c51      	adds	r1, r2, #1
    {
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    15d0:	bf0b      	itete	eq
    15d2:	4b67      	ldreq	r3, [pc, #412]	; (1770 <SystemInit+0x224>)
        var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    }
    else
    {
        var1 = *(uint32_t *)0x10000130ul;
        var2 = *(uint32_t *)0x10000134ul;
    15d4:	4b67      	ldrne	r3, [pc, #412]	; (1774 <SystemInit+0x228>)
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    15d6:	781a      	ldrbeq	r2, [r3, #0]
        var2 = *(uint32_t *)0x10000134ul;
    15d8:	681b      	ldrne	r3, [r3, #0]
        var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    15da:	bf02      	ittt	eq
    15dc:	3308      	addeq	r3, #8
    15de:	681b      	ldreq	r3, [r3, #0]
    15e0:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
    }

    switch(var1)
    15e4:	2a06      	cmp	r2, #6
    15e6:	d14d      	bne.n	1684 <SystemInit+0x138>
    {
        case 0x06:
            switch(var2)
    15e8:	3b03      	subs	r3, #3
    15ea:	2b03      	cmp	r3, #3
    15ec:	d803      	bhi.n	15f6 <SystemInit+0xaa>
    }

    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_66()){
    15ee:	4a62      	ldr	r2, [pc, #392]	; (1778 <SystemInit+0x22c>)
    15f0:	5cd3      	ldrb	r3, [r2, r3]
    15f2:	2b00      	cmp	r3, #0
    15f4:	d046      	beq.n	1684 <SystemInit+0x138>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    15f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    15fa:	4b60      	ldr	r3, [pc, #384]	; (177c <SystemInit+0x230>)
    15fc:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    1600:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    1604:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    1608:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    160c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    1610:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    1614:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    1618:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    161c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    1620:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    1624:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    1628:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    162c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    1630:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    1634:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    1638:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    163c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    1640:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    1644:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    1648:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    164c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    1650:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    1654:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    1658:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    165c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    1660:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    1664:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    1668:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    166c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    1670:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    1674:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    1678:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    167c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    1680:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }

    /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_108()){
    1684:	f7ff ff3e 	bl	1504 <errata_108>
    1688:	b128      	cbz	r0, 1696 <SystemInit+0x14a>
        *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    168a:	4b3d      	ldr	r3, [pc, #244]	; (1780 <SystemInit+0x234>)
    168c:	4a3d      	ldr	r2, [pc, #244]	; (1784 <SystemInit+0x238>)
    168e:	681b      	ldr	r3, [r3, #0]
    1690:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    1694:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_136()){
    1696:	f7ff ff35 	bl	1504 <errata_108>
    169a:	b148      	cbz	r0, 16b0 <SystemInit+0x164>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    169c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    16a0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    16a4:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    16a6:	bf44      	itt	mi
    16a8:	f06f 0201 	mvnmi.w	r2, #1
    16ac:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    return false;
}

static bool errata_182(void)
{
    uint32_t var1 = *(uint32_t *)0x10000130ul;
    16b0:	4b2e      	ldr	r3, [pc, #184]	; (176c <SystemInit+0x220>)
    uint32_t var2 = *(uint32_t *)0x10000134ul;

    switch(var1)
    16b2:	681b      	ldr	r3, [r3, #0]
    16b4:	2b06      	cmp	r3, #6
    16b6:	d109      	bne.n	16cc <SystemInit+0x180>
    uint32_t var2 = *(uint32_t *)0x10000134ul;
    16b8:	4b2e      	ldr	r3, [pc, #184]	; (1774 <SystemInit+0x228>)
    {
        case 0x06:
            switch(var2)
    16ba:	681b      	ldr	r3, [r3, #0]
    16bc:	3b03      	subs	r3, #3
    16be:	2b02      	cmp	r3, #2
    }
    
    /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_182()){
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    16c0:	bf81      	itttt	hi
    16c2:	4a31      	ldrhi	r2, [pc, #196]	; (1788 <SystemInit+0x23c>)
    16c4:	6813      	ldrhi	r3, [r2, #0]
    16c6:	f443 6380 	orrhi.w	r3, r3, #1024	; 0x400
    16ca:	6013      	strhi	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    16cc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    16d0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    16d4:	2a00      	cmp	r2, #0
    16d6:	db03      	blt.n	16e0 <SystemInit+0x194>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    16d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    16dc:	2b00      	cmp	r3, #0
    16de:	da2f      	bge.n	1740 <SystemInit+0x1f4>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    16e0:	4b2a      	ldr	r3, [pc, #168]	; (178c <SystemInit+0x240>)
    16e2:	2201      	movs	r2, #1
    16e4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    16e8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    16ec:	2a00      	cmp	r2, #0
    16ee:	d0fb      	beq.n	16e8 <SystemInit+0x19c>
            NRF_UICR->PSELRESET[0] = 21;
    16f0:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    16f4:	2115      	movs	r1, #21
    16f6:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    16fa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    16fe:	2a00      	cmp	r2, #0
    1700:	d0fb      	beq.n	16fa <SystemInit+0x1ae>
            NRF_UICR->PSELRESET[1] = 21;
    1702:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    1706:	2215      	movs	r2, #21
    1708:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    170c:	4b1f      	ldr	r3, [pc, #124]	; (178c <SystemInit+0x240>)
    170e:	461a      	mov	r2, r3
    1710:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    1714:	2900      	cmp	r1, #0
    1716:	d0fb      	beq.n	1710 <SystemInit+0x1c4>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    1718:	2100      	movs	r1, #0
    171a:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    171e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    1722:	2b00      	cmp	r3, #0
    1724:	d0fb      	beq.n	171e <SystemInit+0x1d2>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1726:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    172a:	4919      	ldr	r1, [pc, #100]	; (1790 <SystemInit+0x244>)
    172c:	4b19      	ldr	r3, [pc, #100]	; (1794 <SystemInit+0x248>)
    172e:	68ca      	ldr	r2, [r1, #12]
    1730:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1734:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1736:	60cb      	str	r3, [r1, #12]
    1738:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    173c:	bf00      	nop
    173e:	e7fd      	b.n	173c <SystemInit+0x1f0>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    1740:	4b15      	ldr	r3, [pc, #84]	; (1798 <SystemInit+0x24c>)
    1742:	4a16      	ldr	r2, [pc, #88]	; (179c <SystemInit+0x250>)
    1744:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    1746:	bd08      	pop	{r3, pc}
    1748:	10000324 	.word	0x10000324
    174c:	40013540 	.word	0x40013540
    1750:	4007c074 	.word	0x4007c074
    1754:	baadf00d 	.word	0xbaadf00d
    1758:	10000244 	.word	0x10000244
    175c:	4000053c 	.word	0x4000053c
    1760:	e000edf0 	.word	0xe000edf0
    1764:	400005a0 	.word	0x400005a0
    1768:	40005610 	.word	0x40005610
    176c:	10000130 	.word	0x10000130
    1770:	f0000fe0 	.word	0xf0000fe0
    1774:	10000134 	.word	0x10000134
    1778:	00003197 	.word	0x00003197
    177c:	4000c000 	.word	0x4000c000
    1780:	10000258 	.word	0x10000258
    1784:	40000ee4 	.word	0x40000ee4
    1788:	4000173c 	.word	0x4000173c
    178c:	4001e000 	.word	0x4001e000
    1790:	e000ed00 	.word	0xe000ed00
    1794:	05fa0004 	.word	0x05fa0004
    1798:	20000f48 	.word	0x20000f48
    179c:	03d09000 	.word	0x03d09000

000017a0 <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
    17a0:	4b09      	ldr	r3, [pc, #36]	; (17c8 <z_sys_device_do_config_level+0x28>)
{
    17a2:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
    17a4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    17a8:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    17aa:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    17ac:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    17b0:	42a5      	cmp	r5, r4
    17b2:	d800      	bhi.n	17b6 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
    17b4:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    17b6:	6823      	ldr	r3, [r4, #0]
    17b8:	4620      	mov	r0, r4
    17ba:	685b      	ldr	r3, [r3, #4]
    17bc:	4798      	blx	r3
		if (retval != 0) {
    17be:	b100      	cbz	r0, 17c2 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
    17c0:	6066      	str	r6, [r4, #4]
								info++) {
    17c2:	340c      	adds	r4, #12
    17c4:	e7f4      	b.n	17b0 <z_sys_device_do_config_level+0x10>
    17c6:	bf00      	nop
    17c8:	00003008 	.word	0x00003008

000017cc <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    17cc:	4b10      	ldr	r3, [pc, #64]	; (1810 <z_impl_device_get_binding+0x44>)
{
    17ce:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    17d0:	4c10      	ldr	r4, [pc, #64]	; (1814 <z_impl_device_get_binding+0x48>)
{
    17d2:	4605      	mov	r5, r0
    17d4:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    17d6:	429c      	cmp	r4, r3
    17d8:	d104      	bne.n	17e4 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    17da:	4c0e      	ldr	r4, [pc, #56]	; (1814 <z_impl_device_get_binding+0x48>)
    17dc:	42b4      	cmp	r4, r6
    17de:	d109      	bne.n	17f4 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    17e0:	2400      	movs	r4, #0
    17e2:	e012      	b.n	180a <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    17e4:	6862      	ldr	r2, [r4, #4]
    17e6:	b11a      	cbz	r2, 17f0 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    17e8:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    17ea:	6812      	ldr	r2, [r2, #0]
    17ec:	42aa      	cmp	r2, r5
    17ee:	d00c      	beq.n	180a <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    17f0:	340c      	adds	r4, #12
    17f2:	e7f0      	b.n	17d6 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    17f4:	6863      	ldr	r3, [r4, #4]
    17f6:	b90b      	cbnz	r3, 17fc <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    17f8:	340c      	adds	r4, #12
    17fa:	e7ef      	b.n	17dc <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    17fc:	6823      	ldr	r3, [r4, #0]
    17fe:	4628      	mov	r0, r5
    1800:	6819      	ldr	r1, [r3, #0]
    1802:	f001 f83d 	bl	2880 <strcmp>
    1806:	2800      	cmp	r0, #0
    1808:	d1f6      	bne.n	17f8 <z_impl_device_get_binding+0x2c>
}
    180a:	4620      	mov	r0, r4
    180c:	bd70      	pop	{r4, r5, r6, pc}
    180e:	bf00      	nop
    1810:	20000fc4 	.word	0x20000fc4
    1814:	20000f58 	.word	0x20000f58

00001818 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    1818:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    181a:	4d0b      	ldr	r5, [pc, #44]	; (1848 <idle+0x30>)
	__asm__ volatile(
    181c:	f04f 0220 	mov.w	r2, #32
    1820:	f3ef 8311 	mrs	r3, BASEPRI
    1824:	f382 8811 	msr	BASEPRI, r2
    1828:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    182c:	f001 faa5 	bl	2d7a <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    1830:	2101      	movs	r1, #1
    1832:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
    1834:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    1836:	bfd8      	it	le
    1838:	4608      	movle	r0, r1
    183a:	f001 faae 	bl	2d9a <z_set_timeout_expiry>
	_kernel.idle = ticks;
    183e:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1840:	f7ff f98c 	bl	b5c <arch_cpu_idle>
    1844:	e7ea      	b.n	181c <idle+0x4>
    1846:	bf00      	nop
    1848:	200001b0 	.word	0x200001b0

0000184c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    184c:	4802      	ldr	r0, [pc, #8]	; (1858 <z_bss_zero+0xc>)
    184e:	4a03      	ldr	r2, [pc, #12]	; (185c <z_bss_zero+0x10>)
    1850:	2100      	movs	r1, #0
    1852:	1a12      	subs	r2, r2, r0
    1854:	f001 b84a 	b.w	28ec <memset>
    1858:	20000000 	.word	0x20000000
    185c:	200001f4 	.word	0x200001f4

00001860 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    1860:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    1862:	4806      	ldr	r0, [pc, #24]	; (187c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    1864:	4a06      	ldr	r2, [pc, #24]	; (1880 <z_data_copy+0x20>)
    1866:	4907      	ldr	r1, [pc, #28]	; (1884 <z_data_copy+0x24>)
    1868:	1a12      	subs	r2, r2, r0
    186a:	f001 f815 	bl	2898 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    186e:	4a06      	ldr	r2, [pc, #24]	; (1888 <z_data_copy+0x28>)
    1870:	4906      	ldr	r1, [pc, #24]	; (188c <z_data_copy+0x2c>)
    1872:	4807      	ldr	r0, [pc, #28]	; (1890 <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    1874:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    1878:	f001 b80e 	b.w	2898 <memcpy>
    187c:	20000f38 	.word	0x20000f38
    1880:	20000fd8 	.word	0x20000fd8
    1884:	000031dc 	.word	0x000031dc
    1888:	00000000 	.word	0x00000000
    188c:	000031dc 	.word	0x000031dc
    1890:	20000000 	.word	0x20000000

00001894 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    1894:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    1896:	2002      	movs	r0, #2
    1898:	f7ff ff82 	bl	17a0 <z_sys_device_do_config_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    189c:	4a08      	ldr	r2, [pc, #32]	; (18c0 <bg_thread_main+0x2c>)
    189e:	4909      	ldr	r1, [pc, #36]	; (18c4 <bg_thread_main+0x30>)
    18a0:	4809      	ldr	r0, [pc, #36]	; (18c8 <bg_thread_main+0x34>)
    18a2:	f000 ff01 	bl	26a8 <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    18a6:	2003      	movs	r0, #3
    18a8:	f7ff ff7a 	bl	17a0 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    18ac:	f000 fb44 	bl	1f38 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    18b0:	f7fe fdd0 	bl	454 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    18b4:	4a05      	ldr	r2, [pc, #20]	; (18cc <bg_thread_main+0x38>)
    18b6:	7b13      	ldrb	r3, [r2, #12]
    18b8:	f023 0301 	bic.w	r3, r3, #1
    18bc:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    18be:	bd08      	pop	{r3, pc}
    18c0:	00003032 	.word	0x00003032
    18c4:	0000319b 	.word	0x0000319b
    18c8:	000031a9 	.word	0x000031a9
    18cc:	20000144 	.word	0x20000144

000018d0 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    18d0:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
    18d2:	4b36      	ldr	r3, [pc, #216]	; (19ac <z_cstart+0xdc>)
    18d4:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    18d6:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    18da:	4c35      	ldr	r4, [pc, #212]	; (19b0 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
    18dc:	4e35      	ldr	r6, [pc, #212]	; (19b4 <z_cstart+0xe4>)
    18de:	6963      	ldr	r3, [r4, #20]
    18e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    18e4:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e6:	2500      	movs	r5, #0
    18e8:	23e0      	movs	r3, #224	; 0xe0
    18ea:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    18ee:	77e5      	strb	r5, [r4, #31]
    18f0:	7625      	strb	r5, [r4, #24]
    18f2:	7665      	strb	r5, [r4, #25]
    18f4:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    18f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    18f8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    18fc:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    18fe:	f7ff fa4f 	bl	da0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    1902:	f7ff f925 	bl	b50 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    1906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    190a:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    190c:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
    190e:	ab07      	add	r3, sp, #28
    1910:	226c      	movs	r2, #108	; 0x6c
    1912:	4629      	mov	r1, r5
    1914:	4618      	mov	r0, r3
    1916:	f000 ffe9 	bl	28ec <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    191a:	4c27      	ldr	r4, [pc, #156]	; (19b8 <z_cstart+0xe8>)
	struct k_thread dummy_thread = {
    191c:	2701      	movs	r7, #1
	_current = &dummy_thread;
    191e:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    1920:	4628      	mov	r0, r5
	struct k_thread dummy_thread = {
    1922:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    1926:	f7ff ff3b 	bl	17a0 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    192a:	4638      	mov	r0, r7
    192c:	f7ff ff38 	bl	17a0 <z_sys_device_do_config_level>
	z_sched_init();
    1930:	f000 f9fc 	bl	1d2c <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    1934:	4b21      	ldr	r3, [pc, #132]	; (19bc <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
    1936:	6266      	str	r6, [r4, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    1938:	f44f 6280 	mov.w	r2, #1024	; 0x400
    193c:	e9cd 7304 	strd	r7, r3, [sp, #16]
    1940:	e9cd 5502 	strd	r5, r5, [sp, #8]
    1944:	4b1e      	ldr	r3, [pc, #120]	; (19c0 <z_cstart+0xf0>)
    1946:	491f      	ldr	r1, [pc, #124]	; (19c4 <z_cstart+0xf4>)
    1948:	e9cd 5500 	strd	r5, r5, [sp]
    194c:	4630      	mov	r0, r6
    194e:	f000 fa97 	bl	1e80 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1952:	7b73      	ldrb	r3, [r6, #13]
    1954:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    1958:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    195c:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    195e:	d104      	bne.n	196a <z_cstart+0x9a>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    1960:	69b3      	ldr	r3, [r6, #24]
    1962:	b913      	cbnz	r3, 196a <z_cstart+0x9a>
		z_add_thread_to_ready_q(thread);
    1964:	4630      	mov	r0, r6
    1966:	f000 f8df 	bl	1b28 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
    196a:	4b17      	ldr	r3, [pc, #92]	; (19c8 <z_cstart+0xf8>)
    196c:	4d17      	ldr	r5, [pc, #92]	; (19cc <z_cstart+0xfc>)
    196e:	9305      	str	r3, [sp, #20]
    1970:	2201      	movs	r2, #1
    1972:	230f      	movs	r3, #15
    1974:	e9cd 3203 	strd	r3, r2, [sp, #12]
    1978:	2300      	movs	r3, #0
    197a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    197e:	9300      	str	r3, [sp, #0]
    1980:	f44f 72a0 	mov.w	r2, #320	; 0x140
    1984:	4b12      	ldr	r3, [pc, #72]	; (19d0 <z_cstart+0x100>)
    1986:	4913      	ldr	r1, [pc, #76]	; (19d4 <z_cstart+0x104>)
    1988:	4628      	mov	r0, r5
    198a:	f000 fa79 	bl	1e80 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    198e:	7b6b      	ldrb	r3, [r5, #13]
	_kernel.cpus[0].idle_thread = &z_idle_thread;
    1990:	60e5      	str	r5, [r4, #12]
    1992:	f023 0304 	bic.w	r3, r3, #4
    1996:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    1998:	4b0f      	ldr	r3, [pc, #60]	; (19d8 <z_cstart+0x108>)
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    199a:	490a      	ldr	r1, [pc, #40]	; (19c4 <z_cstart+0xf4>)
    199c:	4805      	ldr	r0, [pc, #20]	; (19b4 <z_cstart+0xe4>)
	list->tail = (sys_dnode_t *)list;
    199e:	e9c4 3306 	strd	r3, r3, [r4, #24]
    19a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    19a6:	4b06      	ldr	r3, [pc, #24]	; (19c0 <z_cstart+0xf0>)
    19a8:	f7ff f8b4 	bl	b14 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    19ac:	20000f38 	.word	0x20000f38
    19b0:	e000ed00 	.word	0xe000ed00
    19b4:	20000144 	.word	0x20000144
    19b8:	200001b0 	.word	0x200001b0
    19bc:	000031d0 	.word	0x000031d0
    19c0:	00001895 	.word	0x00001895
    19c4:	200001f8 	.word	0x200001f8
    19c8:	000031d5 	.word	0x000031d5
    19cc:	200000d8 	.word	0x200000d8
    19d0:	00001819 	.word	0x00001819
    19d4:	200005f8 	.word	0x200005f8
    19d8:	200001c8 	.word	0x200001c8

000019dc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    19dc:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    19de:	4c08      	ldr	r4, [pc, #32]	; (1a00 <z_reset_time_slice+0x24>)
    19e0:	6823      	ldr	r3, [r4, #0]
    19e2:	b15b      	cbz	r3, 19fc <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    19e4:	f7fe ffd0 	bl	988 <z_clock_elapsed>
    19e8:	6823      	ldr	r3, [r4, #0]
    19ea:	4a06      	ldr	r2, [pc, #24]	; (1a04 <z_reset_time_slice+0x28>)
    19ec:	4418      	add	r0, r3
    19ee:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    19f0:	2100      	movs	r1, #0
    19f2:	4618      	mov	r0, r3
	}
}
    19f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    19f8:	f001 b9cf 	b.w	2d9a <z_set_timeout_expiry>
}
    19fc:	bd10      	pop	{r4, pc}
    19fe:	bf00      	nop
    1a00:	200001e8 	.word	0x200001e8
    1a04:	200001b0 	.word	0x200001b0

00001a08 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
    1a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a0a:	460d      	mov	r5, r1
    1a0c:	f04f 0320 	mov.w	r3, #32
    1a10:	f3ef 8411 	mrs	r4, BASEPRI
    1a14:	f383 8811 	msr	BASEPRI, r3
    1a18:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    1a1c:	4b0d      	ldr	r3, [pc, #52]	; (1a54 <k_sched_time_slice_set+0x4c>)
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
    1a1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1a22:	f240 36e7 	movw	r6, #999	; 0x3e7
    1a26:	2700      	movs	r7, #0
    1a28:	fbe1 6700 	umlal	r6, r7, r1, r0
    1a2c:	2200      	movs	r2, #0
    1a2e:	611a      	str	r2, [r3, #16]
    1a30:	4630      	mov	r0, r6
    1a32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1a36:	2300      	movs	r3, #0
    1a38:	4639      	mov	r1, r7
    1a3a:	f7fe fb4f 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    1a3e:	4b06      	ldr	r3, [pc, #24]	; (1a58 <k_sched_time_slice_set+0x50>)
    1a40:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    1a42:	4b06      	ldr	r3, [pc, #24]	; (1a5c <k_sched_time_slice_set+0x54>)
    1a44:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    1a46:	f7ff ffc9 	bl	19dc <z_reset_time_slice>
	__asm__ volatile(
    1a4a:	f384 8811 	msr	BASEPRI, r4
    1a4e:	f3bf 8f6f 	isb	sy
	}
}
    1a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a54:	200001b0 	.word	0x200001b0
    1a58:	200001e8 	.word	0x200001e8
    1a5c:	200001e4 	.word	0x200001e4

00001a60 <k_sched_lock>:
	__asm__ volatile(
    1a60:	f04f 0320 	mov.w	r3, #32
    1a64:	f3ef 8111 	mrs	r1, BASEPRI
    1a68:	f383 8811 	msr	BASEPRI, r3
    1a6c:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    1a70:	4b04      	ldr	r3, [pc, #16]	; (1a84 <k_sched_lock+0x24>)
    1a72:	689a      	ldr	r2, [r3, #8]
    1a74:	7bd3      	ldrb	r3, [r2, #15]
    1a76:	3b01      	subs	r3, #1
    1a78:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    1a7a:	f381 8811 	msr	BASEPRI, r1
    1a7e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    1a82:	4770      	bx	lr
    1a84:	200001b0 	.word	0x200001b0

00001a88 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    1a88:	4b09      	ldr	r3, [pc, #36]	; (1ab0 <z_priq_dumb_remove+0x28>)
    1a8a:	f103 0228 	add.w	r2, r3, #40	; 0x28
    1a8e:	4282      	cmp	r2, r0
    1a90:	d105      	bne.n	1a9e <z_priq_dumb_remove+0x16>
    1a92:	689b      	ldr	r3, [r3, #8]
    1a94:	428b      	cmp	r3, r1
    1a96:	d102      	bne.n	1a9e <z_priq_dumb_remove+0x16>
    1a98:	7b4b      	ldrb	r3, [r1, #13]
    1a9a:	06db      	lsls	r3, r3, #27
    1a9c:	d106      	bne.n	1aac <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    1a9e:	e9d1 3200 	ldrd	r3, r2, [r1]
    1aa2:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    1aa4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    1aa6:	2300      	movs	r3, #0
	node->prev = NULL;
    1aa8:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    1aac:	4770      	bx	lr
    1aae:	bf00      	nop
    1ab0:	200001b0 	.word	0x200001b0

00001ab4 <update_cache>:
{
    1ab4:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    1ab6:	4c0d      	ldr	r4, [pc, #52]	; (1aec <update_cache+0x38>)
{
    1ab8:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    1aba:	f104 0028 	add.w	r0, r4, #40	; 0x28
    1abe:	f001 f8d8 	bl	2c72 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
    1ac2:	4605      	mov	r5, r0
    1ac4:	b900      	cbnz	r0, 1ac8 <update_cache+0x14>
    1ac6:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    1ac8:	68a3      	ldr	r3, [r4, #8]
    1aca:	b94a      	cbnz	r2, 1ae0 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    1acc:	7b5a      	ldrb	r2, [r3, #13]
    1ace:	06d2      	lsls	r2, r2, #27
    1ad0:	d106      	bne.n	1ae0 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    1ad2:	69aa      	ldr	r2, [r5, #24]
    1ad4:	b922      	cbnz	r2, 1ae0 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
    1ad6:	89da      	ldrh	r2, [r3, #14]
    1ad8:	2a7f      	cmp	r2, #127	; 0x7f
    1ada:	d901      	bls.n	1ae0 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    1adc:	6263      	str	r3, [r4, #36]	; 0x24
}
    1ade:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
    1ae0:	429d      	cmp	r5, r3
    1ae2:	d001      	beq.n	1ae8 <update_cache+0x34>
			z_reset_time_slice();
    1ae4:	f7ff ff7a 	bl	19dc <z_reset_time_slice>
		_kernel.ready_q.cache = th;
    1ae8:	6265      	str	r5, [r4, #36]	; 0x24
}
    1aea:	e7f8      	b.n	1ade <update_cache+0x2a>
    1aec:	200001b0 	.word	0x200001b0

00001af0 <k_sched_unlock>:
{
    1af0:	b510      	push	{r4, lr}
	__asm__ volatile(
    1af2:	f04f 0320 	mov.w	r3, #32
    1af6:	f3ef 8411 	mrs	r4, BASEPRI
    1afa:	f383 8811 	msr	BASEPRI, r3
    1afe:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    1b02:	4b08      	ldr	r3, [pc, #32]	; (1b24 <k_sched_unlock+0x34>)
    1b04:	689a      	ldr	r2, [r3, #8]
    1b06:	7bd3      	ldrb	r3, [r2, #15]
    1b08:	3301      	adds	r3, #1
    1b0a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    1b0c:	2000      	movs	r0, #0
    1b0e:	f7ff ffd1 	bl	1ab4 <update_cache>
	__asm__ volatile(
    1b12:	f384 8811 	msr	BASEPRI, r4
    1b16:	f3bf 8f6f 	isb	sy
}
    1b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    1b1e:	f001 b89e 	b.w	2c5e <z_reschedule_unlocked>
    1b22:	bf00      	nop
    1b24:	200001b0 	.word	0x200001b0

00001b28 <z_add_thread_to_ready_q>:
{
    1b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    1b2a:	f04f 0320 	mov.w	r3, #32
    1b2e:	f3ef 8411 	mrs	r4, BASEPRI
    1b32:	f383 8811 	msr	BASEPRI, r3
    1b36:	f3bf 8f6f 	isb	sy
	return list->head == list;
    1b3a:	4a15      	ldr	r2, [pc, #84]	; (1b90 <z_add_thread_to_ready_q+0x68>)
    1b3c:	4611      	mov	r1, r2
    1b3e:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1b42:	428b      	cmp	r3, r1
    1b44:	d01d      	beq.n	1b82 <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1b46:	b1e3      	cbz	r3, 1b82 <z_add_thread_to_ready_q+0x5a>
    1b48:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    1b4a:	f990 500e 	ldrsb.w	r5, [r0, #14]
    1b4e:	f993 700e 	ldrsb.w	r7, [r3, #14]
    1b52:	42af      	cmp	r7, r5
    1b54:	dd10      	ble.n	1b78 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
    1b56:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    1b58:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    1b5c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    1b5e:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    1b60:	7b43      	ldrb	r3, [r0, #13]
    1b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1b66:	7343      	strb	r3, [r0, #13]
		update_cache(0);
    1b68:	2000      	movs	r0, #0
    1b6a:	f7ff ffa3 	bl	1ab4 <update_cache>
	__asm__ volatile(
    1b6e:	f384 8811 	msr	BASEPRI, r4
    1b72:	f3bf 8f6f 	isb	sy
}
    1b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    1b78:	42b3      	cmp	r3, r6
    1b7a:	d002      	beq.n	1b82 <z_add_thread_to_ready_q+0x5a>
    1b7c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1b7e:	2b00      	cmp	r3, #0
    1b80:	d1e5      	bne.n	1b4e <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
    1b82:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1b84:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    1b86:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    1b88:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
    1b8a:	6018      	str	r0, [r3, #0]
	list->tail = node;
    1b8c:	62d0      	str	r0, [r2, #44]	; 0x2c
    1b8e:	e7e7      	b.n	1b60 <z_add_thread_to_ready_q+0x38>
    1b90:	200001b0 	.word	0x200001b0

00001b94 <z_move_thread_to_end_of_prio_q>:
{
    1b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b96:	4604      	mov	r4, r0
	__asm__ volatile(
    1b98:	f04f 0320 	mov.w	r3, #32
    1b9c:	f3ef 8511 	mrs	r5, BASEPRI
    1ba0:	f383 8811 	msr	BASEPRI, r3
    1ba4:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    1ba8:	7b43      	ldrb	r3, [r0, #13]
    1baa:	065a      	lsls	r2, r3, #25
    1bac:	d503      	bpl.n	1bb6 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    1bae:	4601      	mov	r1, r0
    1bb0:	4817      	ldr	r0, [pc, #92]	; (1c10 <z_move_thread_to_end_of_prio_q+0x7c>)
    1bb2:	f7ff ff69 	bl	1a88 <z_priq_dumb_remove>
	return list->head == list;
    1bb6:	4a17      	ldr	r2, [pc, #92]	; (1c14 <z_move_thread_to_end_of_prio_q+0x80>)
    1bb8:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1bbc:	f102 0128 	add.w	r1, r2, #40	; 0x28
    1bc0:	428b      	cmp	r3, r1
    1bc2:	d01f      	beq.n	1c04 <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1bc4:	b1f3      	cbz	r3, 1c04 <z_move_thread_to_end_of_prio_q+0x70>
	if (t1->base.prio < t2->base.prio) {
    1bc6:	f994 600e 	ldrsb.w	r6, [r4, #14]
    1bca:	f993 700e 	ldrsb.w	r7, [r3, #14]
    1bce:	42b7      	cmp	r7, r6
    1bd0:	dd13      	ble.n	1bfa <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
    1bd2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    1bd4:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    1bd8:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    1bda:	605c      	str	r4, [r3, #4]
    1bdc:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    1bde:	6890      	ldr	r0, [r2, #8]
    1be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1be4:	7363      	strb	r3, [r4, #13]
    1be6:	1b03      	subs	r3, r0, r4
    1be8:	4258      	negs	r0, r3
    1bea:	4158      	adcs	r0, r3
    1bec:	f7ff ff62 	bl	1ab4 <update_cache>
	__asm__ volatile(
    1bf0:	f385 8811 	msr	BASEPRI, r5
    1bf4:	f3bf 8f6f 	isb	sy
}
    1bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    1bfa:	4283      	cmp	r3, r0
    1bfc:	d002      	beq.n	1c04 <z_move_thread_to_end_of_prio_q+0x70>
    1bfe:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1c00:	2b00      	cmp	r3, #0
    1c02:	d1e2      	bne.n	1bca <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
    1c04:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    1c08:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1c0a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    1c0c:	62d4      	str	r4, [r2, #44]	; 0x2c
    1c0e:	e7e5      	b.n	1bdc <z_move_thread_to_end_of_prio_q+0x48>
    1c10:	200001d8 	.word	0x200001d8
    1c14:	200001b0 	.word	0x200001b0

00001c18 <z_time_slice>:
	if (pending_current == _current) {
    1c18:	4a15      	ldr	r2, [pc, #84]	; (1c70 <z_time_slice+0x58>)
    1c1a:	4916      	ldr	r1, [pc, #88]	; (1c74 <z_time_slice+0x5c>)
{
    1c1c:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    1c1e:	680c      	ldr	r4, [r1, #0]
    1c20:	6893      	ldr	r3, [r2, #8]
    1c22:	42a3      	cmp	r3, r4
    1c24:	4614      	mov	r4, r2
    1c26:	d103      	bne.n	1c30 <z_time_slice+0x18>
}
    1c28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    1c2c:	f7ff bed6 	b.w	19dc <z_reset_time_slice>
	pending_current = NULL;
    1c30:	2500      	movs	r5, #0
    1c32:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
    1c34:	4910      	ldr	r1, [pc, #64]	; (1c78 <z_time_slice+0x60>)
    1c36:	6809      	ldr	r1, [r1, #0]
    1c38:	b1b9      	cbz	r1, 1c6a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
    1c3a:	89d9      	ldrh	r1, [r3, #14]
    1c3c:	297f      	cmp	r1, #127	; 0x7f
    1c3e:	d814      	bhi.n	1c6a <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
    1c40:	490e      	ldr	r1, [pc, #56]	; (1c7c <z_time_slice+0x64>)
    1c42:	f993 500e 	ldrsb.w	r5, [r3, #14]
    1c46:	6809      	ldr	r1, [r1, #0]
    1c48:	428d      	cmp	r5, r1
    1c4a:	db0e      	blt.n	1c6a <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
    1c4c:	490c      	ldr	r1, [pc, #48]	; (1c80 <z_time_slice+0x68>)
    1c4e:	428b      	cmp	r3, r1
    1c50:	d00b      	beq.n	1c6a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
    1c52:	6999      	ldr	r1, [r3, #24]
    1c54:	b949      	cbnz	r1, 1c6a <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    1c56:	6911      	ldr	r1, [r2, #16]
    1c58:	4281      	cmp	r1, r0
    1c5a:	dc03      	bgt.n	1c64 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    1c5c:	4618      	mov	r0, r3
    1c5e:	f7ff ff99 	bl	1b94 <z_move_thread_to_end_of_prio_q>
    1c62:	e7e1      	b.n	1c28 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
    1c64:	1a09      	subs	r1, r1, r0
    1c66:	6111      	str	r1, [r2, #16]
}
    1c68:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    1c6a:	2300      	movs	r3, #0
    1c6c:	6123      	str	r3, [r4, #16]
    1c6e:	e7fb      	b.n	1c68 <z_time_slice+0x50>
    1c70:	200001b0 	.word	0x200001b0
    1c74:	200001e0 	.word	0x200001e0
    1c78:	200001e8 	.word	0x200001e8
    1c7c:	200001e4 	.word	0x200001e4
    1c80:	200000d8 	.word	0x200000d8

00001c84 <z_remove_thread_from_ready_q>:
{
    1c84:	b538      	push	{r3, r4, r5, lr}
    1c86:	4604      	mov	r4, r0
	__asm__ volatile(
    1c88:	f04f 0320 	mov.w	r3, #32
    1c8c:	f3ef 8511 	mrs	r5, BASEPRI
    1c90:	f383 8811 	msr	BASEPRI, r3
    1c94:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    1c98:	7b43      	ldrb	r3, [r0, #13]
    1c9a:	065a      	lsls	r2, r3, #25
    1c9c:	d507      	bpl.n	1cae <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    1c9e:	4601      	mov	r1, r0
    1ca0:	4809      	ldr	r0, [pc, #36]	; (1cc8 <z_remove_thread_from_ready_q+0x44>)
    1ca2:	f7ff fef1 	bl	1a88 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    1ca6:	7b63      	ldrb	r3, [r4, #13]
    1ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    1cac:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    1cae:	4b07      	ldr	r3, [pc, #28]	; (1ccc <z_remove_thread_from_ready_q+0x48>)
    1cb0:	6898      	ldr	r0, [r3, #8]
    1cb2:	1b03      	subs	r3, r0, r4
    1cb4:	4258      	negs	r0, r3
    1cb6:	4158      	adcs	r0, r3
    1cb8:	f7ff fefc 	bl	1ab4 <update_cache>
	__asm__ volatile(
    1cbc:	f385 8811 	msr	BASEPRI, r5
    1cc0:	f3bf 8f6f 	isb	sy
}
    1cc4:	bd38      	pop	{r3, r4, r5, pc}
    1cc6:	bf00      	nop
    1cc8:	200001d8 	.word	0x200001d8
    1ccc:	200001b0 	.word	0x200001b0

00001cd0 <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
    1cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
    1cd2:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
    1cd4:	f001 f87b 	bl	2dce <z_tick_get_32>
    1cd8:	1834      	adds	r4, r6, r0
	__asm__ volatile(
    1cda:	f04f 0320 	mov.w	r3, #32
    1cde:	f3ef 8711 	mrs	r7, BASEPRI
    1ce2:	f383 8811 	msr	BASEPRI, r3
    1ce6:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    1cea:	4d0d      	ldr	r5, [pc, #52]	; (1d20 <z_tick_sleep.part.19+0x50>)
    1cec:	4b0d      	ldr	r3, [pc, #52]	; (1d24 <z_tick_sleep.part.19+0x54>)
    1cee:	68a8      	ldr	r0, [r5, #8]
    1cf0:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
    1cf2:	f7ff ffc7 	bl	1c84 <z_remove_thread_from_ready_q>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    1cf6:	68a8      	ldr	r0, [r5, #8]
    1cf8:	490b      	ldr	r1, [pc, #44]	; (1d28 <z_tick_sleep.part.19+0x58>)
    1cfa:	4632      	mov	r2, r6
    1cfc:	3018      	adds	r0, #24
    1cfe:	f000 f9af 	bl	2060 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
    1d02:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    1d04:	7b53      	ldrb	r3, [r2, #13]
    1d06:	f043 0310 	orr.w	r3, r3, #16
    1d0a:	7353      	strb	r3, [r2, #13]
    1d0c:	4638      	mov	r0, r7
    1d0e:	f7fe fe63 	bl	9d8 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    1d12:	f001 f85c 	bl	2dce <z_tick_get_32>
    1d16:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    1d18:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    1d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d1e:	bf00      	nop
    1d20:	200001b0 	.word	0x200001b0
    1d24:	200001e0 	.word	0x200001e0
    1d28:	00002c7f 	.word	0x00002c7f

00001d2c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    1d2c:	4b04      	ldr	r3, [pc, #16]	; (1d40 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    1d2e:	2100      	movs	r1, #0
    1d30:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    1d34:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    1d38:	4608      	mov	r0, r1
    1d3a:	f7ff be65 	b.w	1a08 <k_sched_time_slice_set>
    1d3e:	bf00      	nop
    1d40:	200001b0 	.word	0x200001b0

00001d44 <z_impl_k_yield>:
{
    1d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    1d46:	4c23      	ldr	r4, [pc, #140]	; (1dd4 <z_impl_k_yield+0x90>)
    1d48:	4b23      	ldr	r3, [pc, #140]	; (1dd8 <z_impl_k_yield+0x94>)
    1d4a:	68a2      	ldr	r2, [r4, #8]
    1d4c:	429a      	cmp	r2, r3
    1d4e:	d029      	beq.n	1da4 <z_impl_k_yield+0x60>
    1d50:	f04f 0320 	mov.w	r3, #32
    1d54:	f3ef 8611 	mrs	r6, BASEPRI
    1d58:	f383 8811 	msr	BASEPRI, r3
    1d5c:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    1d60:	f104 0528 	add.w	r5, r4, #40	; 0x28
    1d64:	68a1      	ldr	r1, [r4, #8]
    1d66:	4628      	mov	r0, r5
    1d68:	f7ff fe8e 	bl	1a88 <z_priq_dumb_remove>
	return list->head == list;
    1d6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
    1d6e:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1d70:	42aa      	cmp	r2, r5
    1d72:	d028      	beq.n	1dc6 <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1d74:	b33a      	cbz	r2, 1dc6 <z_impl_k_yield+0x82>
    1d76:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    1d78:	f993 100e 	ldrsb.w	r1, [r3, #14]
    1d7c:	f992 700e 	ldrsb.w	r7, [r2, #14]
    1d80:	428f      	cmp	r7, r1
    1d82:	dd1b      	ble.n	1dbc <z_impl_k_yield+0x78>
	node->prev = successor->prev;
    1d84:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    1d86:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
    1d8a:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    1d8c:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
    1d8e:	7b5a      	ldrb	r2, [r3, #13]
    1d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1d94:	735a      	strb	r2, [r3, #13]
			update_cache(1);
    1d96:	2001      	movs	r0, #1
    1d98:	f7ff fe8c 	bl	1ab4 <update_cache>
	__asm__ volatile(
    1d9c:	f386 8811 	msr	BASEPRI, r6
    1da0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    1da4:	f04f 0320 	mov.w	r3, #32
    1da8:	f3ef 8011 	mrs	r0, BASEPRI
    1dac:	f383 8811 	msr	BASEPRI, r3
    1db0:	f3bf 8f6f 	isb	sy
}
    1db4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1db8:	f7fe be0e 	b.w	9d8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    1dbc:	4282      	cmp	r2, r0
    1dbe:	d002      	beq.n	1dc6 <z_impl_k_yield+0x82>
    1dc0:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1dc2:	2a00      	cmp	r2, #0
    1dc4:	d1da      	bne.n	1d7c <z_impl_k_yield+0x38>
	node->prev = list->tail;
    1dc6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1dc8:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
    1dca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
    1dcc:	601d      	str	r5, [r3, #0]
	list->tail->next = node;
    1dce:	6013      	str	r3, [r2, #0]
	list->tail = node;
    1dd0:	62e3      	str	r3, [r4, #44]	; 0x2c
    1dd2:	e7dc      	b.n	1d8e <z_impl_k_yield+0x4a>
    1dd4:	200001b0 	.word	0x200001b0
    1dd8:	200000d8 	.word	0x200000d8

00001ddc <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
    1ddc:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	if (ms == K_FOREVER) {
    1dde:	1c43      	adds	r3, r0, #1
{
    1de0:	4604      	mov	r4, r0
	if (ms == K_FOREVER) {
    1de2:	d105      	bne.n	1df0 <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
    1de4:	4b10      	ldr	r3, [pc, #64]	; (1e28 <z_impl_k_sleep+0x4c>)
    1de6:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    1de8:	f000 f886 	bl	1ef8 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
    1dec:	4620      	mov	r0, r4
    1dee:	bd38      	pop	{r3, r4, r5, pc}
    1df0:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    1df4:	f240 30e7 	movw	r0, #999	; 0x3e7
    1df8:	2100      	movs	r1, #0
    1dfa:	fbe5 0104 	umlal	r0, r1, r5, r4
    1dfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1e02:	2300      	movs	r3, #0
    1e04:	f7fe f96a 	bl	dc <__aeabi_uldivmod>
	if (ticks == 0) {
    1e08:	4604      	mov	r4, r0
    1e0a:	b948      	cbnz	r0, 1e20 <z_impl_k_sleep+0x44>
	z_impl_k_yield();
    1e0c:	f7ff ff9a 	bl	1d44 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
    1e10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1e14:	fb84 0100 	smull	r0, r1, r4, r0
    1e18:	0bc4      	lsrs	r4, r0, #15
    1e1a:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    1e1e:	e7e5      	b.n	1dec <z_impl_k_sleep+0x10>
    1e20:	f7ff ff56 	bl	1cd0 <z_tick_sleep.part.19>
    1e24:	4604      	mov	r4, r0
    1e26:	e7f3      	b.n	1e10 <z_impl_k_sleep+0x34>
    1e28:	200001b0 	.word	0x200001b0

00001e2c <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    1e2c:	4b01      	ldr	r3, [pc, #4]	; (1e34 <z_impl_k_current_get+0x8>)
    1e2e:	6898      	ldr	r0, [r3, #8]
    1e30:	4770      	bx	lr
    1e32:	bf00      	nop
    1e34:	200001b0 	.word	0x200001b0

00001e38 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    1e38:	b510      	push	{r4, lr}
    1e3a:	4602      	mov	r2, r0
    1e3c:	f04f 0320 	mov.w	r3, #32
    1e40:	f3ef 8411 	mrs	r4, BASEPRI
    1e44:	f383 8811 	msr	BASEPRI, r3
    1e48:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
    1e4c:	7b43      	ldrb	r3, [r0, #13]
    1e4e:	0759      	lsls	r1, r3, #29
    1e50:	d404      	bmi.n	1e5c <z_impl_k_thread_start+0x24>
	__asm__ volatile(
    1e52:	f384 8811 	msr	BASEPRI, r4
    1e56:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
    1e5a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1e5c:	f023 0304 	bic.w	r3, r3, #4
    1e60:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
    1e62:	f000 ff3d 	bl	2ce0 <z_is_thread_ready>
    1e66:	b110      	cbz	r0, 1e6e <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
    1e68:	4610      	mov	r0, r2
    1e6a:	f7ff fe5d 	bl	1b28 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
    1e6e:	4621      	mov	r1, r4
    1e70:	4802      	ldr	r0, [pc, #8]	; (1e7c <z_impl_k_thread_start+0x44>)
}
    1e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
    1e76:	f000 bedb 	b.w	2c30 <z_reschedule>
    1e7a:	bf00      	nop
    1e7c:	200001f2 	.word	0x200001f2

00001e80 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    1e80:	b530      	push	{r4, r5, lr}
    1e82:	b087      	sub	sp, #28
    1e84:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    1e86:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    1e88:	9504      	str	r5, [sp, #16]
    1e8a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    1e8c:	9503      	str	r5, [sp, #12]
    1e8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    1e90:	9502      	str	r5, [sp, #8]
    1e92:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    1e94:	9501      	str	r5, [sp, #4]
    1e96:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    1e98:	9500      	str	r5, [sp, #0]
    1e9a:	f7fe fe19 	bl	ad0 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    1e9e:	4b03      	ldr	r3, [pc, #12]	; (1eac <z_setup_new_thread+0x2c>)
    1ea0:	689b      	ldr	r3, [r3, #8]
    1ea2:	b103      	cbz	r3, 1ea6 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    1ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1ea6:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    1ea8:	b007      	add	sp, #28
    1eaa:	bd30      	pop	{r4, r5, pc}
    1eac:	200001b0 	.word	0x200001b0

00001eb0 <z_thread_single_suspend>:
#include <syscalls/k_thread_create_mrsh.c>
#endif /* CONFIG_USERSPACE */
#endif /* CONFIG_MULTITHREADING */

void z_thread_single_suspend(struct k_thread *thread)
{
    1eb0:	b510      	push	{r4, lr}
    1eb2:	4604      	mov	r4, r0
	if (z_is_thread_ready(thread)) {
    1eb4:	f000 ff14 	bl	2ce0 <z_is_thread_ready>
    1eb8:	b110      	cbz	r0, 1ec0 <z_thread_single_suspend+0x10>
		z_remove_thread_from_ready_q(thread);
    1eba:	4620      	mov	r0, r4
    1ebc:	f7ff fee2 	bl	1c84 <z_remove_thread_from_ready_q>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    1ec0:	f104 0018 	add.w	r0, r4, #24
    1ec4:	f000 ff43 	bl	2d4e <z_abort_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    1ec8:	7b63      	ldrb	r3, [r4, #13]
    1eca:	f043 0310 	orr.w	r3, r3, #16
    1ece:	7363      	strb	r3, [r4, #13]

	(void)z_abort_thread_timeout(thread);

	z_mark_thread_as_suspended(thread);

	if (thread == _current) {
    1ed0:	4b08      	ldr	r3, [pc, #32]	; (1ef4 <z_thread_single_suspend+0x44>)
    1ed2:	689b      	ldr	r3, [r3, #8]
    1ed4:	42a3      	cmp	r3, r4
    1ed6:	d10b      	bne.n	1ef0 <z_thread_single_suspend+0x40>
	__asm__ volatile(
    1ed8:	f04f 0320 	mov.w	r3, #32
    1edc:	f3ef 8011 	mrs	r0, BASEPRI
    1ee0:	f383 8811 	msr	BASEPRI, r3
    1ee4:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
    1ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    1eec:	f000 beab 	b.w	2c46 <z_reschedule_irqlock>
    1ef0:	bd10      	pop	{r4, pc}
    1ef2:	bf00      	nop
    1ef4:	200001b0 	.word	0x200001b0

00001ef8 <z_impl_k_thread_suspend>:

void z_impl_k_thread_suspend(struct k_thread *thread)
{
    1ef8:	b538      	push	{r3, r4, r5, lr}
    1efa:	4605      	mov	r5, r0
    1efc:	f04f 0320 	mov.w	r3, #32
    1f00:	f3ef 8411 	mrs	r4, BASEPRI
    1f04:	f383 8811 	msr	BASEPRI, r3
    1f08:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
    1f0c:	f7ff ffd0 	bl	1eb0 <z_thread_single_suspend>

	sys_trace_thread_suspend(thread);

	if (thread == _current) {
    1f10:	4b07      	ldr	r3, [pc, #28]	; (1f30 <z_impl_k_thread_suspend+0x38>)
    1f12:	689b      	ldr	r3, [r3, #8]
    1f14:	42ab      	cmp	r3, r5
    1f16:	d105      	bne.n	1f24 <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
    1f18:	4621      	mov	r1, r4
    1f1a:	4806      	ldr	r0, [pc, #24]	; (1f34 <z_impl_k_thread_suspend+0x3c>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
    1f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
    1f20:	f000 be86 	b.w	2c30 <z_reschedule>
	__asm__ volatile(
    1f24:	f384 8811 	msr	BASEPRI, r4
    1f28:	f3bf 8f6f 	isb	sy
}
    1f2c:	bd38      	pop	{r3, r4, r5, pc}
    1f2e:	bf00      	nop
    1f30:	200001b0 	.word	0x200001b0
    1f34:	200001f2 	.word	0x200001f2

00001f38 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    1f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    1f3c:	4e28      	ldr	r6, [pc, #160]	; (1fe0 <z_init_static_threads+0xa8>)
    1f3e:	4d29      	ldr	r5, [pc, #164]	; (1fe4 <z_init_static_threads+0xac>)
{
    1f40:	b087      	sub	sp, #28
    1f42:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    1f44:	42b5      	cmp	r5, r6
    1f46:	f105 0430 	add.w	r4, r5, #48	; 0x30
    1f4a:	d310      	bcc.n	1f6e <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    1f4c:	f7ff fd88 	bl	1a60 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    1f50:	4c24      	ldr	r4, [pc, #144]	; (1fe4 <z_init_static_threads+0xac>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    1f52:	f8df a094 	ldr.w	sl, [pc, #148]	; 1fe8 <z_init_static_threads+0xb0>
			return (u32_t)((t * to_hz + off) / from_hz);
    1f56:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    1f5a:	f240 36e7 	movw	r6, #999	; 0x3e7
    1f5e:	2700      	movs	r7, #0
    1f60:	4544      	cmp	r4, r8
    1f62:	d321      	bcc.n	1fa8 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
    1f64:	b007      	add	sp, #28
    1f66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    1f6a:	f7ff bdc1 	b.w	1af0 <k_sched_unlock>
		z_setup_new_thread(
    1f6e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    1f72:	9305      	str	r3, [sp, #20]
    1f74:	f854 3c10 	ldr.w	r3, [r4, #-16]
    1f78:	9304      	str	r3, [sp, #16]
    1f7a:	f854 3c14 	ldr.w	r3, [r4, #-20]
    1f7e:	9303      	str	r3, [sp, #12]
    1f80:	f854 3c18 	ldr.w	r3, [r4, #-24]
    1f84:	9302      	str	r3, [sp, #8]
    1f86:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    1f8a:	9301      	str	r3, [sp, #4]
    1f8c:	f854 3c20 	ldr.w	r3, [r4, #-32]
    1f90:	9300      	str	r3, [sp, #0]
    1f92:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    1f96:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    1f9a:	f7ff ff71 	bl	1e80 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    1f9e:	f854 3c30 	ldr.w	r3, [r4, #-48]
    1fa2:	64dd      	str	r5, [r3, #76]	; 0x4c
    1fa4:	4625      	mov	r5, r4
    1fa6:	e7cd      	b.n	1f44 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
    1fa8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1faa:	1c4b      	adds	r3, r1, #1
    1fac:	d004      	beq.n	1fb8 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
    1fae:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
    1fb0:	b921      	cbnz	r1, 1fbc <z_init_static_threads+0x84>
	z_impl_k_thread_start(thread);
    1fb2:	4628      	mov	r0, r5
    1fb4:	f7ff ff40 	bl	1e38 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    1fb8:	3430      	adds	r4, #48	; 0x30
    1fba:	e7d1      	b.n	1f60 <z_init_static_threads+0x28>
    1fbc:	46b3      	mov	fp, r6
    1fbe:	46bc      	mov	ip, r7
    1fc0:	fbe9 bc01 	umlal	fp, ip, r9, r1
    1fc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1fc8:	2300      	movs	r3, #0
    1fca:	4658      	mov	r0, fp
    1fcc:	4661      	mov	r1, ip
    1fce:	f7fe f885 	bl	dc <__aeabi_uldivmod>
    1fd2:	4651      	mov	r1, sl
    1fd4:	1c42      	adds	r2, r0, #1
    1fd6:	f105 0018 	add.w	r0, r5, #24
    1fda:	f000 f841 	bl	2060 <z_add_timeout>
    1fde:	e7eb      	b.n	1fb8 <z_init_static_threads+0x80>
    1fe0:	20000fc4 	.word	0x20000fc4
    1fe4:	20000fc4 	.word	0x20000fc4
    1fe8:	00002c7f 	.word	0x00002c7f

00001fec <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    1fec:	4b03      	ldr	r3, [pc, #12]	; (1ffc <elapsed+0x10>)
    1fee:	681b      	ldr	r3, [r3, #0]
    1ff0:	b90b      	cbnz	r3, 1ff6 <elapsed+0xa>
    1ff2:	f7fe bcc9 	b.w	988 <z_clock_elapsed>
}
    1ff6:	2000      	movs	r0, #0
    1ff8:	4770      	bx	lr
    1ffa:	bf00      	nop
    1ffc:	200001ec 	.word	0x200001ec

00002000 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2000:	6803      	ldr	r3, [r0, #0]
    2002:	b140      	cbz	r0, 2016 <remove_timeout+0x16>
    2004:	4a07      	ldr	r2, [pc, #28]	; (2024 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    2006:	6852      	ldr	r2, [r2, #4]
    2008:	4290      	cmp	r0, r2
    200a:	d004      	beq.n	2016 <remove_timeout+0x16>
	if (next(t) != NULL) {
    200c:	b11b      	cbz	r3, 2016 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    200e:	689a      	ldr	r2, [r3, #8]
    2010:	6881      	ldr	r1, [r0, #8]
    2012:	440a      	add	r2, r1
    2014:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    2016:	6842      	ldr	r2, [r0, #4]
    2018:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    201a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    201c:	2300      	movs	r3, #0
	node->prev = NULL;
    201e:	e9c0 3300 	strd	r3, r3, [r0]
}
    2022:	4770      	bx	lr
    2024:	20000f4c 	.word	0x20000f4c

00002028 <next_timeout>:
	return list->head == list;
    2028:	4b0b      	ldr	r3, [pc, #44]	; (2058 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    202a:	b510      	push	{r4, lr}
    202c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    202e:	429c      	cmp	r4, r3
    2030:	bf08      	it	eq
    2032:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    2034:	f7ff ffda 	bl	1fec <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2038:	b154      	cbz	r4, 2050 <next_timeout+0x28>
    203a:	68a3      	ldr	r3, [r4, #8]
    203c:	1a18      	subs	r0, r3, r0
    203e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    2042:	4b06      	ldr	r3, [pc, #24]	; (205c <next_timeout+0x34>)
    2044:	691b      	ldr	r3, [r3, #16]
    2046:	b113      	cbz	r3, 204e <next_timeout+0x26>
    2048:	4298      	cmp	r0, r3
    204a:	bfa8      	it	ge
    204c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    204e:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2050:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2054:	e7f5      	b.n	2042 <next_timeout+0x1a>
    2056:	bf00      	nop
    2058:	20000f4c 	.word	0x20000f4c
    205c:	200001b0 	.word	0x200001b0

00002060 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    2060:	b570      	push	{r4, r5, r6, lr}
    2062:	4604      	mov	r4, r0
    2064:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    2066:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
    2068:	f04f 0320 	mov.w	r3, #32
    206c:	f3ef 8511 	mrs	r5, BASEPRI
    2070:	f383 8811 	msr	BASEPRI, r3
    2074:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    2078:	f7ff ffb8 	bl	1fec <elapsed>
	return list->head == list;
    207c:	4b18      	ldr	r3, [pc, #96]	; (20e0 <z_add_timeout+0x80>)
    207e:	681a      	ldr	r2, [r3, #0]
    2080:	2e01      	cmp	r6, #1
    2082:	bfac      	ite	ge
    2084:	1980      	addge	r0, r0, r6
    2086:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2088:	429a      	cmp	r2, r3
    208a:	60a0      	str	r0, [r4, #8]
    208c:	d001      	beq.n	2092 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    208e:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    2090:	b932      	cbnz	r2, 20a0 <z_add_timeout+0x40>
	node->prev = list->tail;
    2092:	685a      	ldr	r2, [r3, #4]
    2094:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    2096:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    2098:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
    209a:	6014      	str	r4, [r2, #0]
	list->tail = node;
    209c:	605c      	str	r4, [r3, #4]
    209e:	e00a      	b.n	20b6 <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    20a0:	6890      	ldr	r0, [r2, #8]
    20a2:	68a1      	ldr	r1, [r4, #8]
    20a4:	4288      	cmp	r0, r1
    20a6:	dd15      	ble.n	20d4 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
    20a8:	1a41      	subs	r1, r0, r1
    20aa:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    20ac:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    20ae:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
    20b2:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    20b4:	6054      	str	r4, [r2, #4]
	return list->head == list;
    20b6:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    20b8:	429a      	cmp	r2, r3
    20ba:	d006      	beq.n	20ca <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    20bc:	4294      	cmp	r4, r2
    20be:	d104      	bne.n	20ca <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
    20c0:	f7ff ffb2 	bl	2028 <next_timeout>
    20c4:	2100      	movs	r1, #0
    20c6:	f7fe fc09 	bl	8dc <z_clock_set_timeout>
	__asm__ volatile(
    20ca:	f385 8811 	msr	BASEPRI, r5
    20ce:	f3bf 8f6f 	isb	sy
		}
	}
}
    20d2:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    20d4:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    20d6:	42b2      	cmp	r2, r6
    20d8:	60a1      	str	r1, [r4, #8]
    20da:	d0da      	beq.n	2092 <z_add_timeout+0x32>
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	e7d7      	b.n	2090 <z_add_timeout+0x30>
    20e0:	20000f4c 	.word	0x20000f4c

000020e4 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    20e4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    20e8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    20ea:	f7ff fd95 	bl	1c18 <z_time_slice>
	__asm__ volatile(
    20ee:	f04f 0320 	mov.w	r3, #32
    20f2:	f3ef 8511 	mrs	r5, BASEPRI
    20f6:	f383 8811 	msr	BASEPRI, r3
    20fa:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    20fe:	4e21      	ldr	r6, [pc, #132]	; (2184 <z_clock_announce+0xa0>)
    2100:	4f21      	ldr	r7, [pc, #132]	; (2188 <z_clock_announce+0xa4>)
	return list->head == list;
    2102:	f8df 9088 	ldr.w	r9, [pc, #136]	; 218c <z_clock_announce+0xa8>
    2106:	6034      	str	r4, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    2108:	46b8      	mov	r8, r7
    210a:	f8d9 4000 	ldr.w	r4, [r9]
    210e:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2110:	454c      	cmp	r4, r9
    2112:	e9d7 bc00 	ldrd	fp, ip, [r7]
    2116:	d005      	beq.n	2124 <z_clock_announce+0x40>
    2118:	b124      	cbz	r4, 2124 <z_clock_announce+0x40>
    211a:	68a3      	ldr	r3, [r4, #8]
    211c:	4293      	cmp	r3, r2
    211e:	dd14      	ble.n	214a <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    2120:	1a9b      	subs	r3, r3, r2
    2122:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
    2124:	eb1b 0002 	adds.w	r0, fp, r2
    2128:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
    212c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    212e:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
    2132:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    2134:	f7ff ff78 	bl	2028 <next_timeout>
    2138:	4621      	mov	r1, r4
    213a:	f7fe fbcf 	bl	8dc <z_clock_set_timeout>
	__asm__ volatile(
    213e:	f385 8811 	msr	BASEPRI, r5
    2142:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    2146:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
    214a:	eb1b 0003 	adds.w	r0, fp, r3
    214e:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
    2152:	1ad3      	subs	r3, r2, r3
    2154:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    2156:	2300      	movs	r3, #0
		curr_tick += dt;
    2158:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
    215c:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    215e:	4620      	mov	r0, r4
    2160:	f7ff ff4e 	bl	2000 <remove_timeout>
    2164:	f385 8811 	msr	BASEPRI, r5
    2168:	f3bf 8f6f 	isb	sy
		t->fn(t);
    216c:	68e3      	ldr	r3, [r4, #12]
    216e:	4798      	blx	r3
	__asm__ volatile(
    2170:	f04f 0320 	mov.w	r3, #32
    2174:	f3ef 8511 	mrs	r5, BASEPRI
    2178:	f383 8811 	msr	BASEPRI, r3
    217c:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    2180:	e7c3      	b.n	210a <z_clock_announce+0x26>
    2182:	bf00      	nop
    2184:	200001ec 	.word	0x200001ec
    2188:	20000000 	.word	0x20000000
    218c:	20000f4c 	.word	0x20000f4c

00002190 <z_tick_get>:

s64_t z_tick_get(void)
{
    2190:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
    2194:	f04f 0320 	mov.w	r3, #32
    2198:	f3ef 8411 	mrs	r4, BASEPRI
    219c:	f383 8811 	msr	BASEPRI, r3
    21a0:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    21a4:	f7fe fbf0 	bl	988 <z_clock_elapsed>
    21a8:	4b07      	ldr	r3, [pc, #28]	; (21c8 <z_tick_get+0x38>)
    21aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    21ae:	eb12 0b00 	adds.w	fp, r2, r0
    21b2:	f143 0c00 	adc.w	ip, r3, #0
    21b6:	4658      	mov	r0, fp
    21b8:	4661      	mov	r1, ip
	__asm__ volatile(
    21ba:	f384 8811 	msr	BASEPRI, r4
    21be:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    21c2:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
    21c6:	bf00      	nop
    21c8:	20000000 	.word	0x20000000

000021cc <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    21cc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    21ce:	4c07      	ldr	r4, [pc, #28]	; (21ec <init_static_pools+0x20>)
    21d0:	4d07      	ldr	r5, [pc, #28]	; (21f0 <init_static_pools+0x24>)
    21d2:	42ac      	cmp	r4, r5
    21d4:	d301      	bcc.n	21da <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    21d6:	2000      	movs	r0, #0
    21d8:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    21da:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
    21de:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
    21e0:	e9c4 3305 	strd	r3, r3, [r4, #20]
    21e4:	f000 f890 	bl	2308 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    21e8:	341c      	adds	r4, #28
    21ea:	e7f2      	b.n	21d2 <init_static_pools+0x6>
    21ec:	20000fc4 	.word	0x20000fc4
    21f0:	20000fc4 	.word	0x20000fc4

000021f4 <k_sleep.constprop.0>:
	return z_impl_k_sleep(ms);
    21f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
    21f8:	f7ff bdf0 	b.w	1ddc <z_impl_k_sleep>

000021fc <gpio_write.constprop.0>:
	return z_impl_gpio_config(port, access_op, pin, flags);
}


extern int z_impl_gpio_write(struct device * port, int access_op, u32_t pin, u32_t value);
static inline int gpio_write(struct device * port, int access_op, u32_t pin, u32_t value)
    21fc:	b410      	push	{r4}
    21fe:	4613      	mov	r3, r2
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
    2200:	6842      	ldr	r2, [r0, #4]
    2202:	6854      	ldr	r4, [r2, #4]
    2204:	460a      	mov	r2, r1
    2206:	46a4      	mov	ip, r4
    2208:	2100      	movs	r1, #0
		return (int) arch_syscall_invoke4(*(uintptr_t *)&port, *(uintptr_t *)&access_op, *(uintptr_t *)&pin, *(uintptr_t *)&value, K_SYSCALL_GPIO_WRITE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_write(port, access_op, pin, value);
}
    220a:	bc10      	pop	{r4}
    220c:	4760      	bx	ip

0000220e <led_init>:
#include "es_led.h"

#include <gpio.h>

int led_init(es_led_t *led, char *dev_name, u32_t pin)
{
    220e:	b538      	push	{r3, r4, r5, lr}
    2210:	4604      	mov	r4, r0
    2212:	4615      	mov	r5, r2
    2214:	4608      	mov	r0, r1
    2216:	f7ff fad9 	bl	17cc <z_impl_device_get_binding>
    led->dev   = device_get_binding(dev_name);
    led->pin   = pin;
    led->value = 1;
    221a:	2301      	movs	r3, #1
    led->pin   = pin;
    221c:	e9c4 0500 	strd	r0, r5, [r4]
    led->value = 1;
    2220:	7223      	strb	r3, [r4, #8]
	return api->config(port, access_op, pin, flags);
    2222:	6842      	ldr	r2, [r0, #4]
    2224:	2100      	movs	r1, #0
    2226:	6814      	ldr	r4, [r2, #0]
    2228:	462a      	mov	r2, r5
    222a:	47a0      	blx	r4

    gpio_pin_configure(led->dev, pin, GPIO_DIR_OUT);
    return 0;
}
    222c:	2000      	movs	r0, #0
    222e:	bd38      	pop	{r3, r4, r5, pc}

00002230 <set_all_led>:
    led->value = value;
    gpio_write(led->dev, 0, led->pin, led->value);
}

void set_all_led(es_led_t *led0, es_led_t *led1, es_led_t *led2, es_led_t *led3, u8_t value)
{
    2230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2232:	f89d 4018 	ldrb.w	r4, [sp, #24]
    led0->value = value;
    2236:	7204      	strb	r4, [r0, #8]
{
    2238:	460f      	mov	r7, r1
    223a:	4616      	mov	r6, r2
    gpio_write(led0->dev, 0, led0->pin, led0->value);
    223c:	e9d0 0100 	ldrd	r0, r1, [r0]
    2240:	4622      	mov	r2, r4
{
    2242:	461d      	mov	r5, r3
    gpio_write(led0->dev, 0, led0->pin, led0->value);
    2244:	f7ff ffda 	bl	21fc <gpio_write.constprop.0>

    led1->value = value;
    gpio_write(led1->dev, 0, led1->pin, led1->value);
    2248:	4622      	mov	r2, r4
    224a:	e9d7 0100 	ldrd	r0, r1, [r7]
    led1->value = value;
    224e:	723c      	strb	r4, [r7, #8]
    gpio_write(led1->dev, 0, led1->pin, led1->value);
    2250:	f7ff ffd4 	bl	21fc <gpio_write.constprop.0>

    led2->value = value;
    gpio_write(led2->dev, 0, led2->pin, led2->value);
    2254:	4622      	mov	r2, r4
    2256:	e9d6 0100 	ldrd	r0, r1, [r6]
    led2->value = value;
    225a:	7234      	strb	r4, [r6, #8]
    gpio_write(led2->dev, 0, led2->pin, led2->value);
    225c:	f7ff ffce 	bl	21fc <gpio_write.constprop.0>

    led3->value = value;
    2260:	722c      	strb	r4, [r5, #8]
    gpio_write(led3->dev, 0, led3->pin, led3->value);
    2262:	4622      	mov	r2, r4
    2264:	e9d5 0100 	ldrd	r0, r1, [r5]
}
    2268:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    gpio_write(led3->dev, 0, led3->pin, led3->value);
    226c:	f7ff bfc6 	b.w	21fc <gpio_write.constprop.0>

00002270 <turn_leds>:

void turn_leds(es_led_t *led0, es_led_t *led1, es_led_t *led2, es_led_t *led3,
                u8_t value0, u8_t value1, u8_t value2, u8_t value3)
{
    2270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2274:	460e      	mov	r6, r1
    2276:	4615      	mov	r5, r2
    2278:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
    227c:	f89d 2020 	ldrb.w	r2, [sp, #32]
    2280:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    led0->value = value0;
    2284:	7202      	strb	r2, [r0, #8]
    gpio_write(led0->dev, 0, led0->pin, led0->value);
    2286:	e9d0 0100 	ldrd	r0, r1, [r0]
{
    228a:	461c      	mov	r4, r3
    228c:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
    gpio_write(led0->dev, 0, led0->pin, led0->value);
    2290:	f7ff ffb4 	bl	21fc <gpio_write.constprop.0>

    led1->value = value1;
    gpio_write(led1->dev, 0, led1->pin, led1->value);
    2294:	464a      	mov	r2, r9
    2296:	e9d6 0100 	ldrd	r0, r1, [r6]
    led1->value = value1;
    229a:	f886 9008 	strb.w	r9, [r6, #8]
    gpio_write(led1->dev, 0, led1->pin, led1->value);
    229e:	f7ff ffad 	bl	21fc <gpio_write.constprop.0>

    led2->value = value2;
    gpio_write(led2->dev, 0, led2->pin, led2->value);
    22a2:	4642      	mov	r2, r8
    22a4:	e9d5 0100 	ldrd	r0, r1, [r5]
    led2->value = value2;
    22a8:	f885 8008 	strb.w	r8, [r5, #8]
    gpio_write(led2->dev, 0, led2->pin, led2->value);
    22ac:	f7ff ffa6 	bl	21fc <gpio_write.constprop.0>

    led3->value = value3;
    22b0:	7227      	strb	r7, [r4, #8]
    gpio_write(led3->dev, 0, led3->pin, led3->value);
    22b2:	463a      	mov	r2, r7
    22b4:	e9d4 0100 	ldrd	r0, r1, [r4]
}
    22b8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    gpio_write(led3->dev, 0, led3->pin, led3->value);
    22bc:	f7ff bf9e 	b.w	21fc <gpio_write.constprop.0>

000022c0 <button_create>:
#include "es_button.h"

int button_create(es_button_t* button, const char* dev_name, u32_t pin,
                     gpio_callback_handler_t callback)
{
    22c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22c2:	4604      	mov	r4, r0
    22c4:	4615      	mov	r5, r2
    22c6:	461e      	mov	r6, r3
    22c8:	4608      	mov	r0, r1
    22ca:	f7ff fa7f 	bl	17cc <z_impl_device_get_binding>
    button->dev = device_get_binding(dev_name);
    button->pin = pin;
    22ce:	6125      	str	r5, [r4, #16]
    button->dev = device_get_binding(dev_name);
    22d0:	6020      	str	r0, [r4, #0]
    22d2:	6843      	ldr	r3, [r0, #4]
    22d4:	462a      	mov	r2, r5
    22d6:	681f      	ldr	r7, [r3, #0]
    22d8:	2100      	movs	r1, #0
    22da:	f44f 739b 	mov.w	r3, #310	; 0x136
    22de:	47b8      	blx	r7
    gpio_pin_configure(button->dev, pin,
                       GPIO_DIR_IN | GPIO_PUD_PULL_UP | GPIO_INT | GPIO_INT_DEBOUNCE
                           | GPIO_INT_EDGE | GPIO_INT_ACTIVE_HIGH);
    gpio_init_callback(&button->gpio_cb, callback, BIT(pin));
    22e0:	2201      	movs	r2, #1
    gpio_add_callback(button->dev, &button->gpio_cb);
    22e2:	6820      	ldr	r0, [r4, #0]
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    22e4:	60a6      	str	r6, [r4, #8]
    gpio_init_callback(&button->gpio_cb, callback, BIT(pin));
    22e6:	fa02 f305 	lsl.w	r3, r2, r5
	callback->pin_mask = pin_mask;
    22ea:	60e3      	str	r3, [r4, #12]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
    22ec:	6843      	ldr	r3, [r0, #4]
    22ee:	68db      	ldr	r3, [r3, #12]
    22f0:	1d21      	adds	r1, r4, #4
    22f2:	b103      	cbz	r3, 22f6 <button_create+0x36>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    22f4:	4798      	blx	r3
    gpio_pin_enable_callback(button->dev, pin);
    22f6:	6820      	ldr	r0, [r4, #0]
	if (api->enable_callback == NULL) {
    22f8:	6843      	ldr	r3, [r0, #4]
    22fa:	691b      	ldr	r3, [r3, #16]
    22fc:	b113      	cbz	r3, 2304 <button_create+0x44>
	return api->enable_callback(port, access_op, pin);
    22fe:	462a      	mov	r2, r5
    2300:	2100      	movs	r1, #0
    2302:	4798      	blx	r3
    return 0;
}
    2304:	2000      	movs	r0, #0
    2306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002308 <z_sys_mem_pool_base_init>:

	return (*word >> (4*(bit / 4))) & 0xf;
}

void z_sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
    2308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    230c:	6846      	ldr	r6, [r0, #4]
    230e:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    2310:	6801      	ldr	r1, [r0, #0]

	p->max_inline_level = -1;

	for (i = 0; i < p->n_levels; i++) {
    2312:	f890 800a 	ldrb.w	r8, [r0, #10]
	p->max_inline_level = -1;
    2316:	23ff      	movs	r3, #255	; 0xff
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    2318:	fb06 fc07 	mul.w	ip, r6, r7
	p->max_inline_level = -1;
    231c:	72c3      	strb	r3, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    231e:	4461      	add	r1, ip
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    2320:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
    2322:	2300      	movs	r3, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
    2324:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < p->n_levels; i++) {
    2328:	4598      	cmp	r8, r3
    232a:	dc05      	bgt.n	2338 <z_sys_mem_pool_base_init+0x30>
    232c:	2300      	movs	r3, #0
		}

		sz = WB_DN(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
    232e:	4619      	mov	r1, r3
    2330:	428f      	cmp	r7, r1
    2332:	dc20      	bgt.n	2376 <z_sys_mem_pool_base_init+0x6e>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
	}
}
    2334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sys_dlist_init(&p->levels[i].free_list);
    2338:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		int nblocks = buflen / sz;
    233c:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
    2340:	fb09 fe03 	mul.w	lr, r9, r3
    2344:	eb0a 040e 	add.w	r4, sl, lr
    2348:	f104 0b04 	add.w	fp, r4, #4
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    234c:	2d20      	cmp	r5, #32
    234e:	e9c4 bb01 	strd	fp, fp, [r4, #4]
    2352:	d805      	bhi.n	2360 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
    2354:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
    2356:	0892      	lsrs	r2, r2, #2
    2358:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
    235c:	3301      	adds	r3, #1
    235e:	e7e3      	b.n	2328 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
    2360:	f115 041f 	adds.w	r4, r5, #31
    2364:	bf48      	it	mi
    2366:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
    236a:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
    236c:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
    2370:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    2374:	e7ef      	b.n	2356 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
    2376:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
    2378:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
    237a:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
    237e:	18ec      	adds	r4, r5, r3
	node->next = list;
    2380:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
    2384:	6895      	ldr	r5, [r2, #8]
    2386:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
    2388:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
    238a:	3101      	adds	r1, #1
    238c:	602c      	str	r4, [r5, #0]
	list->tail = node;
    238e:	4433      	add	r3, r6
    2390:	6094      	str	r4, [r2, #8]
    2392:	e7cd      	b.n	2330 <z_sys_mem_pool_base_init+0x28>

00002394 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    2394:	4604      	mov	r4, r0
    2396:	b508      	push	{r3, lr}
    2398:	4608      	mov	r0, r1
    239a:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    239c:	461a      	mov	r2, r3
    239e:	47a0      	blx	r4
	return z_impl_k_current_get();
    23a0:	f7ff fd44 	bl	1e2c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    23a4:	f7fe fd10 	bl	dc8 <z_impl_k_thread_abort>

000023a8 <arch_printk_char_out>:
}
    23a8:	2000      	movs	r0, #0
    23aa:	4770      	bx	lr

000023ac <print_err>:
{
    23ac:	b570      	push	{r4, r5, r6, lr}
    23ae:	4604      	mov	r4, r0
    23b0:	460d      	mov	r5, r1
	out('E', ctx);
    23b2:	2045      	movs	r0, #69	; 0x45
    23b4:	47a0      	blx	r4
	out('R', ctx);
    23b6:	4629      	mov	r1, r5
    23b8:	2052      	movs	r0, #82	; 0x52
    23ba:	47a0      	blx	r4
	out('R', ctx);
    23bc:	4629      	mov	r1, r5
    23be:	4623      	mov	r3, r4
    23c0:	2052      	movs	r0, #82	; 0x52
}
    23c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    23c6:	4718      	bx	r3

000023c8 <z_vprintk>:
{
    23c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23cc:	b08b      	sub	sp, #44	; 0x2c
    23ce:	461c      	mov	r4, r3
	char length_mod = 0;
    23d0:	f04f 0800 	mov.w	r8, #0
    23d4:	1e53      	subs	r3, r2, #1
{
    23d6:	4606      	mov	r6, r0
    23d8:	460f      	mov	r7, r1
    23da:	9302      	str	r3, [sp, #8]
	int min_width = -1;
    23dc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    23e0:	46c1      	mov	r9, r8
			might_format = 0;
    23e2:	2500      	movs	r5, #0
					break;
    23e4:	e005      	b.n	23f2 <z_vprintk+0x2a>
		if (!might_format) {
    23e6:	b96d      	cbnz	r5, 2404 <z_vprintk+0x3c>
			if (*fmt != '%') {
    23e8:	2825      	cmp	r0, #37	; 0x25
    23ea:	f000 814f 	beq.w	268c <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
    23ee:	4639      	mov	r1, r7
    23f0:	47b0      	blx	r6
	while (*fmt) {
    23f2:	9b02      	ldr	r3, [sp, #8]
    23f4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    23f8:	9302      	str	r3, [sp, #8]
    23fa:	2800      	cmp	r0, #0
    23fc:	d1f3      	bne.n	23e6 <z_vprintk+0x1e>
}
    23fe:	b00b      	add	sp, #44	; 0x2c
    2400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    2404:	2864      	cmp	r0, #100	; 0x64
    2406:	d06e      	beq.n	24e6 <z_vprintk+0x11e>
    2408:	d81a      	bhi.n	2440 <z_vprintk+0x78>
    240a:	2839      	cmp	r0, #57	; 0x39
    240c:	d80a      	bhi.n	2424 <z_vprintk+0x5c>
    240e:	2831      	cmp	r0, #49	; 0x31
    2410:	d260      	bcs.n	24d4 <z_vprintk+0x10c>
    2412:	282d      	cmp	r0, #45	; 0x2d
    2414:	f000 8140 	beq.w	2698 <z_vprintk+0x2d0>
    2418:	2830      	cmp	r0, #48	; 0x30
    241a:	d04c      	beq.n	24b6 <z_vprintk+0xee>
    241c:	2825      	cmp	r0, #37	; 0x25
    241e:	d107      	bne.n	2430 <z_vprintk+0x68>
				out((int)'%', ctx);
    2420:	4639      	mov	r1, r7
    2422:	e00b      	b.n	243c <z_vprintk+0x74>
			switch (*fmt) {
    2424:	2858      	cmp	r0, #88	; 0x58
    2426:	f000 80bb 	beq.w	25a0 <z_vprintk+0x1d8>
    242a:	2863      	cmp	r0, #99	; 0x63
    242c:	f000 812a 	beq.w	2684 <z_vprintk+0x2bc>
					out((int)'%', ctx);
    2430:	4639      	mov	r1, r7
    2432:	2025      	movs	r0, #37	; 0x25
    2434:	47b0      	blx	r6
					out((int)*fmt, ctx);
    2436:	9b02      	ldr	r3, [sp, #8]
    2438:	7818      	ldrb	r0, [r3, #0]
    243a:	4639      	mov	r1, r7
    243c:	47b0      	blx	r6
    243e:	e7d0      	b.n	23e2 <z_vprintk+0x1a>
			switch (*fmt) {
    2440:	2870      	cmp	r0, #112	; 0x70
    2442:	f000 80a3 	beq.w	258c <z_vprintk+0x1c4>
    2446:	d811      	bhi.n	246c <z_vprintk+0xa4>
    2448:	2869      	cmp	r0, #105	; 0x69
    244a:	d04c      	beq.n	24e6 <z_vprintk+0x11e>
    244c:	286c      	cmp	r0, #108	; 0x6c
    244e:	d105      	bne.n	245c <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
    2450:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    2454:	d12a      	bne.n	24ac <z_vprintk+0xe4>
					length_mod = 'L';
    2456:	f04f 084c 	mov.w	r8, #76	; 0x4c
    245a:	e7ca      	b.n	23f2 <z_vprintk+0x2a>
			switch (*fmt) {
    245c:	2868      	cmp	r0, #104	; 0x68
    245e:	d1e7      	bne.n	2430 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
    2460:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
    2464:	d122      	bne.n	24ac <z_vprintk+0xe4>
					length_mod = 'H';
    2466:	f04f 0848 	mov.w	r8, #72	; 0x48
    246a:	e7c2      	b.n	23f2 <z_vprintk+0x2a>
			switch (*fmt) {
    246c:	2875      	cmp	r0, #117	; 0x75
    246e:	d071      	beq.n	2554 <z_vprintk+0x18c>
    2470:	d818      	bhi.n	24a4 <z_vprintk+0xdc>
    2472:	2873      	cmp	r0, #115	; 0x73
    2474:	d1dc      	bne.n	2430 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
    2476:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
    247a:	46ab      	mov	fp, r5
    247c:	465b      	mov	r3, fp
    247e:	f81b 0b01 	ldrb.w	r0, [fp], #1
    2482:	2800      	cmp	r0, #0
    2484:	f040 80fb 	bne.w	267e <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
    2488:	f1b9 0f03 	cmp.w	r9, #3
    248c:	f040 810a 	bne.w	26a4 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
    2490:	1b5d      	subs	r5, r3, r5
    2492:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
    2496:	2d00      	cmp	r5, #0
    2498:	dda3      	ble.n	23e2 <z_vprintk+0x1a>
						out(' ', ctx);
    249a:	4639      	mov	r1, r7
    249c:	2020      	movs	r0, #32
    249e:	47b0      	blx	r6
    24a0:	3d01      	subs	r5, #1
    24a2:	e7f8      	b.n	2496 <z_vprintk+0xce>
			switch (*fmt) {
    24a4:	2878      	cmp	r0, #120	; 0x78
    24a6:	d07b      	beq.n	25a0 <z_vprintk+0x1d8>
    24a8:	287a      	cmp	r0, #122	; 0x7a
    24aa:	d1c1      	bne.n	2430 <z_vprintk+0x68>
				} else if (length_mod == 0) {
    24ac:	f1b8 0f00 	cmp.w	r8, #0
    24b0:	d1be      	bne.n	2430 <z_vprintk+0x68>
    24b2:	4680      	mov	r8, r0
    24b4:	e79d      	b.n	23f2 <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
    24b6:	f1ba 0f00 	cmp.w	sl, #0
    24ba:	da0e      	bge.n	24da <z_vprintk+0x112>
    24bc:	f1b9 0f00 	cmp.w	r9, #0
    24c0:	f000 80ed 	beq.w	269e <z_vprintk+0x2d6>
					min_width = *fmt - '0';
    24c4:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    24c8:	f1b9 0f00 	cmp.w	r9, #0
    24cc:	bf08      	it	eq
    24ce:	f04f 0902 	moveq.w	r9, #2
    24d2:	e78e      	b.n	23f2 <z_vprintk+0x2a>
				if (min_width < 0) {
    24d4:	f1ba 0f00 	cmp.w	sl, #0
    24d8:	dbf4      	blt.n	24c4 <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
    24da:	230a      	movs	r3, #10
    24dc:	fb03 0a0a 	mla	sl, r3, sl, r0
    24e0:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    24e4:	e7f0      	b.n	24c8 <z_vprintk+0x100>
				if (length_mod == 'z') {
    24e6:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    24ea:	d102      	bne.n	24f2 <z_vprintk+0x12a>
					d = va_arg(ap, int);
    24ec:	f854 5b04 	ldr.w	r5, [r4], #4
    24f0:	e01f      	b.n	2532 <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
    24f2:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    24f6:	d0f9      	beq.n	24ec <z_vprintk+0x124>
				} else if (length_mod == 'L') {
    24f8:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    24fc:	d1f6      	bne.n	24ec <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
    24fe:	3407      	adds	r4, #7
    2500:	f024 0407 	bic.w	r4, r4, #7
    2504:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
    2508:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
    250c:	9106      	str	r1, [sp, #24]
    250e:	f143 0100 	adc.w	r1, r3, #0
    2512:	9107      	str	r1, [sp, #28]
    2514:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    2518:	2100      	movs	r1, #0
    251a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    251e:	4561      	cmp	r1, ip
    2520:	bf08      	it	eq
    2522:	4558      	cmpeq	r0, fp
    2524:	d204      	bcs.n	2530 <z_vprintk+0x168>
						print_err(out, ctx);
    2526:	4639      	mov	r1, r7
    2528:	4630      	mov	r0, r6
    252a:	f7ff ff3f 	bl	23ac <print_err>
						break;
    252e:	e758      	b.n	23e2 <z_vprintk+0x1a>
					d = lld;
    2530:	4615      	mov	r5, r2
				if (d < 0) {
    2532:	2d00      	cmp	r5, #0
    2534:	da05      	bge.n	2542 <z_vprintk+0x17a>
					out((int)'-', ctx);
    2536:	4639      	mov	r1, r7
    2538:	202d      	movs	r0, #45	; 0x2d
    253a:	47b0      	blx	r6
					d = -d;
    253c:	426d      	negs	r5, r5
					min_width--;
    253e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    2542:	f8cd a000 	str.w	sl, [sp]
    2546:	464b      	mov	r3, r9
    2548:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
    254a:	4639      	mov	r1, r7
    254c:	4630      	mov	r0, r6
    254e:	f7fe f8a1 	bl	694 <_printk_dec_ulong>
				break;
    2552:	e746      	b.n	23e2 <z_vprintk+0x1a>
				if (length_mod == 'z') {
    2554:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    2558:	d102      	bne.n	2560 <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
    255a:	f854 2b04 	ldr.w	r2, [r4], #4
    255e:	e011      	b.n	2584 <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
    2560:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    2564:	d0f9      	beq.n	255a <z_vprintk+0x192>
				} else if (length_mod == 'L') {
    2566:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    256a:	d1f6      	bne.n	255a <z_vprintk+0x192>
					unsigned long long llu =
    256c:	3407      	adds	r4, #7
    256e:	f024 0407 	bic.w	r4, r4, #7
    2572:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    2576:	2100      	movs	r1, #0
    2578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    257c:	4299      	cmp	r1, r3
    257e:	bf08      	it	eq
    2580:	4290      	cmpeq	r0, r2
    2582:	d3d0      	bcc.n	2526 <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
    2584:	f8cd a000 	str.w	sl, [sp]
    2588:	464b      	mov	r3, r9
    258a:	e7de      	b.n	254a <z_vprintk+0x182>
				out('0', ctx);
    258c:	4639      	mov	r1, r7
    258e:	2030      	movs	r0, #48	; 0x30
    2590:	47b0      	blx	r6
				out('x', ctx);
    2592:	4639      	mov	r1, r7
    2594:	2078      	movs	r0, #120	; 0x78
    2596:	47b0      	blx	r6
					min_width = 8;
    2598:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
    259c:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
    25a0:	9b02      	ldr	r3, [sp, #8]
    25a2:	781b      	ldrb	r3, [r3, #0]
    25a4:	2b70      	cmp	r3, #112	; 0x70
    25a6:	d104      	bne.n	25b2 <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
    25a8:	f854 3b04 	ldr.w	r3, [r4], #4
    25ac:	9304      	str	r3, [sp, #16]
    25ae:	2300      	movs	r3, #0
    25b0:	e00d      	b.n	25ce <z_vprintk+0x206>
				} else if (length_mod == 'l') {
    25b2:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    25b6:	d0f7      	beq.n	25a8 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
    25b8:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    25bc:	d1f4      	bne.n	25a8 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
    25be:	3407      	adds	r4, #7
    25c0:	f024 0307 	bic.w	r3, r4, #7
    25c4:	461c      	mov	r4, r3
    25c6:	685b      	ldr	r3, [r3, #4]
    25c8:	f854 2b08 	ldr.w	r2, [r4], #8
    25cc:	9204      	str	r2, [sp, #16]
	int digits = 0;
    25ce:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    25d0:	2210      	movs	r2, #16
	int digits = 0;
    25d2:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
    25d4:	9105      	str	r1, [sp, #20]
	int shift = sizeof(num) * 8;
    25d6:	f04f 0b40 	mov.w	fp, #64	; 0x40
		shift -= 4;
    25da:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
    25de:	9804      	ldr	r0, [sp, #16]
    25e0:	f1cb 0c20 	rsb	ip, fp, #32
    25e4:	f1ab 0120 	sub.w	r1, fp, #32
    25e8:	fa20 f00b 	lsr.w	r0, r0, fp
    25ec:	fa03 fc0c 	lsl.w	ip, r3, ip
    25f0:	ea40 000c 	orr.w	r0, r0, ip
    25f4:	fa23 f101 	lsr.w	r1, r3, r1
    25f8:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    25fa:	f010 000f 	ands.w	r0, r0, #15
    25fe:	d108      	bne.n	2612 <z_vprintk+0x24a>
    2600:	9905      	ldr	r1, [sp, #20]
    2602:	b911      	cbnz	r1, 260a <z_vprintk+0x242>
    2604:	f1bb 0f00 	cmp.w	fp, #0
    2608:	d124      	bne.n	2654 <z_vprintk+0x28c>
			nibble += nibble > 9 ? 87 : 48;
    260a:	2130      	movs	r1, #48	; 0x30
    260c:	e005      	b.n	261a <z_vprintk+0x252>
			found_largest_digit = 1;
    260e:	9505      	str	r5, [sp, #20]
    2610:	e7e3      	b.n	25da <z_vprintk+0x212>
			nibble += nibble > 9 ? 87 : 48;
    2612:	2809      	cmp	r0, #9
    2614:	bf8c      	ite	hi
    2616:	2157      	movhi	r1, #87	; 0x57
    2618:	2130      	movls	r1, #48	; 0x30
    261a:	4408      	add	r0, r1
			out((int)nibble, ctx);
    261c:	b240      	sxtb	r0, r0
    261e:	4639      	mov	r1, r7
    2620:	9308      	str	r3, [sp, #32]
    2622:	9205      	str	r2, [sp, #20]
    2624:	47b0      	blx	r6
			digits++;
    2626:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
    2628:	9a05      	ldr	r2, [sp, #20]
			digits++;
    262a:	3301      	adds	r3, #1
    262c:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
    262e:	9b08      	ldr	r3, [sp, #32]
    2630:	f1bb 0f00 	cmp.w	fp, #0
    2634:	d1eb      	bne.n	260e <z_vprintk+0x246>
	if (padding == PAD_SPACE_AFTER) {
    2636:	f1b9 0f03 	cmp.w	r9, #3
    263a:	f47f aed2 	bne.w	23e2 <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
    263e:	9b03      	ldr	r3, [sp, #12]
    2640:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
    2644:	2d00      	cmp	r5, #0
    2646:	f77f aecc 	ble.w	23e2 <z_vprintk+0x1a>
			out(' ', ctx);
    264a:	4639      	mov	r1, r7
    264c:	2020      	movs	r0, #32
    264e:	47b0      	blx	r6
    2650:	3d01      	subs	r5, #1
    2652:	e7f7      	b.n	2644 <z_vprintk+0x27c>
		if (remaining-- <= min_width) {
    2654:	1e51      	subs	r1, r2, #1
    2656:	4592      	cmp	sl, r2
    2658:	9108      	str	r1, [sp, #32]
    265a:	db07      	blt.n	266c <z_vprintk+0x2a4>
			if (padding == PAD_ZERO_BEFORE) {
    265c:	f1b9 0f01 	cmp.w	r9, #1
    2660:	d106      	bne.n	2670 <z_vprintk+0x2a8>
    2662:	9309      	str	r3, [sp, #36]	; 0x24
				out('0', ctx);
    2664:	4639      	mov	r1, r7
    2666:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    2668:	47b0      	blx	r6
    266a:	9b09      	ldr	r3, [sp, #36]	; 0x24
					x = va_arg(ap, unsigned int);
    266c:	9a08      	ldr	r2, [sp, #32]
    266e:	e7b4      	b.n	25da <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
    2670:	f1b9 0f02 	cmp.w	r9, #2
    2674:	d1fa      	bne.n	266c <z_vprintk+0x2a4>
    2676:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
    2678:	4639      	mov	r1, r7
    267a:	2020      	movs	r0, #32
    267c:	e7f4      	b.n	2668 <z_vprintk+0x2a0>
					out((int)(*s++), ctx);
    267e:	4639      	mov	r1, r7
    2680:	47b0      	blx	r6
    2682:	e6fb      	b.n	247c <z_vprintk+0xb4>
				out(c, ctx);
    2684:	4639      	mov	r1, r7
    2686:	f854 0b04 	ldr.w	r0, [r4], #4
    268a:	e6d7      	b.n	243c <z_vprintk+0x74>
				length_mod = 0;
    268c:	46a8      	mov	r8, r5
				padding = PAD_NONE;
    268e:	46a9      	mov	r9, r5
				min_width = -1;
    2690:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
    2694:	2501      	movs	r5, #1
    2696:	e6ac      	b.n	23f2 <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
    2698:	f04f 0903 	mov.w	r9, #3
    269c:	e6a9      	b.n	23f2 <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
    269e:	f04f 0901 	mov.w	r9, #1
    26a2:	e6a6      	b.n	23f2 <z_vprintk+0x2a>
			might_format = 0;
    26a4:	4605      	mov	r5, r0
		++fmt;
    26a6:	e6a4      	b.n	23f2 <z_vprintk+0x2a>

000026a8 <printk>:
{
    26a8:	b40f      	push	{r0, r1, r2, r3}
    26aa:	b507      	push	{r0, r1, r2, lr}
    26ac:	a904      	add	r1, sp, #16
    26ae:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    26b2:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    26b4:	f7fe f840 	bl	738 <vprintk>
}
    26b8:	b003      	add	sp, #12
    26ba:	f85d eb04 	ldr.w	lr, [sp], #4
    26be:	b004      	add	sp, #16
    26c0:	4770      	bx	lr

000026c2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    26c2:	4770      	bx	lr

000026c4 <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
    26c4:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
    26c6:	7a5a      	ldrb	r2, [r3, #9]
    26c8:	b932      	cbnz	r2, 26d8 <get_status+0x14>
	if (data->ref > 0) {
    26ca:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
    26ce:	2800      	cmp	r0, #0
    26d0:	bfcc      	ite	gt
    26d2:	2000      	movgt	r0, #0
    26d4:	2001      	movle	r0, #1
    26d6:	4770      	bx	lr
    26d8:	2002      	movs	r0, #2
}
    26da:	4770      	bx	lr

000026dc <clock_async_start>:
{
    26dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
    26de:	6803      	ldr	r3, [r0, #0]
	struct nrf_clock_control *clk_data = dev->driver_data;
    26e0:	6885      	ldr	r5, [r0, #8]
	const struct nrf_clock_control_config *config =
    26e2:	689f      	ldr	r7, [r3, #8]
{
    26e4:	4606      	mov	r6, r0
    26e6:	4614      	mov	r4, r2
	__asm__ volatile(
    26e8:	f04f 0320 	mov.w	r3, #32
    26ec:	f3ef 8211 	mrs	r2, BASEPRI
    26f0:	f383 8811 	msr	BASEPRI, r3
    26f4:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    26f8:	7a2b      	ldrb	r3, [r5, #8]
    26fa:	3301      	adds	r3, #1
    26fc:	b25b      	sxtb	r3, r3
    26fe:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
    2700:	f382 8811 	msr	BASEPRI, r2
    2704:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
    2708:	7a6a      	ldrb	r2, [r5, #9]
    270a:	b132      	cbz	r2, 271a <clock_async_start+0x3e>
		if (data) {
    270c:	b90c      	cbnz	r4, 2712 <clock_async_start+0x36>
	return 0;
    270e:	2000      	movs	r0, #0
}
    2710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
    2712:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    2716:	4798      	blx	r3
    2718:	e7f9      	b.n	270e <clock_async_start+0x32>
		if (ref == 1) {
    271a:	2b01      	cmp	r3, #1
    271c:	d106      	bne.n	272c <clock_async_start+0x50>
			do_start =  (config->start_handler) ?
    271e:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
    2720:	b933      	cbnz	r3, 2730 <clock_async_start+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2722:	7abb      	ldrb	r3, [r7, #10]
    2724:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2728:	2201      	movs	r2, #1
    272a:	601a      	str	r2, [r3, #0]
		if (data) {
    272c:	b94c      	cbnz	r4, 2742 <clock_async_start+0x66>
    272e:	e7ee      	b.n	270e <clock_async_start+0x32>
					config->start_handler(dev) : true;
    2730:	4798      	blx	r3
    2732:	2800      	cmp	r0, #0
    2734:	d1f5      	bne.n	2722 <clock_async_start+0x46>
			} else if (data) {
    2736:	2c00      	cmp	r4, #0
    2738:	d0e9      	beq.n	270e <clock_async_start+0x32>
				data->cb(dev, data->user_data);
    273a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    273e:	4630      	mov	r0, r6
    2740:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
    2742:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
    2744:	429c      	cmp	r4, r3
    2746:	d00d      	beq.n	2764 <clock_async_start+0x88>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    2748:	b113      	cbz	r3, 2750 <clock_async_start+0x74>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    274a:	681b      	ldr	r3, [r3, #0]
	} while (item);
    274c:	2b00      	cmp	r3, #0
    274e:	d1f9      	bne.n	2744 <clock_async_start+0x68>
	parent->next = child;
    2750:	2000      	movs	r0, #0
    2752:	6020      	str	r0, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    2754:	686b      	ldr	r3, [r5, #4]
    2756:	b913      	cbnz	r3, 275e <clock_async_start+0x82>
	list->head = node;
    2758:	e9c5 4400 	strd	r4, r4, [r5]
    275c:	e7d7      	b.n	270e <clock_async_start+0x32>
	parent->next = child;
    275e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    2760:	606c      	str	r4, [r5, #4]
    2762:	e7d5      	b.n	2710 <clock_async_start+0x34>
				return -EALREADY;
    2764:	f06f 0044 	mvn.w	r0, #68	; 0x44
    2768:	e7d2      	b.n	2710 <clock_async_start+0x34>

0000276a <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    276a:	2200      	movs	r2, #0
    276c:	f7ff bfb6 	b.w	26dc <clock_async_start>

00002770 <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    2770:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
    2772:	2000      	movs	r0, #0
	list->tail = NULL;
    2774:	e9c3 0000 	strd	r0, r0, [r3]
}
    2778:	4770      	bx	lr

0000277a <hfclk_init>:
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    277a:	2200      	movs	r2, #0
{
    277c:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    277e:	2101      	movs	r1, #1
{
    2780:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    2782:	4610      	mov	r0, r2
    2784:	f7fe f98c 	bl	aa0 <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    2788:	2000      	movs	r0, #0
    278a:	f7fe f979 	bl	a80 <arch_irq_enable>
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    278e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2792:	2201      	movs	r2, #1
    2794:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    2798:	2203      	movs	r2, #3
    279a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    279e:	68a3      	ldr	r3, [r4, #8]
	list->head = NULL;
    27a0:	2000      	movs	r0, #0
	list->tail = NULL;
    27a2:	e9c3 0000 	strd	r0, r0, [r3]
}
    27a6:	bd10      	pop	{r4, pc}

000027a8 <clock_stop>:
	const struct nrf_clock_control_config *config =
    27a8:	6802      	ldr	r2, [r0, #0]
{
    27aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
    27ac:	6895      	ldr	r5, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
    27ae:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
    27b0:	f04f 0320 	mov.w	r3, #32
    27b4:	f3ef 8611 	mrs	r6, BASEPRI
    27b8:	f383 8811 	msr	BASEPRI, r3
    27bc:	f3bf 8f6f 	isb	sy
	data->ref--;
    27c0:	7a23      	ldrb	r3, [r4, #8]
    27c2:	3b01      	subs	r3, #1
    27c4:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
    27c6:	2b00      	cmp	r3, #0
	data->ref--;
    27c8:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
    27ca:	d11c      	bne.n	2806 <clock_stop+0x5e>
    27cc:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
    27d0:	686b      	ldr	r3, [r5, #4]
				config->stop_handler(dev) : true;
    27d2:	b9a3      	cbnz	r3, 27fe <clock_stop+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    27d4:	7aeb      	ldrb	r3, [r5, #11]
    27d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    27da:	2201      	movs	r2, #1
    27dc:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    27de:	892b      	ldrh	r3, [r5, #8]
    27e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    27e4:	2200      	movs	r2, #0
    27e6:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    27e8:	681b      	ldr	r3, [r3, #0]
    27ea:	9301      	str	r3, [sp, #4]
    (void)dummy;
    27ec:	9b01      	ldr	r3, [sp, #4]
		data->started = false;
    27ee:	2000      	movs	r0, #0
    27f0:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
    27f2:	f386 8811 	msr	BASEPRI, r6
    27f6:	f3bf 8f6f 	isb	sy
}
    27fa:	b002      	add	sp, #8
    27fc:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
    27fe:	4798      	blx	r3
    2800:	2800      	cmp	r0, #0
    2802:	d1e7      	bne.n	27d4 <clock_stop+0x2c>
    2804:	e7f3      	b.n	27ee <clock_stop+0x46>
	} else if (data->ref < 0) {
    2806:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
    280a:	bfbc      	itt	lt
    280c:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
    280e:	f06f 0044 	mvnlt.w	r0, #68	; 0x44
    2812:	e7ee      	b.n	27f2 <clock_stop+0x4a>

00002814 <clkstarted_handle>:
{
    2814:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
    2816:	6884      	ldr	r4, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
    2818:	6823      	ldr	r3, [r4, #0]
{
    281a:	4605      	mov	r5, r0
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    281c:	b12b      	cbz	r3, 282a <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    281e:	6861      	ldr	r1, [r4, #4]
    2820:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    2822:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2824:	428b      	cmp	r3, r1
	list->tail = node;
    2826:	bf08      	it	eq
    2828:	6062      	streq	r2, [r4, #4]
	data->started = true;
    282a:	2201      	movs	r2, #1
    282c:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
    282e:	b903      	cbnz	r3, 2832 <clkstarted_handle+0x1e>
}
    2830:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
    2832:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    2836:	4628      	mov	r0, r5
    2838:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
    283a:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
    283c:	2b00      	cmp	r3, #0
    283e:	d0f7      	beq.n	2830 <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2840:	6861      	ldr	r1, [r4, #4]
    2842:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    2844:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2846:	428b      	cmp	r3, r1
	list->tail = node;
    2848:	bf08      	it	eq
    284a:	6062      	streq	r2, [r4, #4]
    284c:	e7ef      	b.n	282e <clkstarted_handle+0x1a>

0000284e <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    284e:	4770      	bx	lr

00002850 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    2850:	4770      	bx	lr

00002852 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
    2852:	f7fe b989 	b.w	b68 <z_arm_bus_fault>

00002856 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2856:	f000 b9b8 	b.w	2bca <z_fatal_error>

0000285a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    285a:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    285c:	6800      	ldr	r0, [r0, #0]
    285e:	f000 b9b4 	b.w	2bca <z_fatal_error>

00002862 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    2862:	b508      	push	{r3, lr}
	handler();
    2864:	f7fe f98a 	bl	b7c <z_SysNmiOnReset>
	z_arm_exc_exit();
}
    2868:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
    286c:	f7fe b8a6 	b.w	9bc <z_arm_exc_exit>

00002870 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    2870:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    2872:	2100      	movs	r1, #0
    2874:	a801      	add	r0, sp, #4
    2876:	f7fe fb77 	bl	f68 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    287a:	b003      	add	sp, #12
    287c:	f85d fb04 	ldr.w	pc, [sp], #4

00002880 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    2880:	3801      	subs	r0, #1
    2882:	3901      	subs	r1, #1
    2884:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    2888:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    288c:	4293      	cmp	r3, r2
    288e:	d101      	bne.n	2894 <strcmp+0x14>
    2890:	2b00      	cmp	r3, #0
    2892:	d1f7      	bne.n	2884 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    2894:	1a98      	subs	r0, r3, r2
    2896:	4770      	bx	lr

00002898 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    2898:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    289a:	ea81 0400 	eor.w	r4, r1, r0
    289e:	07a5      	lsls	r5, r4, #30
    28a0:	4603      	mov	r3, r0
    28a2:	d00b      	beq.n	28bc <memcpy+0x24>
    28a4:	3b01      	subs	r3, #1
    28a6:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    28a8:	4291      	cmp	r1, r2
    28aa:	d11a      	bne.n	28e2 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    28ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    28ae:	2a00      	cmp	r2, #0
    28b0:	d0fc      	beq.n	28ac <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    28b2:	f811 4b01 	ldrb.w	r4, [r1], #1
    28b6:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    28ba:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    28bc:	079c      	lsls	r4, r3, #30
    28be:	d1f6      	bne.n	28ae <memcpy+0x16>
    28c0:	0895      	lsrs	r5, r2, #2
    28c2:	00ac      	lsls	r4, r5, #2
    28c4:	1f1e      	subs	r6, r3, #4
    28c6:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    28c8:	42b9      	cmp	r1, r7
    28ca:	d105      	bne.n	28d8 <memcpy+0x40>
    28cc:	f06f 0603 	mvn.w	r6, #3
    28d0:	fb06 2205 	mla	r2, r6, r5, r2
    28d4:	4423      	add	r3, r4
    28d6:	e7e5      	b.n	28a4 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    28d8:	f851 cb04 	ldr.w	ip, [r1], #4
    28dc:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
    28e0:	e7f2      	b.n	28c8 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
    28e2:	f811 4b01 	ldrb.w	r4, [r1], #1
    28e6:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    28ea:	e7dd      	b.n	28a8 <memcpy+0x10>

000028ec <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    28ec:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    28ee:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    28f0:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    28f2:	079c      	lsls	r4, r3, #30
    28f4:	d110      	bne.n	2918 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    28f6:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    28fa:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    28fe:	0894      	lsrs	r4, r2, #2
    2900:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    2904:	42b3      	cmp	r3, r6
    2906:	d10d      	bne.n	2924 <memset+0x38>
    2908:	f06f 0503 	mvn.w	r5, #3
    290c:	fb05 2404 	mla	r4, r5, r4, r2
    2910:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    2912:	42a3      	cmp	r3, r4
    2914:	d109      	bne.n	292a <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    2916:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    2918:	2a00      	cmp	r2, #0
    291a:	d0fc      	beq.n	2916 <memset+0x2a>
		*(d_byte++) = c_byte;
    291c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    2920:	3a01      	subs	r2, #1
    2922:	e7e6      	b.n	28f2 <memset+0x6>
		*(d_word++) = c_word;
    2924:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    2928:	e7ec      	b.n	2904 <memset+0x18>
		*(d_byte++) = c_byte;
    292a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    292e:	e7f0      	b.n	2912 <memset+0x26>

00002930 <_stdout_hook_default>:
}
    2930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2934:	4770      	bx	lr

00002936 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
    2936:	f7fe be09 	b.w	154c <SystemInit>

0000293a <gpio_nrfx_write>:
{
    293a:	b510      	push	{r4, lr}
	return port->config->config_info;
    293c:	6804      	ldr	r4, [r0, #0]
    293e:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2940:	68a4      	ldr	r4, [r4, #8]
    2942:	69c0      	ldr	r0, [r0, #28]
    2944:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    2946:	2901      	cmp	r1, #1
    2948:	d104      	bne.n	2954 <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
    294a:	4058      	eors	r0, r3
    p_reg->OUT = value;
    294c:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
}
    2950:	2000      	movs	r0, #0
    2952:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
    2954:	3300      	adds	r3, #0
    2956:	fa20 f002 	lsr.w	r0, r0, r2
    295a:	f04f 0101 	mov.w	r1, #1
    295e:	bf18      	it	ne
    2960:	2301      	movne	r3, #1
    2962:	f000 0001 	and.w	r0, r0, #1
    2966:	4091      	lsls	r1, r2
    2968:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
    296a:	bf14      	ite	ne
    296c:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    2970:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
    2974:	e7ec      	b.n	2950 <gpio_nrfx_write+0x16>

00002976 <gpio_nrfx_read>:
{
    2976:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
    2978:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    297a:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    297c:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    297e:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2980:	6825      	ldr	r5, [r4, #0]
    return p_reg->DIR;
    2982:	f8d5 6514 	ldr.w	r6, [r5, #1300]	; 0x514
    return p_reg->IN;
    2986:	f8d5 4510 	ldr.w	r4, [r5, #1296]	; 0x510
    return p_reg->OUT;
    298a:	f8d5 5504 	ldr.w	r5, [r5, #1284]	; 0x504
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    298e:	4060      	eors	r0, r4
    2990:	406c      	eors	r4, r5
    2992:	4034      	ands	r4, r6
    2994:	4060      	eors	r0, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
    2996:	2901      	cmp	r1, #1
		*value = (port_val & BIT(pin)) ? 1 : 0;
    2998:	bf1c      	itt	ne
    299a:	40d0      	lsrne	r0, r2
    299c:	f000 0001 	andne.w	r0, r0, #1
    29a0:	6018      	str	r0, [r3, #0]
}
    29a2:	2000      	movs	r0, #0
    29a4:	bd70      	pop	{r4, r5, r6, pc}

000029a6 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    29a6:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
    29a8:	6818      	ldr	r0, [r3, #0]
{
    29aa:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    29ac:	b158      	cbz	r0, 29c6 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    29ae:	2400      	movs	r4, #0
    29b0:	4281      	cmp	r1, r0
    29b2:	d113      	bne.n	29dc <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    29b4:	6808      	ldr	r0, [r1, #0]
    29b6:	b95c      	cbnz	r4, 29d0 <gpio_nrfx_manage_callback+0x2a>
    29b8:	685c      	ldr	r4, [r3, #4]
	list->head = node;
    29ba:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    29bc:	42a1      	cmp	r1, r4
    29be:	d100      	bne.n	29c2 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    29c0:	6058      	str	r0, [r3, #4]
	parent->next = child;
    29c2:	2000      	movs	r0, #0
    29c4:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    29c6:	b972      	cbnz	r2, 29e6 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    29c8:	2000      	movs	r0, #0
}
    29ca:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    29cc:	4628      	mov	r0, r5
    29ce:	e7ef      	b.n	29b0 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
    29d0:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    29d2:	6858      	ldr	r0, [r3, #4]
    29d4:	4281      	cmp	r1, r0
	list->tail = node;
    29d6:	bf08      	it	eq
    29d8:	605c      	streq	r4, [r3, #4]
    29da:	e7f2      	b.n	29c2 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    29dc:	6805      	ldr	r5, [r0, #0]
	return node->next;
    29de:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    29e0:	2d00      	cmp	r5, #0
    29e2:	d1f3      	bne.n	29cc <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    29e4:	b13a      	cbz	r2, 29f6 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    29e6:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    29e8:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    29ea:	6858      	ldr	r0, [r3, #4]
	list->head = node;
    29ec:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    29ee:	2800      	cmp	r0, #0
    29f0:	d1ea      	bne.n	29c8 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    29f2:	6059      	str	r1, [r3, #4]
    29f4:	e7e9      	b.n	29ca <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    29f6:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    29fa:	e7e6      	b.n	29ca <gpio_nrfx_manage_callback+0x24>

000029fc <gpio_nrfx_config>:
{
    29fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a00:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    2a02:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    2a04:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    2a08:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    2a0c:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    2a0e:	d041      	beq.n	2a94 <gpio_nrfx_config+0x98>
    2a10:	dc09      	bgt.n	2a26 <gpio_nrfx_config+0x2a>
    2a12:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    2a16:	d03f      	beq.n	2a98 <gpio_nrfx_config+0x9c>
    2a18:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    2a1c:	d03e      	beq.n	2a9c <gpio_nrfx_config+0xa0>
    2a1e:	b190      	cbz	r0, 2a46 <gpio_nrfx_config+0x4a>
		return -EINVAL;
    2a20:	f06f 0015 	mvn.w	r0, #21
    2a24:	e033      	b.n	2a8e <gpio_nrfx_config+0x92>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    2a26:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    2a2a:	d039      	beq.n	2aa0 <gpio_nrfx_config+0xa4>
    2a2c:	dc04      	bgt.n	2a38 <gpio_nrfx_config+0x3c>
    2a2e:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    2a32:	d1f5      	bne.n	2a20 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    2a34:	2003      	movs	r0, #3
    2a36:	e006      	b.n	2a46 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    2a38:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    2a3c:	d032      	beq.n	2aa4 <gpio_nrfx_config+0xa8>
    2a3e:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    2a42:	d1ed      	bne.n	2a20 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
    2a44:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    2a46:	f406 7740 	and.w	r7, r6, #768	; 0x300
    2a4a:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    2a4e:	d02b      	beq.n	2aa8 <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_NOPULL;
    2a50:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
    2a54:	4263      	negs	r3, r4
    2a56:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    2a58:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    2a5c:	ea4f 074c 	mov.w	r7, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
    2a60:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    2a62:	ea47 070c 	orr.w	r7, r7, ip
		from_pin = pin;
    2a66:	bf18      	it	ne
    2a68:	b2d4      	uxtbne	r4, r2
    2a6a:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    2a6e:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		to_pin   = pin;
    2a72:	bf12      	itee	ne
    2a74:	46a1      	movne	r9, r4
		to_pin   = 31U;
    2a76:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
    2a7a:	2400      	moveq	r4, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2a7c:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
    2a80:	f04f 0b01 	mov.w	fp, #1
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    2a84:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2a88:	45a1      	cmp	r9, r4
    2a8a:	d20f      	bcs.n	2aac <gpio_nrfx_config+0xb0>
	return 0;
    2a8c:	2000      	movs	r0, #0
}
    2a8e:	b003      	add	sp, #12
    2a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
    2a94:	2002      	movs	r0, #2
    2a96:	e7d6      	b.n	2a46 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
    2a98:	2001      	movs	r0, #1
    2a9a:	e7d4      	b.n	2a46 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
    2a9c:	2004      	movs	r0, #4
    2a9e:	e7d2      	b.n	2a46 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
    2aa0:	2005      	movs	r0, #5
    2aa2:	e7d0      	b.n	2a46 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
    2aa4:	2006      	movs	r0, #6
    2aa6:	e7ce      	b.n	2a46 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
    2aa8:	2303      	movs	r3, #3
    2aaa:	e7d5      	b.n	2a58 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
    2aac:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    2ab0:	6892      	ldr	r2, [r2, #8]
    2ab2:	7911      	ldrb	r1, [r2, #4]
    2ab4:	f004 021f 	and.w	r2, r4, #31
    2ab8:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    2abc:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    2ac0:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    2ac4:	fa0b f204 	lsl.w	r2, fp, r4
    2ac8:	68a9      	ldr	r1, [r5, #8]
    2aca:	2b00      	cmp	r3, #0
    2acc:	d025      	beq.n	2b1a <gpio_nrfx_config+0x11e>
    2ace:	4311      	orrs	r1, r2
    2ad0:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    2ad2:	6969      	ldr	r1, [r5, #20]
    2ad4:	9301      	str	r3, [sp, #4]
    2ad6:	06b0      	lsls	r0, r6, #26
    2ad8:	bf4c      	ite	mi
    2ada:	4311      	orrmi	r1, r2
    2adc:	4391      	bicpl	r1, r2
    2ade:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    2ae0:	69a9      	ldr	r1, [r5, #24]
    2ae2:	0670      	lsls	r0, r6, #25
    2ae4:	bf4c      	ite	mi
    2ae6:	4311      	orrmi	r1, r2
    2ae8:	4391      	bicpl	r1, r2
    2aea:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
    2aec:	6929      	ldr	r1, [r5, #16]
    2aee:	0770      	lsls	r0, r6, #29
    2af0:	bf4c      	ite	mi
    2af2:	4311      	orrmi	r1, r2
    2af4:	4391      	bicpl	r1, r2
    2af6:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    2af8:	69e9      	ldr	r1, [r5, #28]
    2afa:	0630      	lsls	r0, r6, #24
    2afc:	bf4c      	ite	mi
    2afe:	430a      	orrmi	r2, r1
    2b00:	ea21 0202 	bicpl.w	r2, r1, r2
    2b04:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    2b06:	4621      	mov	r1, r4
    2b08:	4640      	mov	r0, r8
    2b0a:	f7fe fa79 	bl	1000 <gpiote_pin_int_cfg>
		if (res != 0) {
    2b0e:	2800      	cmp	r0, #0
    2b10:	d1bd      	bne.n	2a8e <gpio_nrfx_config+0x92>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2b12:	3401      	adds	r4, #1
    2b14:	b2e4      	uxtb	r4, r4
    2b16:	9b01      	ldr	r3, [sp, #4]
    2b18:	e7b6      	b.n	2a88 <gpio_nrfx_config+0x8c>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    2b1a:	ea21 0102 	bic.w	r1, r1, r2
    2b1e:	e7d7      	b.n	2ad0 <gpio_nrfx_config+0xd4>

00002b20 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    2b20:	2901      	cmp	r1, #1
{
    2b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    2b26:	bf18      	it	ne
    2b28:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    2b2a:	6887      	ldr	r7, [r0, #8]
{
    2b2c:	4606      	mov	r6, r0
		to_pin   = pin;
    2b2e:	bf12      	itee	ne
    2b30:	4625      	movne	r5, r4
		to_pin   = 31U;
    2b32:	251f      	moveq	r5, #31
		from_pin = 0U;
    2b34:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    2b36:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2b3a:	42ac      	cmp	r4, r5
    2b3c:	d902      	bls.n	2b44 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
    2b3e:	2000      	movs	r0, #0
}
    2b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    2b44:	68fb      	ldr	r3, [r7, #12]
    2b46:	fa08 f204 	lsl.w	r2, r8, r4
    2b4a:	ea23 0302 	bic.w	r3, r3, r2
    2b4e:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    2b50:	4621      	mov	r1, r4
    2b52:	4630      	mov	r0, r6
    2b54:	f7fe fa54 	bl	1000 <gpiote_pin_int_cfg>
		if (res != 0) {
    2b58:	2800      	cmp	r0, #0
    2b5a:	d1f1      	bne.n	2b40 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2b5c:	3401      	adds	r4, #1
    2b5e:	b2e4      	uxtb	r4, r4
    2b60:	e7eb      	b.n	2b3a <gpio_nrfx_pin_disable_callback+0x1a>

00002b62 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    2b62:	2901      	cmp	r1, #1
{
    2b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    2b68:	bf18      	it	ne
    2b6a:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    2b6c:	6887      	ldr	r7, [r0, #8]
{
    2b6e:	4606      	mov	r6, r0
		to_pin   = pin;
    2b70:	bf12      	itee	ne
    2b72:	4625      	movne	r5, r4
		to_pin   = 31U;
    2b74:	251f      	moveq	r5, #31
		from_pin = 0U;
    2b76:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    2b78:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2b7c:	42ac      	cmp	r4, r5
    2b7e:	d902      	bls.n	2b86 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
    2b80:	2000      	movs	r0, #0
}
    2b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    2b86:	68fb      	ldr	r3, [r7, #12]
    2b88:	fa08 f204 	lsl.w	r2, r8, r4
    2b8c:	4313      	orrs	r3, r2
    2b8e:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    2b90:	4621      	mov	r1, r4
    2b92:	4630      	mov	r0, r6
    2b94:	f7fe fa34 	bl	1000 <gpiote_pin_int_cfg>
		if (res != 0) {
    2b98:	2800      	cmp	r0, #0
    2b9a:	d1f2      	bne.n	2b82 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2b9c:	3401      	adds	r4, #1
    2b9e:	b2e4      	uxtb	r4, r4
    2ba0:	e7ec      	b.n	2b7c <gpio_nrfx_pin_enable_callback+0x1a>

00002ba2 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    2ba2:	6882      	ldr	r2, [r0, #8]
{
    2ba4:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    2ba6:	e892 0003 	ldmia.w	r2, {r0, r1}
    2baa:	e883 0003 	stmia.w	r3, {r0, r1}
}
    2bae:	2000      	movs	r0, #0
    2bb0:	4770      	bx	lr

00002bb2 <arch_system_halt>:
	__asm__ volatile(
    2bb2:	f04f 0220 	mov.w	r2, #32
    2bb6:	f3ef 8311 	mrs	r3, BASEPRI
    2bba:	f382 8811 	msr	BASEPRI, r2
    2bbe:	f3bf 8f6f 	isb	sy
	 */

	(void)arch_irq_lock();
	for (;;) {
		/* Spin endlessly */
	}
    2bc2:	e7fe      	b.n	2bc2 <arch_system_halt+0x10>

00002bc4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    2bc4:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    2bc6:	f7ff fff4 	bl	2bb2 <arch_system_halt>

00002bca <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2bca:	b570      	push	{r4, r5, r6, lr}
    2bcc:	4605      	mov	r5, r0
    2bce:	460e      	mov	r6, r1
	return z_impl_k_current_get();
    2bd0:	f7ff f92c 	bl	1e2c <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    2bd4:	4631      	mov	r1, r6
    2bd6:	4604      	mov	r4, r0
    2bd8:	4628      	mov	r0, r5
    2bda:	f7ff fff3 	bl	2bc4 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
    2bde:	4620      	mov	r0, r4
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
    2be0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2be4:	f7fe b8f0 	b.w	dc8 <z_impl_k_thread_abort>

00002be8 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    2be8:	f7ff be32 	b.w	2850 <z_clock_idle_exit>

00002bec <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2bec:	7b43      	ldrb	r3, [r0, #13]
    2bee:	06db      	lsls	r3, r3, #27
    2bf0:	bf03      	ittte	eq
    2bf2:	6980      	ldreq	r0, [r0, #24]
    2bf4:	fab0 f080 	clzeq	r0, r0
    2bf8:	0940      	lsreq	r0, r0, #5
    2bfa:	2000      	movne	r0, #0
}
    2bfc:	4770      	bx	lr

00002bfe <z_unpend_thread_no_timeout>:
{
    2bfe:	b538      	push	{r3, r4, r5, lr}
    2c00:	4604      	mov	r4, r0
    2c02:	f04f 0320 	mov.w	r3, #32
    2c06:	f3ef 8511 	mrs	r5, BASEPRI
    2c0a:	f383 8811 	msr	BASEPRI, r3
    2c0e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    2c12:	4601      	mov	r1, r0
    2c14:	6880      	ldr	r0, [r0, #8]
    2c16:	f7fe ff37 	bl	1a88 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    2c1a:	7b63      	ldrb	r3, [r4, #13]
    2c1c:	f023 0302 	bic.w	r3, r3, #2
    2c20:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    2c22:	f385 8811 	msr	BASEPRI, r5
    2c26:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    2c2a:	2300      	movs	r3, #0
    2c2c:	60a3      	str	r3, [r4, #8]
}
    2c2e:	bd38      	pop	{r3, r4, r5, pc}

00002c30 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    2c30:	b921      	cbnz	r1, 2c3c <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2c32:	f3ef 8005 	mrs	r0, IPSR
    2c36:	b908      	cbnz	r0, 2c3c <z_reschedule+0xc>
    2c38:	f7fd bece 	b.w	9d8 <arch_swap>
    2c3c:	f381 8811 	msr	BASEPRI, r1
    2c40:	f3bf 8f6f 	isb	sy
}
    2c44:	4770      	bx	lr

00002c46 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    2c46:	4603      	mov	r3, r0
    2c48:	b920      	cbnz	r0, 2c54 <z_reschedule_irqlock+0xe>
    2c4a:	f3ef 8205 	mrs	r2, IPSR
    2c4e:	b90a      	cbnz	r2, 2c54 <z_reschedule_irqlock+0xe>
    2c50:	f7fd bec2 	b.w	9d8 <arch_swap>
    2c54:	f383 8811 	msr	BASEPRI, r3
    2c58:	f3bf 8f6f 	isb	sy
}
    2c5c:	4770      	bx	lr

00002c5e <z_reschedule_unlocked>:
	__asm__ volatile(
    2c5e:	f04f 0320 	mov.w	r3, #32
    2c62:	f3ef 8011 	mrs	r0, BASEPRI
    2c66:	f383 8811 	msr	BASEPRI, r3
    2c6a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    2c6e:	f7ff bfea 	b.w	2c46 <z_reschedule_irqlock>

00002c72 <z_priq_dumb_best>:
	return list->head == list;
    2c72:	6803      	ldr	r3, [r0, #0]
}
    2c74:	4298      	cmp	r0, r3
    2c76:	bf14      	ite	ne
    2c78:	4618      	movne	r0, r3
    2c7a:	2000      	moveq	r0, #0
    2c7c:	4770      	bx	lr

00002c7e <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
    2c7e:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    2c82:	b570      	push	{r4, r5, r6, lr}
    2c84:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
    2c86:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
    2c8a:	b1cb      	cbz	r3, 2cc0 <z_thread_timeout+0x42>
    2c8c:	f04f 0320 	mov.w	r3, #32
    2c90:	f3ef 8611 	mrs	r6, BASEPRI
    2c94:	f383 8811 	msr	BASEPRI, r3
    2c98:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    2c9c:	4629      	mov	r1, r5
    2c9e:	f850 0c10 	ldr.w	r0, [r0, #-16]
    2ca2:	f7fe fef1 	bl	1a88 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    2ca6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    2caa:	f023 0302 	bic.w	r3, r3, #2
    2cae:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
    2cb2:	f386 8811 	msr	BASEPRI, r6
    2cb6:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    2cba:	2300      	movs	r3, #0
    2cbc:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    2cc0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    2cc4:	f023 0314 	bic.w	r3, r3, #20
    2cc8:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    2ccc:	4628      	mov	r0, r5
    2cce:	f7ff ff8d 	bl	2bec <z_is_thread_ready>
    2cd2:	b120      	cbz	r0, 2cde <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
    2cd4:	4628      	mov	r0, r5
}
    2cd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2cda:	f7fe bf25 	b.w	1b28 <z_add_thread_to_ready_q>
    2cde:	bd70      	pop	{r4, r5, r6, pc}

00002ce0 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2ce0:	7b43      	ldrb	r3, [r0, #13]
    2ce2:	06db      	lsls	r3, r3, #27
    2ce4:	bf03      	ittte	eq
    2ce6:	6980      	ldreq	r0, [r0, #24]
    2ce8:	fab0 f080 	clzeq	r0, r0
    2cec:	0940      	lsreq	r0, r0, #5
    2cee:	2000      	movne	r0, #0
}
    2cf0:	4770      	bx	lr

00002cf2 <z_new_thread_init>:
{
    2cf2:	b510      	push	{r4, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    2cf4:	9c02      	ldr	r4, [sp, #8]
    2cf6:	7304      	strb	r4, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
    2cf8:	7383      	strb	r3, [r0, #14]
	thread_base->thread_state = (u8_t)initial_state;
    2cfa:	2404      	movs	r4, #4

	thread_base->sched_locked = 0U;
    2cfc:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
    2cfe:	7344      	strb	r4, [r0, #13]
	thread_base->sched_locked = 0U;
    2d00:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
    2d02:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
    2d06:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
    2d0a:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
    2d0e:	bd10      	pop	{r4, pc}

00002d10 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    2d10:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    2d12:	b510      	push	{r4, lr}
    2d14:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    2d16:	b103      	cbz	r3, 2d1a <z_thread_single_abort+0xa>
		thread->fn_abort();
    2d18:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
    2d1a:	4620      	mov	r0, r4
    2d1c:	f7ff ffe0 	bl	2ce0 <z_is_thread_ready>
    2d20:	b138      	cbz	r0, 2d32 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
    2d22:	4620      	mov	r0, r4
    2d24:	f7fe ffae 	bl	1c84 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
    2d28:	7b63      	ldrb	r3, [r4, #13]
    2d2a:	f043 0308 	orr.w	r3, r3, #8
    2d2e:	7363      	strb	r3, [r4, #13]
}
    2d30:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
    2d32:	7b63      	ldrb	r3, [r4, #13]
    2d34:	079b      	lsls	r3, r3, #30
    2d36:	d502      	bpl.n	2d3e <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
    2d38:	4620      	mov	r0, r4
    2d3a:	f7ff ff60 	bl	2bfe <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
    2d3e:	69a3      	ldr	r3, [r4, #24]
    2d40:	2b00      	cmp	r3, #0
    2d42:	d0f1      	beq.n	2d28 <z_thread_single_abort+0x18>
	return z_abort_timeout(&thread->base.timeout);
    2d44:	f104 0018 	add.w	r0, r4, #24
    2d48:	f000 f801 	bl	2d4e <z_abort_timeout>
    2d4c:	e7ec      	b.n	2d28 <z_thread_single_abort+0x18>

00002d4e <z_abort_timeout>:
{
    2d4e:	b510      	push	{r4, lr}
	__asm__ volatile(
    2d50:	f04f 0220 	mov.w	r2, #32
    2d54:	f3ef 8411 	mrs	r4, BASEPRI
    2d58:	f382 8811 	msr	BASEPRI, r2
    2d5c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    2d60:	6803      	ldr	r3, [r0, #0]
    2d62:	b13b      	cbz	r3, 2d74 <z_abort_timeout+0x26>
			remove_timeout(to);
    2d64:	f7ff f94c 	bl	2000 <remove_timeout>
			ret = 0;
    2d68:	2000      	movs	r0, #0
	__asm__ volatile(
    2d6a:	f384 8811 	msr	BASEPRI, r4
    2d6e:	f3bf 8f6f 	isb	sy
}
    2d72:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    2d74:	f06f 0015 	mvn.w	r0, #21
    2d78:	e7f7      	b.n	2d6a <z_abort_timeout+0x1c>

00002d7a <z_get_next_timeout_expiry>:
{
    2d7a:	b510      	push	{r4, lr}
	__asm__ volatile(
    2d7c:	f04f 0320 	mov.w	r3, #32
    2d80:	f3ef 8411 	mrs	r4, BASEPRI
    2d84:	f383 8811 	msr	BASEPRI, r3
    2d88:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    2d8c:	f7ff f94c 	bl	2028 <next_timeout>
	__asm__ volatile(
    2d90:	f384 8811 	msr	BASEPRI, r4
    2d94:	f3bf 8f6f 	isb	sy
}
    2d98:	bd10      	pop	{r4, pc}

00002d9a <z_set_timeout_expiry>:
{
    2d9a:	b570      	push	{r4, r5, r6, lr}
    2d9c:	4604      	mov	r4, r0
    2d9e:	460e      	mov	r6, r1
	__asm__ volatile(
    2da0:	f04f 0320 	mov.w	r3, #32
    2da4:	f3ef 8511 	mrs	r5, BASEPRI
    2da8:	f383 8811 	msr	BASEPRI, r3
    2dac:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    2db0:	f7ff f93a 	bl	2028 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    2db4:	2801      	cmp	r0, #1
    2db6:	dd05      	ble.n	2dc4 <z_set_timeout_expiry+0x2a>
    2db8:	42a0      	cmp	r0, r4
    2dba:	dd03      	ble.n	2dc4 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    2dbc:	4631      	mov	r1, r6
    2dbe:	4620      	mov	r0, r4
    2dc0:	f7fd fd8c 	bl	8dc <z_clock_set_timeout>
	__asm__ volatile(
    2dc4:	f385 8811 	msr	BASEPRI, r5
    2dc8:	f3bf 8f6f 	isb	sy
}
    2dcc:	bd70      	pop	{r4, r5, r6, pc}

00002dce <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
    2dce:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
    2dd0:	f7ff f9de 	bl	2190 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
    2dd4:	bd08      	pop	{r3, pc}

00002dd6 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    2dd6:	4770      	bx	lr
