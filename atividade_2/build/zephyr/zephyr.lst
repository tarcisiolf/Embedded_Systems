
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	200005f8 	.word	0x200005f8
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&mutex, *(uintptr_t *)&timeout, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00000c51 	.word	0x00000c51
   8:	000028ed 	.word	0x000028ed
		if (fdtable[fd].obj == NULL) {
   c:	00000bc9 	.word	0x00000bc9
  10:	00000bc9 	.word	0x00000bc9
  14:	00000bc9 	.word	0x00000bc9
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	00000bc9 	.word	0x00000bc9
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  1c:	00000bc9 	.word	0x00000bc9
	errno = ENFILE;
  20:	00000bc9 	.word	0x00000bc9
	return -1;
  24:	00000bc9 	.word	0x00000bc9
		arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_mutex_unlock(mutex);
  28:	00000bc9 	.word	0x00000bc9
  2c:	00000ac1 	.word	0x00000ac1
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	00000bc9 	.word	0x00000bc9
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	00000bc9 	.word	0x00000bc9
  38:	00000a6d 	.word	0x00000a6d
  3c:	000028d9 	.word	0x000028d9

00000040 <_irq_vector_table>:
  40:	00000c11 00000c11 00000c11 00000c11     ................
  50:	00000c11 00000c11 00000c11 00000c11     ................
  60:	00000c11 00000c11 00000c11 00000c11     ................
  70:	00000c11 00000c11 00000c11 00000c11     ................
  80:	00000c11 00000c11 00000c11 00000c11     ................
  90:	00000c11 00000c11 00000c11 00000c11     ................
  a0:	00000c11 00000c11 00000c11 00000c11     ................
  b0:	00000c11 00000c11 00000c11 00000c11     ................
  c0:	00000c11 00000c11 00000c11 00000c11     ................
  d0:	00000c11 00000c11 00000c11              ............

Disassembly of section _TEXT_SECTION_NAME_2:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f0:	f000 b80c 	b.w	10c <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f808 	bl	110 <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__aeabi_idiv0>:
     10c:	4770      	bx	lr
     10e:	bf00      	nop

00000110 <__udivmoddi4>:
     110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     114:	9f09      	ldr	r7, [sp, #36]	; 0x24
     116:	4615      	mov	r5, r2
     118:	4604      	mov	r4, r0
     11a:	468e      	mov	lr, r1
     11c:	461e      	mov	r6, r3
     11e:	2b00      	cmp	r3, #0
     120:	f040 80cc 	bne.w	2bc <CONFIG_FLASH_SIZE+0xbc>
     124:	428a      	cmp	r2, r1
     126:	fab2 fc82 	clz	ip, r2
     12a:	d94c      	bls.n	1c6 <CONFIG_IDLE_STACK_SIZE+0x86>
     12c:	f1bc 0f00 	cmp.w	ip, #0
     130:	d00b      	beq.n	14a <CONFIG_IDLE_STACK_SIZE+0xa>
     132:	f1cc 0820 	rsb	r8, ip, #32
     136:	fa01 fe0c 	lsl.w	lr, r1, ip
     13a:	fa20 f808 	lsr.w	r8, r0, r8
     13e:	fa02 f50c 	lsl.w	r5, r2, ip
     142:	ea48 0e0e 	orr.w	lr, r8, lr
     146:	fa00 f40c 	lsl.w	r4, r0, ip
     14a:	ea4f 4915 	mov.w	r9, r5, lsr #16
     14e:	fa1f f885 	uxth.w	r8, r5
     152:	fbbe faf9 	udiv	sl, lr, r9
     156:	0c21      	lsrs	r1, r4, #16
     158:	fb09 e31a 	mls	r3, r9, sl, lr
     15c:	fb0a fb08 	mul.w	fp, sl, r8
     160:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     164:	459b      	cmp	fp, r3
     166:	d92a      	bls.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     168:	18eb      	adds	r3, r5, r3
     16a:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
     16e:	d204      	bcs.n	17a <CONFIG_IDLE_STACK_SIZE+0x3a>
     170:	459b      	cmp	fp, r3
     172:	d902      	bls.n	17a <CONFIG_IDLE_STACK_SIZE+0x3a>
     174:	f1aa 0002 	sub.w	r0, sl, #2
     178:	442b      	add	r3, r5
     17a:	eba3 030b 	sub.w	r3, r3, fp
     17e:	b2a4      	uxth	r4, r4
     180:	fbb3 f2f9 	udiv	r2, r3, r9
     184:	fb09 3312 	mls	r3, r9, r2, r3
     188:	fb02 f808 	mul.w	r8, r2, r8
     18c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     190:	45a0      	cmp	r8, r4
     192:	d916      	bls.n	1c2 <CONFIG_IDLE_STACK_SIZE+0x82>
     194:	192c      	adds	r4, r5, r4
     196:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     19a:	d203      	bcs.n	1a4 <CONFIG_IDLE_STACK_SIZE+0x64>
     19c:	45a0      	cmp	r8, r4
     19e:	d901      	bls.n	1a4 <CONFIG_IDLE_STACK_SIZE+0x64>
     1a0:	1e93      	subs	r3, r2, #2
     1a2:	442c      	add	r4, r5
     1a4:	eba4 0408 	sub.w	r4, r4, r8
     1a8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1ac:	b127      	cbz	r7, 1b8 <CONFIG_IDLE_STACK_SIZE+0x78>
     1ae:	fa24 f40c 	lsr.w	r4, r4, ip
     1b2:	2300      	movs	r3, #0
     1b4:	603c      	str	r4, [r7, #0]
     1b6:	607b      	str	r3, [r7, #4]
     1b8:	4631      	mov	r1, r6
     1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1be:	4650      	mov	r0, sl
     1c0:	e7db      	b.n	17a <CONFIG_IDLE_STACK_SIZE+0x3a>
     1c2:	4613      	mov	r3, r2
     1c4:	e7ee      	b.n	1a4 <CONFIG_IDLE_STACK_SIZE+0x64>
     1c6:	b902      	cbnz	r2, 1ca <CONFIG_IDLE_STACK_SIZE+0x8a>
     1c8:	deff      	udf	#255	; 0xff
     1ca:	f1bc 0f00 	cmp.w	ip, #0
     1ce:	d12e      	bne.n	22e <CONFIG_FLASH_SIZE+0x2e>
     1d0:	1a8b      	subs	r3, r1, r2
     1d2:	2601      	movs	r6, #1
     1d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1d8:	b2aa      	uxth	r2, r5
     1da:	fbb3 f8fe 	udiv	r8, r3, lr
     1de:	0c21      	lsrs	r1, r4, #16
     1e0:	fb0e 3318 	mls	r3, lr, r8, r3
     1e4:	fb08 f902 	mul.w	r9, r8, r2
     1e8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     1ec:	4599      	cmp	r9, r3
     1ee:	d961      	bls.n	2b4 <CONFIG_FLASH_SIZE+0xb4>
     1f0:	18eb      	adds	r3, r5, r3
     1f2:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     1f6:	d204      	bcs.n	202 <CONFIG_FLASH_SIZE+0x2>
     1f8:	4599      	cmp	r9, r3
     1fa:	d902      	bls.n	202 <CONFIG_FLASH_SIZE+0x2>
     1fc:	f1a8 0002 	sub.w	r0, r8, #2
     200:	442b      	add	r3, r5
     202:	eba3 0309 	sub.w	r3, r3, r9
     206:	b2a4      	uxth	r4, r4
     208:	fbb3 f1fe 	udiv	r1, r3, lr
     20c:	fb0e 3311 	mls	r3, lr, r1, r3
     210:	434a      	muls	r2, r1
     212:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     216:	42a2      	cmp	r2, r4
     218:	d94e      	bls.n	2b8 <CONFIG_FLASH_SIZE+0xb8>
     21a:	192c      	adds	r4, r5, r4
     21c:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
     220:	d203      	bcs.n	22a <CONFIG_FLASH_SIZE+0x2a>
     222:	42a2      	cmp	r2, r4
     224:	d901      	bls.n	22a <CONFIG_FLASH_SIZE+0x2a>
     226:	1e8b      	subs	r3, r1, #2
     228:	442c      	add	r4, r5
     22a:	1aa4      	subs	r4, r4, r2
     22c:	e7bc      	b.n	1a8 <CONFIG_IDLE_STACK_SIZE+0x68>
     22e:	f1cc 0e20 	rsb	lr, ip, #32
     232:	fa02 f50c 	lsl.w	r5, r2, ip
     236:	fa21 f90e 	lsr.w	r9, r1, lr
     23a:	fa01 f30c 	lsl.w	r3, r1, ip
     23e:	fa20 fe0e 	lsr.w	lr, r0, lr
     242:	ea4e 0303 	orr.w	r3, lr, r3
     246:	ea4f 4815 	mov.w	r8, r5, lsr #16
     24a:	fa00 f40c 	lsl.w	r4, r0, ip
     24e:	fbb9 f1f8 	udiv	r1, r9, r8
     252:	fa1f fe85 	uxth.w	lr, r5
     256:	fb08 9211 	mls	r2, r8, r1, r9
     25a:	0c18      	lsrs	r0, r3, #16
     25c:	fb01 f60e 	mul.w	r6, r1, lr
     260:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
     264:	4296      	cmp	r6, r2
     266:	d921      	bls.n	2ac <CONFIG_FLASH_SIZE+0xac>
     268:	18aa      	adds	r2, r5, r2
     26a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     26e:	d203      	bcs.n	278 <CONFIG_FLASH_SIZE+0x78>
     270:	4296      	cmp	r6, r2
     272:	d901      	bls.n	278 <CONFIG_FLASH_SIZE+0x78>
     274:	1e88      	subs	r0, r1, #2
     276:	442a      	add	r2, r5
     278:	1b92      	subs	r2, r2, r6
     27a:	b29b      	uxth	r3, r3
     27c:	fbb2 f9f8 	udiv	r9, r2, r8
     280:	fb08 2219 	mls	r2, r8, r9, r2
     284:	fb09 fe0e 	mul.w	lr, r9, lr
     288:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
     28c:	459e      	cmp	lr, r3
     28e:	d90f      	bls.n	2b0 <CONFIG_FLASH_SIZE+0xb0>
     290:	18eb      	adds	r3, r5, r3
     292:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
     296:	d204      	bcs.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
     298:	459e      	cmp	lr, r3
     29a:	d902      	bls.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
     29c:	f1a9 0602 	sub.w	r6, r9, #2
     2a0:	442b      	add	r3, r5
     2a2:	eba3 030e 	sub.w	r3, r3, lr
     2a6:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     2aa:	e793      	b.n	1d4 <CONFIG_IDLE_STACK_SIZE+0x94>
     2ac:	4608      	mov	r0, r1
     2ae:	e7e3      	b.n	278 <CONFIG_FLASH_SIZE+0x78>
     2b0:	464e      	mov	r6, r9
     2b2:	e7f6      	b.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
     2b4:	4640      	mov	r0, r8
     2b6:	e7a4      	b.n	202 <CONFIG_FLASH_SIZE+0x2>
     2b8:	460b      	mov	r3, r1
     2ba:	e7b6      	b.n	22a <CONFIG_FLASH_SIZE+0x2a>
     2bc:	428b      	cmp	r3, r1
     2be:	d905      	bls.n	2cc <CONFIG_FLASH_SIZE+0xcc>
     2c0:	b10f      	cbz	r7, 2c6 <CONFIG_FLASH_SIZE+0xc6>
     2c2:	e9c7 0100 	strd	r0, r1, [r7]
     2c6:	2600      	movs	r6, #0
     2c8:	4630      	mov	r0, r6
     2ca:	e775      	b.n	1b8 <CONFIG_IDLE_STACK_SIZE+0x78>
     2cc:	fab3 fc83 	clz	ip, r3
     2d0:	f1bc 0f00 	cmp.w	ip, #0
     2d4:	d10f      	bne.n	2f6 <CONFIG_FLASH_SIZE+0xf6>
     2d6:	428b      	cmp	r3, r1
     2d8:	d301      	bcc.n	2de <CONFIG_FLASH_SIZE+0xde>
     2da:	4282      	cmp	r2, r0
     2dc:	d809      	bhi.n	2f2 <CONFIG_FLASH_SIZE+0xf2>
     2de:	1a84      	subs	r4, r0, r2
     2e0:	eb61 0e03 	sbc.w	lr, r1, r3
     2e4:	2001      	movs	r0, #1
     2e6:	2f00      	cmp	r7, #0
     2e8:	d06a      	beq.n	3c0 <CONFIG_FLASH_SIZE+0x1c0>
     2ea:	e9c7 4e00 	strd	r4, lr, [r7]
     2ee:	2600      	movs	r6, #0
     2f0:	e762      	b.n	1b8 <CONFIG_IDLE_STACK_SIZE+0x78>
     2f2:	4660      	mov	r0, ip
     2f4:	e7f7      	b.n	2e6 <CONFIG_FLASH_SIZE+0xe6>
     2f6:	f1cc 0e20 	rsb	lr, ip, #32
     2fa:	fa03 f30c 	lsl.w	r3, r3, ip
     2fe:	fa22 f50e 	lsr.w	r5, r2, lr
     302:	fa21 f40e 	lsr.w	r4, r1, lr
     306:	431d      	orrs	r5, r3
     308:	fa01 f30c 	lsl.w	r3, r1, ip
     30c:	fa20 f10e 	lsr.w	r1, r0, lr
     310:	430b      	orrs	r3, r1
     312:	ea4f 4a15 	mov.w	sl, r5, lsr #16
     316:	fa00 f60c 	lsl.w	r6, r0, ip
     31a:	fbb4 f9fa 	udiv	r9, r4, sl
     31e:	fa1f f885 	uxth.w	r8, r5
     322:	fb0a 4019 	mls	r0, sl, r9, r4
     326:	0c1c      	lsrs	r4, r3, #16
     328:	fb09 f108 	mul.w	r1, r9, r8
     32c:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
     330:	42a1      	cmp	r1, r4
     332:	fa02 f20c 	lsl.w	r2, r2, ip
     336:	d93f      	bls.n	3b8 <CONFIG_FLASH_SIZE+0x1b8>
     338:	192c      	adds	r4, r5, r4
     33a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     33e:	d204      	bcs.n	34a <CONFIG_FLASH_SIZE+0x14a>
     340:	42a1      	cmp	r1, r4
     342:	d902      	bls.n	34a <CONFIG_FLASH_SIZE+0x14a>
     344:	f1a9 0002 	sub.w	r0, r9, #2
     348:	442c      	add	r4, r5
     34a:	1a64      	subs	r4, r4, r1
     34c:	b29b      	uxth	r3, r3
     34e:	fbb4 f9fa 	udiv	r9, r4, sl
     352:	fb0a 4419 	mls	r4, sl, r9, r4
     356:	fb09 f808 	mul.w	r8, r9, r8
     35a:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
     35e:	4588      	cmp	r8, r1
     360:	d92c      	bls.n	3bc <CONFIG_FLASH_SIZE+0x1bc>
     362:	1869      	adds	r1, r5, r1
     364:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
     368:	d204      	bcs.n	374 <CONFIG_FLASH_SIZE+0x174>
     36a:	4588      	cmp	r8, r1
     36c:	d902      	bls.n	374 <CONFIG_FLASH_SIZE+0x174>
     36e:	f1a9 0302 	sub.w	r3, r9, #2
     372:	4429      	add	r1, r5
     374:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     378:	eba1 0108 	sub.w	r1, r1, r8
     37c:	fba0 8902 	umull	r8, r9, r0, r2
     380:	4549      	cmp	r1, r9
     382:	46c2      	mov	sl, r8
     384:	464c      	mov	r4, r9
     386:	d302      	bcc.n	38e <CONFIG_FLASH_SIZE+0x18e>
     388:	d106      	bne.n	398 <CONFIG_FLASH_SIZE+0x198>
     38a:	4546      	cmp	r6, r8
     38c:	d204      	bcs.n	398 <CONFIG_FLASH_SIZE+0x198>
     38e:	ebb8 0a02 	subs.w	sl, r8, r2
     392:	eb69 0405 	sbc.w	r4, r9, r5
     396:	3801      	subs	r0, #1
     398:	b197      	cbz	r7, 3c0 <CONFIG_FLASH_SIZE+0x1c0>
     39a:	ebb6 030a 	subs.w	r3, r6, sl
     39e:	eb61 0604 	sbc.w	r6, r1, r4
     3a2:	fa06 fe0e 	lsl.w	lr, r6, lr
     3a6:	fa23 f30c 	lsr.w	r3, r3, ip
     3aa:	ea4e 0303 	orr.w	r3, lr, r3
     3ae:	fa26 f60c 	lsr.w	r6, r6, ip
     3b2:	e9c7 3600 	strd	r3, r6, [r7]
     3b6:	e79a      	b.n	2ee <CONFIG_FLASH_SIZE+0xee>
     3b8:	4648      	mov	r0, r9
     3ba:	e7c6      	b.n	34a <CONFIG_FLASH_SIZE+0x14a>
     3bc:	464b      	mov	r3, r9
     3be:	e7d9      	b.n	374 <CONFIG_FLASH_SIZE+0x174>
     3c0:	463e      	mov	r6, r7
     3c2:	e6f9      	b.n	1b8 <CONFIG_IDLE_STACK_SIZE+0x78>

000003c4 <button0_callback>:
int activate_sequence1 = 0;
int activate_sequence2 = 0;
int activate_sequence3 = 0;

void button0_callback(struct device *gpiob, struct gpio_callback *cb, u32_t pins)
{
     3c4:	b508      	push	{r3, lr}
    printk("Button 0 pressed!\n");
     3c6:	4805      	ldr	r0, [pc, #20]	; (3dc <button0_callback+0x18>)
     3c8:	f002 f9a2 	bl	2710 <printk>
    sequence = '0';
     3cc:	4b04      	ldr	r3, [pc, #16]	; (3e0 <button0_callback+0x1c>)
     3ce:	2230      	movs	r2, #48	; 0x30
     3d0:	701a      	strb	r2, [r3, #0]
    activate_sequence0 = ~activate_sequence0;
     3d2:	4a04      	ldr	r2, [pc, #16]	; (3e4 <button0_callback+0x20>)
     3d4:	6813      	ldr	r3, [r2, #0]
     3d6:	43db      	mvns	r3, r3
     3d8:	6013      	str	r3, [r2, #0]
}
     3da:	bd08      	pop	{r3, pc}
     3dc:	000030ac 	.word	0x000030ac
     3e0:	20000f54 	.word	0x20000f54
     3e4:	20000008 	.word	0x20000008

000003e8 <button1_callback>:

void button1_callback(struct device *gpiob, struct gpio_callback *cb, u32_t pins)
{
     3e8:	b508      	push	{r3, lr}
    printk("Button 1 pressed!\n");
     3ea:	4805      	ldr	r0, [pc, #20]	; (400 <CONFIG_MAIN_STACK_SIZE>)
     3ec:	f002 f990 	bl	2710 <printk>
    sequence = '1';
     3f0:	4b04      	ldr	r3, [pc, #16]	; (404 <CONFIG_MAIN_STACK_SIZE+0x4>)
     3f2:	2231      	movs	r2, #49	; 0x31
     3f4:	701a      	strb	r2, [r3, #0]
    activate_sequence1 = ~activate_sequence1;
     3f6:	4a04      	ldr	r2, [pc, #16]	; (408 <CONFIG_MAIN_STACK_SIZE+0x8>)
     3f8:	6813      	ldr	r3, [r2, #0]
     3fa:	43db      	mvns	r3, r3
     3fc:	6013      	str	r3, [r2, #0]
}
     3fe:	bd08      	pop	{r3, pc}
     400:	000030bf 	.word	0x000030bf
     404:	20000f54 	.word	0x20000f54
     408:	2000000c 	.word	0x2000000c

0000040c <button2_callback>:

void button2_callback(struct device *gpiob, struct gpio_callback *cb, u32_t pins)
{
     40c:	b508      	push	{r3, lr}
    printk("Button 2 pressed!\n");
     40e:	4805      	ldr	r0, [pc, #20]	; (424 <button2_callback+0x18>)
     410:	f002 f97e 	bl	2710 <printk>
    sequence = '2';
     414:	4b04      	ldr	r3, [pc, #16]	; (428 <button2_callback+0x1c>)
     416:	2232      	movs	r2, #50	; 0x32
     418:	701a      	strb	r2, [r3, #0]
    activate_sequence2 = ~activate_sequence2;
     41a:	4a04      	ldr	r2, [pc, #16]	; (42c <button2_callback+0x20>)
     41c:	6813      	ldr	r3, [r2, #0]
     41e:	43db      	mvns	r3, r3
     420:	6013      	str	r3, [r2, #0]
}
     422:	bd08      	pop	{r3, pc}
     424:	000030d2 	.word	0x000030d2
     428:	20000f54 	.word	0x20000f54
     42c:	20000010 	.word	0x20000010

00000430 <button3_callback>:

void button3_callback(struct device *gpiob, struct gpio_callback *cb, u32_t pins)
{
     430:	b508      	push	{r3, lr}
    printk("Button 3 pressed!\n");
     432:	4805      	ldr	r0, [pc, #20]	; (448 <button3_callback+0x18>)
     434:	f002 f96c 	bl	2710 <printk>
    sequence = '3';
     438:	4b04      	ldr	r3, [pc, #16]	; (44c <button3_callback+0x1c>)
     43a:	2233      	movs	r2, #51	; 0x33
     43c:	701a      	strb	r2, [r3, #0]
    activate_sequence3 = ~activate_sequence3;
     43e:	4a04      	ldr	r2, [pc, #16]	; (450 <button3_callback+0x20>)
     440:	6813      	ldr	r3, [r2, #0]
     442:	43db      	mvns	r3, r3
     444:	6013      	str	r3, [r2, #0]
}
     446:	bd08      	pop	{r3, pc}
     448:	000030e5 	.word	0x000030e5
     44c:	20000f54 	.word	0x20000f54
     450:	20000014 	.word	0x20000014

00000454 <main>:

void main(void)
{
     454:	b58f      	push	{r0, r1, r2, r3, r7, lr}
    printk("Inicializando LEDs\n");
     456:	4888      	ldr	r0, [pc, #544]	; (678 <main+0x224>)
    set_all_led(&led0, &led1, &led2, &led3, 1);

    while(1)
    {
        k_sleep(TIME);
        switch (sequence)
     458:	4f88      	ldr	r7, [pc, #544]	; (67c <main+0x228>)
            }
            
            break;

        case '3':
            printk("Current Sequence [%c] | Value Sequence_3 [%d]\n", sequence, activate_sequence3);
     45a:	f8df 8284 	ldr.w	r8, [pc, #644]	; 6e0 <main+0x28c>
    printk("Inicializando LEDs\n");
     45e:	f002 f957 	bl	2710 <printk>
    led_init(&led0, LED_DEVICE0, LED_PIN0);
     462:	2211      	movs	r2, #17
     464:	4986      	ldr	r1, [pc, #536]	; (680 <main+0x22c>)
     466:	4887      	ldr	r0, [pc, #540]	; (684 <main+0x230>)
     468:	f001 ff05 	bl	2276 <led_init>
    led_init(&led1, LED_DEVICE1, LED_PIN1);
     46c:	2212      	movs	r2, #18
     46e:	4984      	ldr	r1, [pc, #528]	; (680 <main+0x22c>)
     470:	4885      	ldr	r0, [pc, #532]	; (688 <main+0x234>)
     472:	f001 ff00 	bl	2276 <led_init>
    led_init(&led2, LED_DEVICE2, LED_PIN2);
     476:	2213      	movs	r2, #19
     478:	4981      	ldr	r1, [pc, #516]	; (680 <main+0x22c>)
     47a:	4884      	ldr	r0, [pc, #528]	; (68c <main+0x238>)
     47c:	f001 fefb 	bl	2276 <led_init>
    led_init(&led3, LED_DEVICE3, LED_PIN3);
     480:	2214      	movs	r2, #20
     482:	497f      	ldr	r1, [pc, #508]	; (680 <main+0x22c>)
     484:	4882      	ldr	r0, [pc, #520]	; (690 <main+0x23c>)
     486:	f001 fef6 	bl	2276 <led_init>
    printk("LEDS ok\n");
     48a:	4882      	ldr	r0, [pc, #520]	; (694 <main+0x240>)
     48c:	f002 f940 	bl	2710 <printk>
    printk("Inicializando os Botões\n");
     490:	4881      	ldr	r0, [pc, #516]	; (698 <main+0x244>)
     492:	f002 f93d 	bl	2710 <printk>
    button_create(&button0, BUTTON_DEVICE, BUTTON_PIN0, button0_callback);
     496:	4b81      	ldr	r3, [pc, #516]	; (69c <main+0x248>)
     498:	4979      	ldr	r1, [pc, #484]	; (680 <main+0x22c>)
     49a:	4881      	ldr	r0, [pc, #516]	; (6a0 <main+0x24c>)
     49c:	220d      	movs	r2, #13
     49e:	f001 ff43 	bl	2328 <button_create>
    button_create(&button1, BUTTON_DEVICE, BUTTON_PIN1, button1_callback);
     4a2:	4b80      	ldr	r3, [pc, #512]	; (6a4 <main+0x250>)
     4a4:	4976      	ldr	r1, [pc, #472]	; (680 <main+0x22c>)
     4a6:	4880      	ldr	r0, [pc, #512]	; (6a8 <main+0x254>)
     4a8:	220e      	movs	r2, #14
     4aa:	f001 ff3d 	bl	2328 <button_create>
    button_create(&button2, BUTTON_DEVICE, BUTTON_PIN2, button2_callback);
     4ae:	4b7f      	ldr	r3, [pc, #508]	; (6ac <main+0x258>)
     4b0:	4973      	ldr	r1, [pc, #460]	; (680 <main+0x22c>)
     4b2:	487f      	ldr	r0, [pc, #508]	; (6b0 <main+0x25c>)
     4b4:	220f      	movs	r2, #15
     4b6:	f001 ff37 	bl	2328 <button_create>
    button_create(&button3, BUTTON_DEVICE, BUTTON_PIN3, button3_callback);
     4ba:	4b7e      	ldr	r3, [pc, #504]	; (6b4 <main+0x260>)
     4bc:	4970      	ldr	r1, [pc, #448]	; (680 <main+0x22c>)
     4be:	487e      	ldr	r0, [pc, #504]	; (6b8 <main+0x264>)
     4c0:	2210      	movs	r2, #16
     4c2:	f001 ff31 	bl	2328 <button_create>
    printk("Botões OK\n");
     4c6:	487d      	ldr	r0, [pc, #500]	; (6bc <main+0x268>)
     4c8:	f002 f922 	bl	2710 <printk>
    set_all_led(&led0, &led1, &led2, &led3, 1);
     4cc:	2301      	movs	r3, #1
     4ce:	9300      	str	r3, [sp, #0]
     4d0:	4a6e      	ldr	r2, [pc, #440]	; (68c <main+0x238>)
     4d2:	4b6f      	ldr	r3, [pc, #444]	; (690 <main+0x23c>)
     4d4:	496c      	ldr	r1, [pc, #432]	; (688 <main+0x234>)
     4d6:	486b      	ldr	r0, [pc, #428]	; (684 <main+0x230>)
     4d8:	f001 fede 	bl	2298 <set_all_led>
     4dc:	463c      	mov	r4, r7
        k_sleep(TIME);
     4de:	f001 febd 	bl	225c <k_sleep.constprop.0>
        switch (sequence)
     4e2:	783b      	ldrb	r3, [r7, #0]
     4e4:	3b30      	subs	r3, #48	; 0x30
     4e6:	2b03      	cmp	r3, #3
     4e8:	d8f9      	bhi.n	4de <main+0x8a>
     4ea:	e8df f003 	tbb	[pc, r3]
     4ee:	2c02      	.short	0x2c02
     4f0:	9363      	.short	0x9363
            printk("Current Sequence [%c] | Value Sequence_0 [%d]\n", sequence, activate_sequence0);
     4f2:	4d73      	ldr	r5, [pc, #460]	; (6c0 <main+0x26c>)
     4f4:	4873      	ldr	r0, [pc, #460]	; (6c4 <main+0x270>)
     4f6:	682a      	ldr	r2, [r5, #0]
     4f8:	2130      	movs	r1, #48	; 0x30
     4fa:	f002 f909 	bl	2710 <printk>
            if(activate_sequence0 == -1)
     4fe:	682b      	ldr	r3, [r5, #0]
     500:	1c5d      	adds	r5, r3, #1
     502:	f040 80b5 	bne.w	670 <main+0x21c>
                set_all_led(&led0, &led1, &led2, &led3, 0);
     506:	2300      	movs	r3, #0
     508:	9300      	str	r3, [sp, #0]
     50a:	4a60      	ldr	r2, [pc, #384]	; (68c <main+0x238>)
     50c:	4b60      	ldr	r3, [pc, #384]	; (690 <main+0x23c>)
     50e:	495e      	ldr	r1, [pc, #376]	; (688 <main+0x234>)
     510:	485c      	ldr	r0, [pc, #368]	; (684 <main+0x230>)
     512:	f001 fec1 	bl	2298 <set_all_led>
                printk("Current Sequence [%c]\n", sequence);
     516:	7821      	ldrb	r1, [r4, #0]
     518:	486b      	ldr	r0, [pc, #428]	; (6c8 <main+0x274>)
     51a:	f002 f8f9 	bl	2710 <printk>
                if (sequence == '1' || sequence == '2' || sequence == '3')
     51e:	7823      	ldrb	r3, [r4, #0]
     520:	3b31      	subs	r3, #49	; 0x31
     522:	2b02      	cmp	r3, #2
     524:	d808      	bhi.n	538 <main+0xe4>
                    set_all_led(&led0, &led1, &led2, &led3, 1);
     526:	2301      	movs	r3, #1
     528:	9300      	str	r3, [sp, #0]
     52a:	4a58      	ldr	r2, [pc, #352]	; (68c <main+0x238>)
     52c:	4b58      	ldr	r3, [pc, #352]	; (690 <main+0x23c>)
     52e:	4956      	ldr	r1, [pc, #344]	; (688 <main+0x234>)
     530:	4854      	ldr	r0, [pc, #336]	; (684 <main+0x230>)
     532:	f001 feb1 	bl	2298 <set_all_led>
                    break;    
     536:	e7d2      	b.n	4de <main+0x8a>
                k_sleep(K_MSEC(TIME));
     538:	f001 fe90 	bl	225c <k_sleep.constprop.0>
                printk("Current Sequence [%c]\n", sequence);
     53c:	7821      	ldrb	r1, [r4, #0]
     53e:	4862      	ldr	r0, [pc, #392]	; (6c8 <main+0x274>)
     540:	f002 f8e6 	bl	2710 <printk>
                if (sequence == '1' || sequence == '2' || sequence == '3')
     544:	e7ef      	b.n	526 <main+0xd2>
            printk("Current Sequence [%c] | Value Sequence_1 [%d]\n", sequence, activate_sequence1);
     546:	4d61      	ldr	r5, [pc, #388]	; (6cc <main+0x278>)
     548:	4861      	ldr	r0, [pc, #388]	; (6d0 <main+0x27c>)
     54a:	682a      	ldr	r2, [r5, #0]
     54c:	2131      	movs	r1, #49	; 0x31
     54e:	f002 f8df 	bl	2710 <printk>
            if(activate_sequence1 == -1)
     552:	682b      	ldr	r3, [r5, #0]
     554:	1c58      	adds	r0, r3, #1
     556:	f040 808b 	bne.w	670 <main+0x21c>
                turn_leds(&led0, &led1, &led2, &led3, 0, 1, 0, 1);
     55a:	2600      	movs	r6, #0
     55c:	2501      	movs	r5, #1
     55e:	4b4c      	ldr	r3, [pc, #304]	; (690 <main+0x23c>)
     560:	4a4a      	ldr	r2, [pc, #296]	; (68c <main+0x238>)
     562:	4949      	ldr	r1, [pc, #292]	; (688 <main+0x234>)
     564:	4847      	ldr	r0, [pc, #284]	; (684 <main+0x230>)
     566:	e9cd 6502 	strd	r6, r5, [sp, #8]
     56a:	e9cd 6500 	strd	r6, r5, [sp]
     56e:	f001 feb3 	bl	22d8 <turn_leds>
                printk("Current Sequence [%c]\n", sequence);
     572:	7821      	ldrb	r1, [r4, #0]
     574:	4854      	ldr	r0, [pc, #336]	; (6c8 <main+0x274>)
     576:	f002 f8cb 	bl	2710 <printk>
                if (sequence == '0' || sequence == '2' || sequence == '3')
     57a:	7823      	ldrb	r3, [r4, #0]
     57c:	2b30      	cmp	r3, #48	; 0x30
     57e:	d0d2      	beq.n	526 <main+0xd2>
     580:	3b32      	subs	r3, #50	; 0x32
     582:	42ab      	cmp	r3, r5
     584:	d9cf      	bls.n	526 <main+0xd2>
                k_sleep(K_MSEC(TIME));
     586:	f001 fe69 	bl	225c <k_sleep.constprop.0>
                printk("Current Sequence [%c]\n", sequence);
     58a:	7821      	ldrb	r1, [r4, #0]
     58c:	484e      	ldr	r0, [pc, #312]	; (6c8 <main+0x274>)
     58e:	f002 f8bf 	bl	2710 <printk>
                if (sequence == '0' || sequence == '2' || sequence == '3')
     592:	7823      	ldrb	r3, [r4, #0]
     594:	2b30      	cmp	r3, #48	; 0x30
     596:	d0c6      	beq.n	526 <main+0xd2>
     598:	3b32      	subs	r3, #50	; 0x32
     59a:	42ab      	cmp	r3, r5
     59c:	d9c3      	bls.n	526 <main+0xd2>
                turn_leds(&led0, &led1, &led2, &led3, 1, 0, 1, 0);
     59e:	e9cd 5602 	strd	r5, r6, [sp, #8]
                turn_leds(&led0, &led1, &led2, &led3, 1, 0, 0, 1);
     5a2:	9601      	str	r6, [sp, #4]
                {
                    set_all_led(&led0, &led1, &led2, &led3, 1);
                    break;    
                }

                turn_leds(&led0, &led1, &led2, &led3, 1, 1, 0, 0);
     5a4:	9500      	str	r5, [sp, #0]
     5a6:	4b3a      	ldr	r3, [pc, #232]	; (690 <main+0x23c>)
     5a8:	4a38      	ldr	r2, [pc, #224]	; (68c <main+0x238>)
     5aa:	4937      	ldr	r1, [pc, #220]	; (688 <main+0x234>)
     5ac:	4835      	ldr	r0, [pc, #212]	; (684 <main+0x230>)
     5ae:	f001 fe93 	bl	22d8 <turn_leds>
     5b2:	e794      	b.n	4de <main+0x8a>
            printk("Current Sequence [%c] | Value Sequence_2 [%d]\n", sequence, activate_sequence2);
     5b4:	4d47      	ldr	r5, [pc, #284]	; (6d4 <main+0x280>)
     5b6:	4848      	ldr	r0, [pc, #288]	; (6d8 <main+0x284>)
     5b8:	682a      	ldr	r2, [r5, #0]
     5ba:	2132      	movs	r1, #50	; 0x32
     5bc:	f002 f8a8 	bl	2710 <printk>
            if (activate_sequence2 == -1)
     5c0:	682b      	ldr	r3, [r5, #0]
     5c2:	1c59      	adds	r1, r3, #1
     5c4:	d154      	bne.n	670 <main+0x21c>
                turn_leds(&led0, &led1, &led2, &led3, 0, 1, 1, 0);
     5c6:	2501      	movs	r5, #1
     5c8:	2600      	movs	r6, #0
     5ca:	4b31      	ldr	r3, [pc, #196]	; (690 <main+0x23c>)
     5cc:	4a2f      	ldr	r2, [pc, #188]	; (68c <main+0x238>)
     5ce:	492e      	ldr	r1, [pc, #184]	; (688 <main+0x234>)
     5d0:	482c      	ldr	r0, [pc, #176]	; (684 <main+0x230>)
     5d2:	e9cd 5602 	strd	r5, r6, [sp, #8]
     5d6:	e9cd 6500 	strd	r6, r5, [sp]
     5da:	f001 fe7d 	bl	22d8 <turn_leds>
                printk("Current Sequence [%c]\n", sequence);
     5de:	7821      	ldrb	r1, [r4, #0]
     5e0:	4839      	ldr	r0, [pc, #228]	; (6c8 <main+0x274>)
     5e2:	f002 f895 	bl	2710 <printk>
                if (sequence == '0' || sequence == '1' || sequence == '3')
     5e6:	7823      	ldrb	r3, [r4, #0]
     5e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
     5ec:	42aa      	cmp	r2, r5
     5ee:	d99a      	bls.n	526 <main+0xd2>
     5f0:	2b33      	cmp	r3, #51	; 0x33
     5f2:	d098      	beq.n	526 <main+0xd2>
                k_sleep(K_MSEC(TIME));
     5f4:	f001 fe32 	bl	225c <k_sleep.constprop.0>
                printk("Current Sequence [%c]\n", sequence);
     5f8:	7821      	ldrb	r1, [r4, #0]
     5fa:	4833      	ldr	r0, [pc, #204]	; (6c8 <main+0x274>)
     5fc:	f002 f888 	bl	2710 <printk>
                if (sequence == '0' || sequence == '1' || sequence == '3')
     600:	7823      	ldrb	r3, [r4, #0]
     602:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
     606:	42aa      	cmp	r2, r5
     608:	d98d      	bls.n	526 <main+0xd2>
     60a:	2b33      	cmp	r3, #51	; 0x33
     60c:	d08b      	beq.n	526 <main+0xd2>
                turn_leds(&led0, &led1, &led2, &led3, 1, 0, 0, 1);
     60e:	e9cd 6502 	strd	r6, r5, [sp, #8]
     612:	e7c6      	b.n	5a2 <main+0x14e>
            printk("Current Sequence [%c] | Value Sequence_3 [%d]\n", sequence, activate_sequence3);
     614:	f8d8 2000 	ldr.w	r2, [r8]
     618:	4830      	ldr	r0, [pc, #192]	; (6dc <main+0x288>)
     61a:	2133      	movs	r1, #51	; 0x33
     61c:	f002 f878 	bl	2710 <printk>
            if (activate_sequence3 == -1)
     620:	f8d8 3000 	ldr.w	r3, [r8]
     624:	1c5a      	adds	r2, r3, #1
     626:	d123      	bne.n	670 <main+0x21c>
                turn_leds(&led0, &led1, &led2, &led3, 0, 0, 1, 1);
     628:	2501      	movs	r5, #1
     62a:	2600      	movs	r6, #0
     62c:	4b18      	ldr	r3, [pc, #96]	; (690 <main+0x23c>)
     62e:	4a17      	ldr	r2, [pc, #92]	; (68c <main+0x238>)
     630:	4915      	ldr	r1, [pc, #84]	; (688 <main+0x234>)
     632:	4814      	ldr	r0, [pc, #80]	; (684 <main+0x230>)
     634:	e9cd 5502 	strd	r5, r5, [sp, #8]
     638:	e9cd 6600 	strd	r6, r6, [sp]
     63c:	f001 fe4c 	bl	22d8 <turn_leds>
                printk("Current Sequence [%c]\n", sequence);
     640:	7821      	ldrb	r1, [r4, #0]
     642:	4821      	ldr	r0, [pc, #132]	; (6c8 <main+0x274>)
     644:	f002 f864 	bl	2710 <printk>
                if (sequence == '0' || sequence == '1' || sequence == '2')
     648:	7823      	ldrb	r3, [r4, #0]
     64a:	3b30      	subs	r3, #48	; 0x30
     64c:	2b02      	cmp	r3, #2
     64e:	f67f af6a 	bls.w	526 <main+0xd2>
                k_sleep(K_MSEC(TIME));
     652:	f001 fe03 	bl	225c <k_sleep.constprop.0>
                printk("Current Sequence [%c]\n", sequence);
     656:	7821      	ldrb	r1, [r4, #0]
     658:	481b      	ldr	r0, [pc, #108]	; (6c8 <main+0x274>)
     65a:	f002 f859 	bl	2710 <printk>
                if (sequence == '0' || sequence == '1' || sequence == '2')
     65e:	7823      	ldrb	r3, [r4, #0]
     660:	3b30      	subs	r3, #48	; 0x30
     662:	2b02      	cmp	r3, #2
     664:	f67f af5f 	bls.w	526 <main+0xd2>
                turn_leds(&led0, &led1, &led2, &led3, 1, 1, 0, 0);
     668:	e9cd 6602 	strd	r6, r6, [sp, #8]
     66c:	9501      	str	r5, [sp, #4]
     66e:	e799      	b.n	5a4 <main+0x150>
            }
          
            else if (activate_sequence3 == 0)
     670:	2b00      	cmp	r3, #0
     672:	f47f af34 	bne.w	4de <main+0x8a>
     676:	e756      	b.n	526 <main+0xd2>
     678:	000030f8 	.word	0x000030f8
     67c:	20000f54 	.word	0x20000f54
     680:	0000310c 	.word	0x0000310c
     684:	20000068 	.word	0x20000068
     688:	20000074 	.word	0x20000074
     68c:	20000080 	.word	0x20000080
     690:	2000008c 	.word	0x2000008c
     694:	00003113 	.word	0x00003113
     698:	0000311c 	.word	0x0000311c
     69c:	000003c5 	.word	0x000003c5
     6a0:	20000018 	.word	0x20000018
     6a4:	000003e9 	.word	0x000003e9
     6a8:	2000002c 	.word	0x2000002c
     6ac:	0000040d 	.word	0x0000040d
     6b0:	20000040 	.word	0x20000040
     6b4:	00000431 	.word	0x00000431
     6b8:	20000054 	.word	0x20000054
     6bc:	00003136 	.word	0x00003136
     6c0:	20000008 	.word	0x20000008
     6c4:	00003142 	.word	0x00003142
     6c8:	00003171 	.word	0x00003171
     6cc:	2000000c 	.word	0x2000000c
     6d0:	00003188 	.word	0x00003188
     6d4:	20000010 	.word	0x20000010
     6d8:	000031b7 	.word	0x000031b7
     6dc:	000031e6 	.word	0x000031e6
     6e0:	20000014 	.word	0x20000014

000006e4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     6e4:	680b      	ldr	r3, [r1, #0]
     6e6:	3301      	adds	r3, #1
     6e8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     6ea:	4b01      	ldr	r3, [pc, #4]	; (6f0 <char_out+0xc>)
     6ec:	681b      	ldr	r3, [r3, #0]
     6ee:	4718      	bx	r3
     6f0:	20000f38 	.word	0x20000f38

000006f4 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6f8:	b085      	sub	sp, #20
     6fa:	469b      	mov	fp, r3
     6fc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     6fe:	f8df 9088 	ldr.w	r9, [pc, #136]	; 788 <_printk_dec_ulong+0x94>
     702:	2c01      	cmp	r4, #1
     704:	bfb8      	it	lt
     706:	2401      	movlt	r4, #1
     708:	2b01      	cmp	r3, #1
     70a:	bf0c      	ite	eq
     70c:	2330      	moveq	r3, #48	; 0x30
     70e:	2320      	movne	r3, #32
     710:	4616      	mov	r6, r2
     712:	4682      	mov	sl, r0
     714:	4688      	mov	r8, r1
     716:	9302      	str	r3, [sp, #8]
     718:	2501      	movs	r5, #1
     71a:	270a      	movs	r7, #10
     71c:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
     71e:	fbb6 f3f9 	udiv	r3, r6, r9
     722:	9301      	str	r3, [sp, #4]
     724:	b90a      	cbnz	r2, 72a <_printk_dec_ulong+0x36>
     726:	45b1      	cmp	r9, r6
     728:	d81d      	bhi.n	766 <_printk_dec_ulong+0x72>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
     72a:	9b01      	ldr	r3, [sp, #4]
     72c:	4641      	mov	r1, r8
     72e:	f103 0030 	add.w	r0, r3, #48	; 0x30
     732:	47d0      	blx	sl
			digits++;
     734:	3501      	adds	r5, #1
			found_largest_digit = 1;
     736:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
     738:	9b01      	ldr	r3, [sp, #4]
		remaining--;
     73a:	3f01      	subs	r7, #1
	while (pos >= 10) {
     73c:	2f01      	cmp	r7, #1
		remainder %= pos;
     73e:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
     742:	f04f 030a 	mov.w	r3, #10
     746:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
     74a:	d1e8      	bne.n	71e <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
     74c:	4641      	mov	r1, r8
     74e:	f106 0030 	add.w	r0, r6, #48	; 0x30
     752:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
     754:	f1bb 0f03 	cmp.w	fp, #3
     758:	d102      	bne.n	760 <_printk_dec_ulong+0x6c>
		remaining = min_width - digits;
     75a:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
     75c:	2c00      	cmp	r4, #0
     75e:	dc0e      	bgt.n	77e <_printk_dec_ulong+0x8a>
			out(' ', ctx);
		}
	}
}
     760:	b005      	add	sp, #20
     762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     766:	42bc      	cmp	r4, r7
     768:	dbe6      	blt.n	738 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     76a:	f1bb 0f02 	cmp.w	fp, #2
     76e:	d8e3      	bhi.n	738 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     770:	4641      	mov	r1, r8
     772:	9802      	ldr	r0, [sp, #8]
     774:	9203      	str	r2, [sp, #12]
			digits++;
     776:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     778:	47d0      	blx	sl
			digits++;
     77a:	9a03      	ldr	r2, [sp, #12]
     77c:	e7dc      	b.n	738 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     77e:	4641      	mov	r1, r8
     780:	2020      	movs	r0, #32
     782:	47d0      	blx	sl
     784:	3c01      	subs	r4, #1
     786:	e7e9      	b.n	75c <_printk_dec_ulong+0x68>
     788:	3b9aca00 	.word	0x3b9aca00

0000078c <__printk_hook_install>:
	_char_out = fn;
     78c:	4b01      	ldr	r3, [pc, #4]	; (794 <__printk_hook_install+0x8>)
     78e:	6018      	str	r0, [r3, #0]
}
     790:	4770      	bx	lr
     792:	bf00      	nop
     794:	20000f38 	.word	0x20000f38

00000798 <vprintk>:
{
     798:	b507      	push	{r0, r1, r2, lr}
	struct out_context ctx = { 0 };
     79a:	2300      	movs	r3, #0
     79c:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
     79e:	4602      	mov	r2, r0
     7a0:	460b      	mov	r3, r1
     7a2:	4803      	ldr	r0, [pc, #12]	; (7b0 <vprintk+0x18>)
     7a4:	a901      	add	r1, sp, #4
     7a6:	f001 fe43 	bl	2430 <z_vprintk>
}
     7aa:	b003      	add	sp, #12
     7ac:	f85d fb04 	ldr.w	pc, [sp], #4
     7b0:	000006e5 	.word	0x000006e5

000007b4 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
     7b4:	280a      	cmp	r0, #10
{
     7b6:	b538      	push	{r3, r4, r5, lr}
     7b8:	4604      	mov	r4, r0
     7ba:	4d07      	ldr	r5, [pc, #28]	; (7d8 <console_out+0x24>)
	if ('\n' == c) {
     7bc:	d104      	bne.n	7c8 <console_out+0x14>
     7be:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
     7c0:	6843      	ldr	r3, [r0, #4]
     7c2:	210d      	movs	r1, #13
     7c4:	685b      	ldr	r3, [r3, #4]
     7c6:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
     7c8:	6828      	ldr	r0, [r5, #0]
     7ca:	6843      	ldr	r3, [r0, #4]
     7cc:	b2e1      	uxtb	r1, r4
     7ce:	685b      	ldr	r3, [r3, #4]
     7d0:	4798      	blx	r3

	return c;
}
     7d2:	4620      	mov	r0, r4
     7d4:	bd38      	pop	{r3, r4, r5, pc}
     7d6:	bf00      	nop
     7d8:	20000098 	.word	0x20000098

000007dc <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
     7dc:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
     7de:	4c04      	ldr	r4, [pc, #16]	; (7f0 <uart_console_hook_install+0x14>)
     7e0:	4620      	mov	r0, r4
     7e2:	f000 fc07 	bl	ff4 <__stdout_hook_install>
	__printk_hook_install(console_out);
     7e6:	4620      	mov	r0, r4
}
     7e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
     7ec:	f7ff bfce 	b.w	78c <__printk_hook_install>
     7f0:	000007b5 	.word	0x000007b5

000007f4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     7f4:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     7f6:	4804      	ldr	r0, [pc, #16]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     7f8:	f001 f81c 	bl	1834 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     7fc:	4b03      	ldr	r3, [pc, #12]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
     7fe:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
     800:	f7ff ffec 	bl	7dc <uart_console_hook_install>

	return 0;
}
     804:	2000      	movs	r0, #0
     806:	bd08      	pop	{r3, pc}
     808:	00003215 	.word	0x00003215
     80c:	20000098 	.word	0x20000098

00000810 <nrf_power_clock_isr>:
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     810:	4b15      	ldr	r3, [pc, #84]	; (868 <nrf_power_clock_isr+0x58>)
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
     812:	b507      	push	{r0, r1, r2, lr}
     814:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     816:	b182      	cbz	r2, 83a <nrf_power_clock_isr+0x2a>
    return p_reg->INTENSET & mask;
     818:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     81c:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     820:	07d1      	lsls	r1, r2, #31
     822:	d50a      	bpl.n	83a <nrf_power_clock_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     824:	2200      	movs	r2, #0
     826:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
     828:	681b      	ldr	r3, [r3, #0]
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
     82a:	4810      	ldr	r0, [pc, #64]	; (86c <nrf_power_clock_isr+0x5c>)
     82c:	9300      	str	r3, [sp, #0]
    (void)dummy;
     82e:	9b00      	ldr	r3, [sp, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
     830:	6883      	ldr	r3, [r0, #8]
     832:	7a5b      	ldrb	r3, [r3, #9]
     834:	b90b      	cbnz	r3, 83a <nrf_power_clock_isr+0x2a>
			clkstarted_handle(hfclk_dev);
     836:	f001 ff88 	bl	274a <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     83a:	4b0d      	ldr	r3, [pc, #52]	; (870 <nrf_power_clock_isr+0x60>)
     83c:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     83e:	b182      	cbz	r2, 862 <nrf_power_clock_isr+0x52>
    return p_reg->INTENSET & mask;
     840:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     844:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     848:	0792      	lsls	r2, r2, #30
     84a:	d50a      	bpl.n	862 <nrf_power_clock_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     84c:	2200      	movs	r2, #0
     84e:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
     850:	681b      	ldr	r3, [r3, #0]
     852:	9301      	str	r3, [sp, #4]
    (void)dummy;
     854:	9b01      	ldr	r3, [sp, #4]

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
     856:	4807      	ldr	r0, [pc, #28]	; (874 <nrf_power_clock_isr+0x64>)
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
     858:	b003      	add	sp, #12
     85a:	f85d eb04 	ldr.w	lr, [sp], #4
		clkstarted_handle(lfclk_dev);
     85e:	f001 bf74 	b.w	274a <clkstarted_handle>
}
     862:	b003      	add	sp, #12
     864:	f85d fb04 	ldr.w	pc, [sp], #4
     868:	40000100 	.word	0x40000100
     86c:	20000f7c 	.word	0x20000f7c
     870:	40000104 	.word	0x40000104
     874:	20000f88 	.word	0x20000f88

00000878 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
     878:	4b0d      	ldr	r3, [pc, #52]	; (8b0 <rtc1_nrf_isr+0x38>)
     87a:	2200      	movs	r2, #0
     87c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     880:	f04f 0220 	mov.w	r2, #32
     884:	f3ef 8111 	mrs	r1, BASEPRI
     888:	f382 8811 	msr	BASEPRI, r2
     88c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
     890:	4a08      	ldr	r2, [pc, #32]	; (8b4 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
     892:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
     896:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
     898:	1ac0      	subs	r0, r0, r3
     89a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
     89e:	4403      	add	r3, r0
     8a0:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     8a2:	f381 8811 	msr	BASEPRI, r1
     8a6:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
     8aa:	f001 bc4f 	b.w	214c <z_clock_announce>
     8ae:	bf00      	nop
     8b0:	40011000 	.word	0x40011000
     8b4:	200000b4 	.word	0x200000b4

000008b8 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
     8b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
     8ba:	481c      	ldr	r0, [pc, #112]	; (92c <z_clock_driver_init+0x74>)
     8bc:	f000 ffba 	bl	1834 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
     8c0:	b380      	cbz	r0, 924 <z_clock_driver_init+0x6c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
     8c2:	6843      	ldr	r3, [r0, #4]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
     8c4:	4d1a      	ldr	r5, [pc, #104]	; (930 <z_clock_driver_init+0x78>)
     8c6:	681b      	ldr	r3, [r3, #0]
     8c8:	2100      	movs	r1, #0
     8ca:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
     8cc:	2601      	movs	r6, #1
    p_reg->PRESCALER = val;
     8ce:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
     8d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
     8d4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
     8d8:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
     8dc:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     8e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     8e4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     8e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     8ec:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
     8ee:	681b      	ldr	r3, [r3, #0]
     8f0:	9301      	str	r3, [sp, #4]
    (void)dummy;
     8f2:	9b01      	ldr	r3, [sp, #4]
     8f4:	4b0f      	ldr	r3, [pc, #60]	; (934 <z_clock_driver_init+0x7c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
     8f6:	4631      	mov	r1, r6
     8f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     8fc:	2011      	movs	r0, #17
     8fe:	4622      	mov	r2, r4
     900:	f000 f8fe 	bl	b00 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
     904:	2011      	movs	r0, #17
     906:	f000 f8eb 	bl	ae0 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
     90a:	4b0b      	ldr	r3, [pc, #44]	; (938 <z_clock_driver_init+0x80>)
     90c:	601e      	str	r6, [r3, #0]
     90e:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
     910:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
     914:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     916:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     91a:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	}

	return 0;
     91e:	4620      	mov	r0, r4
}
     920:	b002      	add	sp, #8
     922:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
     924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     928:	e7fa      	b.n	920 <z_clock_driver_init+0x68>
     92a:	bf00      	nop
     92c:	0000321c 	.word	0x0000321c
     930:	40011000 	.word	0x40011000
     934:	e000e100 	.word	0xe000e100
     938:	40011008 	.word	0x40011008

0000093c <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
     93c:	b5f0      	push	{r4, r5, r6, r7, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
     93e:	4e25      	ldr	r6, [pc, #148]	; (9d4 <z_clock_set_timeout+0x98>)
     940:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
     944:	bf08      	it	eq
     946:	4630      	moveq	r0, r6
	__asm__ volatile(
     948:	f04f 0320 	mov.w	r3, #32
     94c:	f3ef 8511 	mrs	r5, BASEPRI
     950:	f383 8811 	msr	BASEPRI, r3
     954:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     958:	491f      	ldr	r1, [pc, #124]	; (9d8 <z_clock_set_timeout+0x9c>)
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
     95a:	4b20      	ldr	r3, [pc, #128]	; (9dc <z_clock_set_timeout+0xa0>)
     95c:	f8d1 4504 	ldr.w	r4, [r1, #1284]	; 0x504
     960:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
     962:	1ae2      	subs	r2, r4, r3
     964:	f022 477f 	bic.w	r7, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
     968:	0212      	lsls	r2, r2, #8
     96a:	d419      	bmi.n	9a0 <z_clock_set_timeout+0x64>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
     96c:	1e42      	subs	r2, r0, #1
     96e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
     972:	42b2      	cmp	r2, r6
     974:	bfa8      	it	ge
     976:	4632      	movge	r2, r6
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
     978:	1c78      	adds	r0, r7, #1
     97a:	4410      	add	r0, r2
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
     97c:	42b0      	cmp	r0, r6
     97e:	bf94      	ite	ls
     980:	1818      	addls	r0, r3, r0
     982:	1998      	addhi	r0, r3, r6
	return (a - b) & COUNTER_MAX;
     984:	1b04      	subs	r4, r0, r4
     986:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
     98a:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
     98e:	2c02      	cmp	r4, #2
    p_reg->CC[ch] = cc_val;
     990:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
     994:	d906      	bls.n	9a4 <z_clock_set_timeout+0x68>
	__asm__ volatile(
     996:	f385 8811 	msr	BASEPRI, r5
     99a:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
     99e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticks = 0;
     9a0:	2200      	movs	r2, #0
     9a2:	e7e9      	b.n	978 <z_clock_set_timeout+0x3c>
     return p_reg->COUNTER;
     9a4:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
     9a8:	4a0d      	ldr	r2, [pc, #52]	; (9e0 <z_clock_set_timeout+0xa4>)
	return (a - b) & COUNTER_MAX;
     9aa:	1ac3      	subs	r3, r0, r3
     9ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
     9b0:	1e5c      	subs	r4, r3, #1
     9b2:	4294      	cmp	r4, r2
     9b4:	d905      	bls.n	9c2 <z_clock_set_timeout+0x86>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     9b6:	4b0b      	ldr	r3, [pc, #44]	; (9e4 <z_clock_set_timeout+0xa8>)
     9b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     9bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
     9c0:	e7e9      	b.n	996 <z_clock_set_timeout+0x5a>
		} else if (dt == 1) {
     9c2:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
     9c4:	bf02      	ittt	eq
     9c6:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     9c8:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     9cc:	f8c1 0540 	streq.w	r0, [r1, #1344]	; 0x540
     9d0:	e7e1      	b.n	996 <z_clock_set_timeout+0x5a>
     9d2:	bf00      	nop
     9d4:	00fffffe 	.word	0x00fffffe
     9d8:	40011000 	.word	0x40011000
     9dc:	200000b4 	.word	0x200000b4
     9e0:	007ffffe 	.word	0x007ffffe
     9e4:	e000e100 	.word	0xe000e100

000009e8 <z_clock_elapsed>:
	__asm__ volatile(
     9e8:	f04f 0220 	mov.w	r2, #32
     9ec:	f3ef 8311 	mrs	r3, BASEPRI
     9f0:	f382 8811 	msr	BASEPRI, r2
     9f4:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     9f8:	4a06      	ldr	r2, [pc, #24]	; (a14 <z_clock_elapsed+0x2c>)
     9fa:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
     9fe:	4a06      	ldr	r2, [pc, #24]	; (a18 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
     a00:	6812      	ldr	r2, [r2, #0]
     a02:	1a80      	subs	r0, r0, r2
     a04:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
     a08:	f383 8811 	msr	BASEPRI, r3
     a0c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
     a10:	4770      	bx	lr
     a12:	bf00      	nop
     a14:	40011000 	.word	0x40011000
     a18:	200000b4 	.word	0x200000b4

00000a1c <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     a1c:	4804      	ldr	r0, [pc, #16]	; (a30 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     a1e:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
     a20:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
     a22:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     a24:	d003      	beq.n	a2e <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     a26:	4903      	ldr	r1, [pc, #12]	; (a34 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     a2c:	600a      	str	r2, [r1, #0]

00000a2e <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
     a2e:	4770      	bx	lr
    ldr r0, =_kernel
     a30:	200001b0 	.word	0x200001b0
    ldr r1, =_SCS_ICSR
     a34:	e000ed04 	.word	0xe000ed04

00000a38 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     a38:	4a09      	ldr	r2, [pc, #36]	; (a60 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
     a3a:	490a      	ldr	r1, [pc, #40]	; (a64 <arch_swap+0x2c>)
	_current->arch.basepri = key;
     a3c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     a3e:	6809      	ldr	r1, [r1, #0]
     a40:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     a42:	4909      	ldr	r1, [pc, #36]	; (a68 <arch_swap+0x30>)
	_current->arch.basepri = key;
     a44:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     a46:	684b      	ldr	r3, [r1, #4]
     a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     a4c:	604b      	str	r3, [r1, #4]
     a4e:	2300      	movs	r3, #0
     a50:	f383 8811 	msr	BASEPRI, r3
     a54:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
     a58:	6893      	ldr	r3, [r2, #8]
}
     a5a:	6e98      	ldr	r0, [r3, #104]	; 0x68
     a5c:	4770      	bx	lr
     a5e:	bf00      	nop
     a60:	200001b0 	.word	0x200001b0
     a64:	000030a8 	.word	0x000030a8
     a68:	e000ed00 	.word	0xe000ed00

00000a6c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     a6c:	4912      	ldr	r1, [pc, #72]	; (ab8 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     a6e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     a70:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
     a74:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
     a76:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     a7a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     a7e:	2020      	movs	r0, #32
    msr BASEPRI, r0
     a80:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
     a84:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
     a88:	4f0c      	ldr	r7, [pc, #48]	; (abc <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     a8a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
     a8e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
     a90:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
     a92:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
     a94:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
     a96:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     a98:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     a9a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
     a9e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
     aa0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
     aa2:	f001 ff2a 	bl	28fa <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
     aa6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     aaa:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     aae:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
     ab2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
     ab6:	4770      	bx	lr
    ldr r1, =_kernel
     ab8:	200001b0 	.word	0x200001b0
    ldr v4, =_SCS_ICSR
     abc:	e000ed04 	.word	0xe000ed04

00000ac0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
     ac0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     ac4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     ac6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     aca:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     ace:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
     ad0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
     ad4:	2902      	cmp	r1, #2
    beq _oops
     ad6:	d0ff      	beq.n	ad8 <_oops>

00000ad8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
     ad8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
     ada:	f001 ff03 	bl	28e4 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
     ade:	bd01      	pop	{r0, pc}

00000ae0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     ae0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     ae2:	2b00      	cmp	r3, #0
     ae4:	db08      	blt.n	af8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ae6:	2201      	movs	r2, #1
     ae8:	f000 001f 	and.w	r0, r0, #31
     aec:	fa02 f000 	lsl.w	r0, r2, r0
     af0:	095b      	lsrs	r3, r3, #5
     af2:	4a02      	ldr	r2, [pc, #8]	; (afc <arch_irq_enable+0x1c>)
     af4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
     af8:	4770      	bx	lr
     afa:	bf00      	nop
     afc:	e000e100 	.word	0xe000e100

00000b00 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     b00:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
     b02:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     b04:	bfa8      	it	ge
     b06:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
     b0a:	f101 0101 	add.w	r1, r1, #1
     b0e:	ea4f 1141 	mov.w	r1, r1, lsl #5
     b12:	bfae      	itee	ge
     b14:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     b18:	f000 000f 	andlt.w	r0, r0, #15
     b1c:	4b03      	ldrlt	r3, [pc, #12]	; (b2c <z_arm_irq_priority_set+0x2c>)
     b1e:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     b20:	bfac      	ite	ge
     b22:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     b26:	5419      	strblt	r1, [r3, r0]
}
     b28:	4770      	bx	lr
     b2a:	bf00      	nop
     b2c:	e000ed14 	.word	0xe000ed14

00000b30 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
     b30:	b573      	push	{r0, r1, r4, r5, r6, lr}
     b32:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
     b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     b36:	9300      	str	r3, [sp, #0]
	stackEnd = pStackMem + stackSize;
     b38:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
     b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
     b3c:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
     b3e:	f002 f91d 	bl	2d7c <z_new_thread_init>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     b42:	f1a4 0320 	sub.w	r3, r4, #32
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
     b46:	4a0a      	ldr	r2, [pc, #40]	; (b70 <arch_new_thread+0x40>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     b48:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
     b4c:	f022 0201 	bic.w	r2, r2, #1
     b50:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
     b52:	9a06      	ldr	r2, [sp, #24]
     b54:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
     b56:	9a07      	ldr	r2, [sp, #28]
     b58:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
     b5a:	9a08      	ldr	r2, [sp, #32]
     b5c:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
     b5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	pInitCtx->basic.a1 = (u32_t)pEntry;
     b62:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.xpsr =
     b64:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
     b66:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
     b68:	2300      	movs	r3, #0
     b6a:	666b      	str	r3, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
     b6c:	b002      	add	sp, #8
     b6e:	bd70      	pop	{r4, r5, r6, pc}
     b70:	000023fd 	.word	0x000023fd

00000b74 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
     b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b76:	4605      	mov	r5, r0
     b78:	460c      	mov	r4, r1
     b7a:	4617      	mov	r7, r2
     b7c:	461e      	mov	r6, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
     b7e:	f000 f979 	bl	e74 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
     b82:	4b0a      	ldr	r3, [pc, #40]	; (bac <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
     b84:	443c      	add	r4, r7
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
     b86:	4628      	mov	r0, r5
	_current = main_thread;
     b88:	609d      	str	r5, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
     b8a:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
     b8e:	f001 feb4 	bl	28fa <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
     b92:	4630      	mov	r0, r6
     b94:	f384 8809 	msr	PSP, r4
     b98:	2100      	movs	r1, #0
     b9a:	b663      	cpsie	if
     b9c:	f381 8811 	msr	BASEPRI, r1
     ba0:	f3bf 8f6f 	isb	sy
     ba4:	2200      	movs	r2, #0
     ba6:	2300      	movs	r3, #0
     ba8:	f001 fc28 	bl	23fc <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
     bac:	200001b0 	.word	0x200001b0

00000bb0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
     bb0:	4901      	ldr	r1, [pc, #4]	; (bb8 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
     bb2:	2210      	movs	r2, #16
	str r2, [r1]
     bb4:	600a      	str	r2, [r1, #0]
#endif
	bx lr
     bb6:	4770      	bx	lr
	ldr r1, =_SCB_SCR
     bb8:	e000ed10 	.word	0xe000ed10

00000bbc <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
     bbc:	4040      	eors	r0, r0
	msr BASEPRI, r0
     bbe:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
     bc2:	bf30      	wfi

	bx lr
     bc4:	4770      	bx	lr
     bc6:	bf00      	nop

00000bc8 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
     bc8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
     bcc:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
     bd0:	4672      	mov	r2, lr

	push {r0, lr}
     bd2:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
     bd4:	f000 f8a0 	bl	d18 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
     bd8:	bd01      	pop	{r0, pc}
     bda:	bf00      	nop

00000bdc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
     bdc:	bf30      	wfi
    b z_SysNmiOnReset
     bde:	f7ff bffd 	b.w	bdc <z_SysNmiOnReset>
     be2:	bf00      	nop

00000be4 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
     be4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     be6:	4b08      	ldr	r3, [pc, #32]	; (c08 <z_arm_prep_c+0x24>)
     be8:	4a08      	ldr	r2, [pc, #32]	; (c0c <z_arm_prep_c+0x28>)
     bea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     bee:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     bf0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     bf4:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
     bf8:	f000 fe5c 	bl	18b4 <z_bss_zero>
	z_data_copy();
     bfc:	f000 fe64 	bl	18c8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
     c00:	f000 f906 	bl	e10 <z_arm_int_lib_init>
	z_cstart();
     c04:	f000 fe98 	bl	1938 <z_cstart>
     c08:	00000000 	.word	0x00000000
     c0c:	e000ed00 	.word	0xe000ed00

00000c10 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
     c10:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
     c12:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
     c14:	4a0b      	ldr	r2, [pc, #44]	; (c44 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
     c16:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
     c18:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
     c1a:	bf1e      	ittt	ne
	movne	r1, #0
     c1c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
     c1e:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
     c20:	f002 f827 	blne	2c72 <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
     c24:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
     c26:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
     c2a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
     c2e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
     c32:	4905      	ldr	r1, [pc, #20]	; (c48 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
     c34:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
     c36:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
     c38:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
     c3a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
     c3e:	4903      	ldr	r1, [pc, #12]	; (c4c <_isr_wrapper+0x3c>)
	bx r1
     c40:	4708      	bx	r1
     c42:	0000      	.short	0x0000
	ldr r2, =_kernel
     c44:	200001b0 	.word	0x200001b0
	ldr r1, =_sw_isr_table
     c48:	00002e6c 	.word	0x00002e6c
	ldr r1, =z_arm_int_exit
     c4c:	00000a1d 	.word	0x00000a1d

00000c50 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
     c50:	f001 feb6 	bl	29c0 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     c54:	2020      	movs	r0, #32
    msr BASEPRI, r0
     c56:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
     c5a:	4808      	ldr	r0, [pc, #32]	; (c7c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
     c5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
     c60:	1840      	adds	r0, r0, r1
    msr PSP, r0
     c62:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
     c66:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
     c6a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
     c6c:	4308      	orrs	r0, r1
    msr CONTROL, r0
     c6e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
     c72:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
     c76:	f7ff ffb5 	bl	be4 <z_arm_prep_c>
     c7a:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
     c7c:	20000738 	.word	0x20000738

00000c80 <mem_manage_fault.isra.2>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
     c80:	4b0c      	ldr	r3, [pc, #48]	; (cb4 <mem_manage_fault.isra.2+0x34>)
     c82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
     c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
     c86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c88:	0792      	lsls	r2, r2, #30
     c8a:	d508      	bpl.n	c9e <mem_manage_fault.isra.2+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
     c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
     c8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c90:	0612      	lsls	r2, r2, #24
     c92:	d504      	bpl.n	c9e <mem_manage_fault.isra.2+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
     c94:	b118      	cbz	r0, c9e <mem_manage_fault.isra.2+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
     c96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
     c9c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
     c9e:	4b05      	ldr	r3, [pc, #20]	; (cb4 <mem_manage_fault.isra.2+0x34>)
     ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
     ca2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
     ca6:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
     ca8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
     caa:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
     cae:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
     cb0:	7008      	strb	r0, [r1, #0]

	return reason;
}
     cb2:	4770      	bx	lr
     cb4:	e000ed00 	.word	0xe000ed00

00000cb8 <bus_fault.isra.3>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     cb8:	4b0d      	ldr	r3, [pc, #52]	; (cf0 <bus_fault.isra.3+0x38>)
     cba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
     cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     cbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     cc0:	0592      	lsls	r2, r2, #22
     cc2:	d508      	bpl.n	cd6 <bus_fault.isra.3+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
     cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
     cc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     cc8:	0412      	lsls	r2, r2, #16
     cca:	d504      	bpl.n	cd6 <bus_fault.isra.3+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
     ccc:	b118      	cbz	r0, cd6 <bus_fault.isra.3+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
     cce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     cd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
     cd4:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     cd6:	4b06      	ldr	r3, [pc, #24]	; (cf0 <bus_fault.isra.3+0x38>)
     cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
     cda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     cdc:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
     cde:	bf58      	it	pl
     ce0:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
     ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
     ce4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
     ce6:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
     cea:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
     cec:	7008      	strb	r0, [r1, #0]

	return reason;
}
     cee:	4770      	bx	lr
     cf0:	e000ed00 	.word	0xe000ed00

00000cf4 <usage_fault.isra.4>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
     cf4:	4b07      	ldr	r3, [pc, #28]	; (d14 <usage_fault.isra.4+0x20>)
     cf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
     cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
     cfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
     cfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
     cfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
     d00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
     d02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     d04:	ea6f 4202 	mvn.w	r2, r2, lsl #16
     d08:	ea6f 4212 	mvn.w	r2, r2, lsr #16
     d0c:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
     d0e:	2000      	movs	r0, #0
     d10:	4770      	bx	lr
     d12:	bf00      	nop
     d14:	e000ed00 	.word	0xe000ed00

00000d18 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
     d18:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     d1a:	4b36      	ldr	r3, [pc, #216]	; (df4 <z_arm_fault+0xdc>)
     d1c:	685b      	ldr	r3, [r3, #4]
{
     d1e:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
     d24:	2500      	movs	r5, #0
     d26:	f385 8811 	msr	BASEPRI, r5
     d2a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
     d2e:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
     d32:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
     d36:	d112      	bne.n	d5e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
     d38:	f002 040c 	and.w	r4, r2, #12
     d3c:	2c08      	cmp	r4, #8
     d3e:	d00e      	beq.n	d5e <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
     d40:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
     d42:	bf4e      	itee	mi
     d44:	460e      	movmi	r6, r1
			ptr_esf = (z_arch_esf_t *)msp;
     d46:	4606      	movpl	r6, r0
			*nested_exc = true;
     d48:	2501      	movpl	r5, #1
	*recoverable = false;
     d4a:	2200      	movs	r2, #0
	switch (fault) {
     d4c:	3b03      	subs	r3, #3
	*recoverable = false;
     d4e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
     d52:	2b03      	cmp	r3, #3
     d54:	d847      	bhi.n	de6 <z_arm_fault+0xce>
     d56:	e8df f003 	tbb	[pc, r3]
     d5a:	3e04      	.short	0x3e04
     d5c:	3b42      	.short	0x3b42
		return NULL;
     d5e:	462e      	mov	r6, r5
     d60:	e7f3      	b.n	d4a <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
     d62:	4b24      	ldr	r3, [pc, #144]	; (df4 <z_arm_fault+0xdc>)
     d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     d66:	0792      	lsls	r2, r2, #30
     d68:	d43d      	bmi.n	de6 <z_arm_fault+0xce>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
     d6a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
     d6c:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
     d70:	d008      	beq.n	d84 <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
     d72:	3328      	adds	r3, #40	; 0x28
     d74:	781b      	ldrb	r3, [r3, #0]
     d76:	b1eb      	cbz	r3, db4 <z_arm_fault+0x9c>
			reason = mem_manage_fault(esf, 1, recoverable);
     d78:	f10d 0107 	add.w	r1, sp, #7
     d7c:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
     d7e:	f7ff ff7f 	bl	c80 <mem_manage_fault.isra.2>
		reason = usage_fault(esf);
     d82:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
     d84:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d88:	b993      	cbnz	r3, db0 <z_arm_fault+0x98>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
     d8a:	2220      	movs	r2, #32
     d8c:	4631      	mov	r1, r6
     d8e:	a802      	add	r0, sp, #8
     d90:	f001 fdc7 	bl	2922 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
     d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d96:	b345      	cbz	r5, dea <z_arm_fault+0xd2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
     d98:	f3c3 0208 	ubfx	r2, r3, #0, #9
     d9c:	b922      	cbnz	r2, da8 <z_arm_fault+0x90>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
     d9e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
     da2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
     da6:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
     da8:	a902      	add	r1, sp, #8
     daa:	4620      	mov	r0, r4
     dac:	f001 fd98 	bl	28e0 <z_arm_fatal_error>
}
     db0:	b00a      	add	sp, #40	; 0x28
     db2:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
     db4:	4b10      	ldr	r3, [pc, #64]	; (df8 <z_arm_fault+0xe0>)
     db6:	781b      	ldrb	r3, [r3, #0]
     db8:	b12b      	cbz	r3, dc6 <z_arm_fault+0xae>
			reason = bus_fault(esf, 1, recoverable);
     dba:	f10d 0107 	add.w	r1, sp, #7
     dbe:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
     dc0:	f7ff ff7a 	bl	cb8 <bus_fault.isra.3>
     dc4:	e7dd      	b.n	d82 <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
     dc6:	4b0d      	ldr	r3, [pc, #52]	; (dfc <z_arm_fault+0xe4>)
     dc8:	881c      	ldrh	r4, [r3, #0]
     dca:	b2a4      	uxth	r4, r4
     dcc:	2c00      	cmp	r4, #0
     dce:	d0d9      	beq.n	d84 <z_arm_fault+0x6c>
		reason = usage_fault(esf);
     dd0:	f7ff ff90 	bl	cf4 <usage_fault.isra.4>
     dd4:	e7d5      	b.n	d82 <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
     dd6:	f10d 0107 	add.w	r1, sp, #7
     dda:	2000      	movs	r0, #0
     ddc:	e7cf      	b.n	d7e <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
     dde:	f10d 0107 	add.w	r1, sp, #7
     de2:	2000      	movs	r0, #0
     de4:	e7ec      	b.n	dc0 <z_arm_fault+0xa8>
	u32_t reason = K_ERR_CPU_EXCEPTION;
     de6:	2400      	movs	r4, #0
     de8:	e7cc      	b.n	d84 <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
     dea:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
     dee:	f023 0301 	bic.w	r3, r3, #1
     df2:	e7d8      	b.n	da6 <z_arm_fault+0x8e>
     df4:	e000ed00 	.word	0xe000ed00
     df8:	e000ed29 	.word	0xe000ed29
     dfc:	e000ed2a 	.word	0xe000ed2a

00000e00 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
     e00:	4a02      	ldr	r2, [pc, #8]	; (e0c <z_arm_fault_init+0xc>)
     e02:	6953      	ldr	r3, [r2, #20]
     e04:	f043 0310 	orr.w	r3, r3, #16
     e08:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
     e0a:	4770      	bx	lr
     e0c:	e000ed00 	.word	0xe000ed00

00000e10 <z_arm_int_lib_init>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     e10:	4804      	ldr	r0, [pc, #16]	; (e24 <z_arm_int_lib_init+0x14>)
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
     e12:	2300      	movs	r3, #0
     e14:	2120      	movs	r1, #32
     e16:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     e18:	3301      	adds	r3, #1
     e1a:	2b27      	cmp	r3, #39	; 0x27
     e1c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     e20:	d1f9      	bne.n	e16 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     e22:	4770      	bx	lr
     e24:	e000e100 	.word	0xe000e100

00000e28 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
     e28:	b538      	push	{r3, r4, r5, lr}
     e2a:	4605      	mov	r5, r0
	__asm__ volatile(
     e2c:	f04f 0320 	mov.w	r3, #32
     e30:	f3ef 8411 	mrs	r4, BASEPRI
     e34:	f383 8811 	msr	BASEPRI, r3
     e38:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
     e3c:	f001 ffad 	bl	2d9a <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
     e40:	4b0a      	ldr	r3, [pc, #40]	; (e6c <z_impl_k_thread_abort+0x44>)
     e42:	689b      	ldr	r3, [r3, #8]
     e44:	42ab      	cmp	r3, r5
     e46:	d10b      	bne.n	e60 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
     e48:	4b09      	ldr	r3, [pc, #36]	; (e70 <z_impl_k_thread_abort+0x48>)
     e4a:	685a      	ldr	r2, [r3, #4]
     e4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
     e50:	b912      	cbnz	r2, e58 <z_impl_k_thread_abort+0x30>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
     e52:	4620      	mov	r0, r4
     e54:	f7ff fdf0 	bl	a38 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     e58:	685a      	ldr	r2, [r3, #4]
     e5a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
     e5e:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
     e60:	4620      	mov	r0, r4
}
     e62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
     e66:	f001 bf33 	b.w	2cd0 <z_reschedule_irqlock>
     e6a:	bf00      	nop
     e6c:	200001b0 	.word	0x200001b0
     e70:	e000ed00 	.word	0xe000ed00

00000e74 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
     e74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
     e76:	4b08      	ldr	r3, [pc, #32]	; (e98 <z_arm_configure_static_mpu_regions+0x24>)
     e78:	9301      	str	r3, [sp, #4]
     e7a:	4b08      	ldr	r3, [pc, #32]	; (e9c <z_arm_configure_static_mpu_regions+0x28>)
     e7c:	9302      	str	r3, [sp, #8]
     e7e:	4b08      	ldr	r3, [pc, #32]	; (ea0 <z_arm_configure_static_mpu_regions+0x2c>)
     e80:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
     e82:	ab01      	add	r3, sp, #4
     e84:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
     e86:	4a07      	ldr	r2, [pc, #28]	; (ea4 <z_arm_configure_static_mpu_regions+0x30>)
     e88:	4b07      	ldr	r3, [pc, #28]	; (ea8 <z_arm_configure_static_mpu_regions+0x34>)
     e8a:	2101      	movs	r1, #1
     e8c:	4668      	mov	r0, sp
     e8e:	f000 f891 	bl	fb4 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
     e92:	b005      	add	sp, #20
     e94:	f85d fb04 	ldr.w	pc, [sp], #4
     e98:	20000000 	.word	0x20000000
     e9c:	00000000 	.word	0x00000000
     ea0:	060b0000 	.word	0x060b0000
     ea4:	20000000 	.word	0x20000000
     ea8:	20010000 	.word	0x20010000

00000eac <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
     eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
     eae:	4f20      	ldr	r7, [pc, #128]	; (f30 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
     eb0:	2600      	movs	r6, #0
     eb2:	428e      	cmp	r6, r1
     eb4:	db01      	blt.n	eba <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
     eb6:	4610      	mov	r0, r2
     eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
     eba:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
     ebe:	f8dc 4004 	ldr.w	r4, [ip, #4]
     ec2:	b394      	cbz	r4, f2a <mpu_configure_regions+0x7e>
		if (do_sanity_check &&
     ec4:	b15b      	cbz	r3, ede <mpu_configure_regions+0x32>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
     ec6:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
     eca:	ea14 0f0e 	tst.w	r4, lr
     ece:	d11a      	bne.n	f06 <mpu_configure_regions+0x5a>
		&&
     ed0:	2c1f      	cmp	r4, #31
     ed2:	d918      	bls.n	f06 <mpu_configure_regions+0x5a>
		((part->start & (part->size - 1)) == 0U);
     ed4:	f8dc 5000 	ldr.w	r5, [ip]
		&&
     ed8:	ea1e 0f05 	tst.w	lr, r5
     edc:	d113      	bne.n	f06 <mpu_configure_regions+0x5a>
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
     ede:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
     ee0:	f8dc 5000 	ldr.w	r5, [ip]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
     ee4:	f8dc c008 	ldr.w	ip, [ip, #8]
		reg_index = mpu_configure_region(reg_index, regions[i]);
     ee8:	b2d2      	uxtb	r2, r2
     eea:	d90f      	bls.n	f0c <mpu_configure_regions+0x60>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
     eec:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
     ef0:	d80e      	bhi.n	f10 <mpu_configure_regions+0x64>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
     ef2:	3c01      	subs	r4, #1
     ef4:	fab4 f484 	clz	r4, r4
     ef8:	f1c4 041f 	rsb	r4, r4, #31
     efc:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
     efe:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
     f00:	ea4c 0404 	orr.w	r4, ip, r4
     f04:	d906      	bls.n	f14 <mpu_configure_regions+0x68>
			return -EINVAL;
     f06:	f06f 0215 	mvn.w	r2, #21
     f0a:	e7d4      	b.n	eb6 <mpu_configure_regions+0xa>
		return REGION_32B;
     f0c:	2408      	movs	r4, #8
     f0e:	e7f6      	b.n	efe <mpu_configure_regions+0x52>
		return REGION_4G;
     f10:	243e      	movs	r4, #62	; 0x3e
     f12:	e7f4      	b.n	efe <mpu_configure_regions+0x52>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     f14:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
     f18:	4315      	orrs	r5, r2
     f1a:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
     f1e:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
     f22:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     f24:	60fd      	str	r5, [r7, #12]
		reg_index++;
     f26:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
     f28:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
     f2a:	3601      	adds	r6, #1
     f2c:	e7c1      	b.n	eb2 <mpu_configure_regions+0x6>
     f2e:	bf00      	nop
     f30:	e000ed90 	.word	0xe000ed90

00000f34 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
     f34:	4b03      	ldr	r3, [pc, #12]	; (f44 <arm_core_mpu_enable+0x10>)
     f36:	2205      	movs	r2, #5
     f38:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
     f3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     f3e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
     f42:	4770      	bx	lr
     f44:	e000ed90 	.word	0xe000ed90

00000f48 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     f48:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
     f4c:	4b01      	ldr	r3, [pc, #4]	; (f54 <arm_core_mpu_disable+0xc>)
     f4e:	2200      	movs	r2, #0
     f50:	605a      	str	r2, [r3, #4]
}
     f52:	4770      	bx	lr
     f54:	e000ed90 	.word	0xe000ed90

00000f58 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
     f58:	4913      	ldr	r1, [pc, #76]	; (fa8 <arm_mpu_init+0x50>)
     f5a:	6808      	ldr	r0, [r1, #0]
     f5c:	2808      	cmp	r0, #8
{
     f5e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
     f60:	d81e      	bhi.n	fa0 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
     f62:	f7ff fff1 	bl	f48 <arm_core_mpu_disable>
	MPU->RNR = index;
     f66:	4c11      	ldr	r4, [pc, #68]	; (fac <arm_mpu_init+0x54>)
     f68:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
     f6a:	2200      	movs	r2, #0
     f6c:	4290      	cmp	r0, r2
     f6e:	f101 010c 	add.w	r1, r1, #12
     f72:	d105      	bne.n	f80 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
     f74:	4b0e      	ldr	r3, [pc, #56]	; (fb0 <arm_mpu_init+0x58>)
     f76:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
     f78:	f7ff ffdc 	bl	f34 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
     f7c:	2000      	movs	r0, #0
}
     f7e:	bd10      	pop	{r4, pc}
     f80:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     f82:	f851 3c0c 	ldr.w	r3, [r1, #-12]
     f86:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
     f8a:	4313      	orrs	r3, r2
     f8c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
     f90:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
     f92:	f851 3c04 	ldr.w	r3, [r1, #-4]
     f96:	f043 0301 	orr.w	r3, r3, #1
     f9a:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
     f9c:	3201      	adds	r2, #1
     f9e:	e7e5      	b.n	f6c <arm_mpu_init+0x14>
		return -1;
     fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     fa4:	e7eb      	b.n	f7e <arm_mpu_init+0x26>
     fa6:	bf00      	nop
     fa8:	0000303c 	.word	0x0000303c
     fac:	e000ed90 	.word	0xe000ed90
     fb0:	200001f0 	.word	0x200001f0

00000fb4 <arm_core_mpu_configure_static_mpu_regions>:
{
     fb4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
     fb6:	4c03      	ldr	r4, [pc, #12]	; (fc4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
     fb8:	2301      	movs	r3, #1
     fba:	7822      	ldrb	r2, [r4, #0]
     fbc:	f7ff ff76 	bl	eac <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
     fc0:	7020      	strb	r0, [r4, #0]
}
     fc2:	bd10      	pop	{r4, pc}
     fc4:	200001f0 	.word	0x200001f0

00000fc8 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
     fc8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
     fca:	4a08      	ldr	r2, [pc, #32]	; (fec <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
     fcc:	2300      	movs	r3, #0
     fce:	7812      	ldrb	r2, [r2, #0]
     fd0:	f7ff ff6c 	bl	eac <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
     fd4:	f110 0f16 	cmn.w	r0, #22
     fd8:	d003      	beq.n	fe2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
     fda:	4b05      	ldr	r3, [pc, #20]	; (ff0 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
     fdc:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
     fde:	2807      	cmp	r0, #7
     fe0:	dd00      	ble.n	fe4 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
     fe2:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
     fe4:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
     fe6:	611a      	str	r2, [r3, #16]
     fe8:	3001      	adds	r0, #1
     fea:	e7f8      	b.n	fde <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
     fec:	200001f0 	.word	0x200001f0
     ff0:	e000ed90 	.word	0xe000ed90

00000ff4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
     ff4:	4b01      	ldr	r3, [pc, #4]	; (ffc <__stdout_hook_install+0x8>)
     ff6:	6018      	str	r0, [r3, #0]
}
     ff8:	4770      	bx	lr
     ffa:	bf00      	nop
     ffc:	20000f3c 	.word	0x20000f3c

00001000 <nordicsemi_nrf52_init>:
    1000:	f04f 0320 	mov.w	r3, #32
    1004:	f3ef 8211 	mrs	r2, BASEPRI
    1008:	f383 8811 	msr	BASEPRI, r3
    100c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1010:	4906      	ldr	r1, [pc, #24]	; (102c <nordicsemi_nrf52_init+0x2c>)
    1012:	2301      	movs	r3, #1
    1014:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    1018:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    101c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    1020:	f382 8811 	msr	BASEPRI, r2
    1024:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1028:	2000      	movs	r0, #0
    102a:	4770      	bx	lr
    102c:	4001e000 	.word	0x4001e000

00001030 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    1030:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    1032:	4b09      	ldr	r3, [pc, #36]	; (1058 <gpio_nrfx_init+0x28>)
    1034:	781a      	ldrb	r2, [r3, #0]
    1036:	b96a      	cbnz	r2, 1054 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    1038:	2101      	movs	r1, #1
    103a:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    103c:	2006      	movs	r0, #6
    103e:	2105      	movs	r1, #5
    1040:	f7ff fd5e 	bl	b00 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
    1044:	2006      	movs	r0, #6
    1046:	f7ff fd4b 	bl	ae0 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    104a:	4b04      	ldr	r3, [pc, #16]	; (105c <gpio_nrfx_init+0x2c>)
    104c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1050:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    1054:	2000      	movs	r0, #0
    1056:	bd08      	pop	{r3, pc}
    1058:	200001f1 	.word	0x200001f1
    105c:	40006000 	.word	0x40006000

00001060 <gpiote_pin_int_cfg>:
{
    1060:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return port->config->config_info;
    1062:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    1064:	4d55      	ldr	r5, [pc, #340]	; (11bc <gpiote_pin_int_cfg+0x15c>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1066:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
    1068:	6882      	ldr	r2, [r0, #8]
    106a:	f8d5 4304 	ldr.w	r4, [r5, #772]	; 0x304
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    106e:	7918      	ldrb	r0, [r3, #4]
    1070:	f001 031f 	and.w	r3, r1, #31
    1074:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
    1078:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    107a:	2000      	movs	r0, #0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    107c:	f500 76a2 	add.w	r6, r0, #324	; 0x144
    1080:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
    1084:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    1088:	42b3      	cmp	r3, r6
    108a:	d175      	bne.n	1178 <gpiote_pin_int_cfg+0x118>
		    && (intenset & BIT(i))) {
    108c:	fa24 f600 	lsr.w	r6, r4, r0
    1090:	07f6      	lsls	r6, r6, #31
    1092:	d571      	bpl.n	1178 <gpiote_pin_int_cfg+0x118>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    1094:	0084      	lsls	r4, r0, #2
    1096:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    109a:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000
    109e:	f8d4 6510 	ldr.w	r6, [r4, #1296]	; 0x510
    10a2:	f026 0601 	bic.w	r6, r6, #1
    10a6:	f8c4 6510 	str.w	r6, [r4, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    10aa:	2401      	movs	r4, #1
    10ac:	fa04 f000 	lsl.w	r0, r4, r0
    p_reg->INTENCLR = mask;
    10b0:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    10b4:	009c      	lsls	r4, r3, #2
    10b6:	f104 44a0 	add.w	r4, r4, #1342177280	; 0x50000000
    10ba:	f8d4 0700 	ldr.w	r0, [r4, #1792]	; 0x700
    10be:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    10c2:	f8c4 0700 	str.w	r0, [r4, #1792]	; 0x700
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    10c6:	6890      	ldr	r0, [r2, #8]
    10c8:	40c8      	lsrs	r0, r1
    10ca:	f010 0001 	ands.w	r0, r0, #1
    10ce:	d051      	beq.n	1174 <gpiote_pin_int_cfg+0x114>
    10d0:	68d0      	ldr	r0, [r2, #12]
    10d2:	40c8      	lsrs	r0, r1
    10d4:	f010 0001 	ands.w	r0, r0, #1
    10d8:	d04c      	beq.n	1174 <gpiote_pin_int_cfg+0x114>
		if (data->trig_edge & BIT(pin)) {
    10da:	6950      	ldr	r0, [r2, #20]
    10dc:	40c8      	lsrs	r0, r1
    10de:	f010 0001 	ands.w	r0, r0, #1
    10e2:	d056      	beq.n	1192 <gpiote_pin_int_cfg+0x132>
			if (data->double_edge & BIT(pin)) {
    10e4:	6990      	ldr	r0, [r2, #24]
    10e6:	40c8      	lsrs	r0, r1
    10e8:	07c0      	lsls	r0, r0, #31
    10ea:	d44a      	bmi.n	1182 <gpiote_pin_int_cfg+0x122>
			} else if (((data->active_level & BIT(pin)) != 0U)
    10ec:	6910      	ldr	r0, [r2, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    10ee:	69d2      	ldr	r2, [r2, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
    10f0:	40c8      	lsrs	r0, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    10f2:	fa22 f101 	lsr.w	r1, r2, r1
			} else if (((data->active_level & BIT(pin)) != 0U)
    10f6:	f000 0001 	and.w	r0, r0, #1
    10fa:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    10fe:	4288      	cmp	r0, r1
    1100:	bf14      	ite	ne
    1102:	2101      	movne	r1, #1
    1104:	2102      	moveq	r1, #2
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    1106:	4d2d      	ldr	r5, [pc, #180]	; (11bc <gpiote_pin_int_cfg+0x15c>)
    1108:	2400      	movs	r4, #0
    110a:	f504 72a2 	add.w	r2, r4, #324	; 0x144
    110e:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    1112:	f010 0003 	ands.w	r0, r0, #3
    1116:	d136      	bne.n	1186 <gpiote_pin_int_cfg+0x126>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1118:	00a2      	lsls	r2, r4, #2
    111a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    111e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1122:	021b      	lsls	r3, r3, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1124:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1128:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    112c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1130:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
			nrf_gpiote_event_t evt =
    1134:	f104 0340 	add.w	r3, r4, #64	; 0x40
    1138:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    113c:	009b      	lsls	r3, r3, #2
    113e:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    1142:	b29b      	uxth	r3, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1144:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    1148:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    114c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1150:	4331      	orrs	r1, r6
    1152:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1156:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    1158:	681b      	ldr	r3, [r3, #0]
    115a:	9301      	str	r3, [sp, #4]
    (void)dummy;
    115c:	9b01      	ldr	r3, [sp, #4]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    115e:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    1162:	f043 0301 	orr.w	r3, r3, #1
    1166:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    116a:	2301      	movs	r3, #1
    116c:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENSET = mask;
    1170:	f8c5 4304 	str.w	r4, [r5, #772]	; 0x304
}
    1174:	b002      	add	sp, #8
    1176:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1178:	3001      	adds	r0, #1
    117a:	2808      	cmp	r0, #8
    117c:	f47f af7e 	bne.w	107c <gpiote_pin_int_cfg+0x1c>
    1180:	e798      	b.n	10b4 <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    1182:	2103      	movs	r1, #3
    1184:	e7bf      	b.n	1106 <gpiote_pin_int_cfg+0xa6>
    1186:	3401      	adds	r4, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    1188:	2c08      	cmp	r4, #8
    118a:	d1be      	bne.n	110a <gpiote_pin_int_cfg+0xaa>
	return -ENODEV;
    118c:	f06f 0012 	mvn.w	r0, #18
    1190:	e7f0      	b.n	1174 <gpiote_pin_int_cfg+0x114>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    1192:	6913      	ldr	r3, [r2, #16]
    1194:	69d2      	ldr	r2, [r2, #28]
    1196:	4053      	eors	r3, r2
    1198:	fa23 f101 	lsr.w	r1, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    119c:	f8d4 3700 	ldr.w	r3, [r4, #1792]	; 0x700
		return NRF_GPIO_PIN_SENSE_HIGH;
    11a0:	f011 0f01 	tst.w	r1, #1
    11a4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    11a8:	bf14      	ite	ne
    11aa:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    11ae:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    11b2:	4313      	orrs	r3, r2
    11b4:	f8c4 3700 	str.w	r3, [r4, #1792]	; 0x700
    11b8:	e7dc      	b.n	1174 <gpiote_pin_int_cfg+0x114>
    11ba:	bf00      	nop
    11bc:	40006000 	.word	0x40006000

000011c0 <gpiote_event_handler>:
{
    11c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    11c4:	4953      	ldr	r1, [pc, #332]	; (1314 <gpiote_event_handler+0x154>)
    11c6:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
    11c8:	2d00      	cmp	r5, #0
    11ca:	d067      	beq.n	129c <gpiote_event_handler+0xdc>
	struct gpio_nrfx_data *data = get_port_data(port);
    11cc:	4b52      	ldr	r3, [pc, #328]	; (1318 <gpiote_event_handler+0x158>)
    11ce:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
    11d0:	681b      	ldr	r3, [r3, #0]
    11d2:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    11d4:	e9d2 0302 	ldrd	r0, r3, [r2, #8]
    11d8:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
    11da:	e9d2 0405 	ldrd	r0, r4, [r2, #20]
    11de:	4320      	orrs	r0, r4
    11e0:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    11e4:	6830      	ldr	r0, [r6, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    11e6:	69d4      	ldr	r4, [r2, #28]
    11e8:	6912      	ldr	r2, [r2, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
    11ea:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    11ee:	4054      	eors	r4, r2
    11f0:	4044      	eors	r4, r0
	u32_t out = pin_states & level_pins;
    11f2:	ea23 0404 	bic.w	r4, r3, r4
	u32_t bit = 1U << pin;
    11f6:	2001      	movs	r0, #1
	u32_t pin = 0U;
    11f8:	2700      	movs	r7, #0
	while (level_pins) {
    11fa:	2b00      	cmp	r3, #0
    11fc:	d138      	bne.n	1270 <gpiote_event_handler+0xb0>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    11fe:	600b      	str	r3, [r1, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    1200:	680b      	ldr	r3, [r1, #0]
    1202:	9300      	str	r3, [sp, #0]
    (void)dummy;
    1204:	9b00      	ldr	r3, [sp, #0]
    return p_reg->INTENSET & mask;
    1206:	4845      	ldr	r0, [pc, #276]	; (131c <gpiote_event_handler+0x15c>)
	u32_t fired_triggers[GPIO_COUNT] = {0};
    1208:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    120a:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    120c:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    120e:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    1212:	fa06 f103 	lsl.w	r1, r6, r3
    1216:	4211      	tst	r1, r2
    1218:	d013      	beq.n	1242 <gpiote_event_handler+0x82>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    121a:	009a      	lsls	r2, r3, #2
    121c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1220:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
    1224:	6811      	ldr	r1, [r2, #0]
    1226:	b161      	cbz	r1, 1242 <gpiote_event_handler+0x82>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1228:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    122c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1230:	6017      	str	r7, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    1232:	6812      	ldr	r2, [r2, #0]
    1234:	9201      	str	r2, [sp, #4]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1236:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    123a:	fa06 f101 	lsl.w	r1, r6, r1
    (void)dummy;
    123e:	9a01      	ldr	r2, [sp, #4]
    1240:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1242:	3301      	adds	r3, #1
    1244:	2b08      	cmp	r3, #8
    1246:	d1e2      	bne.n	120e <gpiote_event_handler+0x4e>
	if (fired_triggers[0]) {
    1248:	bb54      	cbnz	r4, 12a0 <gpiote_event_handler+0xe0>
	if (port_event) {
    124a:	b175      	cbz	r5, 126a <gpiote_event_handler+0xaa>
	const struct gpio_nrfx_data *data = get_port_data(port);
    124c:	4b32      	ldr	r3, [pc, #200]	; (1318 <gpiote_event_handler+0x158>)
    124e:	6899      	ldr	r1, [r3, #8]
	return port->config->config_info;
    1250:	681b      	ldr	r3, [r3, #0]
    1252:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    1254:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    1258:	4013      	ands	r3, r2
	out &= ~data->trig_edge & ~data->double_edge;
    125a:	e9d1 2005 	ldrd	r2, r0, [r1, #20]
    125e:	4302      	orrs	r2, r0
    1260:	ea23 0302 	bic.w	r3, r3, r2
	u32_t bit = 1U << pin;
    1264:	2401      	movs	r4, #1
	u32_t pin = 0U;
    1266:	2500      	movs	r5, #0
	while (level_pins) {
    1268:	bb8b      	cbnz	r3, 12ce <gpiote_event_handler+0x10e>
}
    126a:	b002      	add	sp, #8
    126c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    1270:	4203      	tst	r3, r0
    1272:	d010      	beq.n	1296 <gpiote_event_handler+0xd6>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1274:	f896 c004 	ldrb.w	ip, [r6, #4]
    1278:	f007 021f 	and.w	r2, r7, #31
    127c:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
    1280:	0092      	lsls	r2, r2, #2
    1282:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
			level_pins &= ~bit;
    1286:	ea23 0300 	bic.w	r3, r3, r0
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    128a:	f8d2 c700 	ldr.w	ip, [r2, #1792]	; 0x700
    128e:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    1292:	f8c2 c700 	str.w	ip, [r2, #1792]	; 0x700
		++pin;
    1296:	3701      	adds	r7, #1
		bit <<= 1;
    1298:	0040      	lsls	r0, r0, #1
    129a:	e7ae      	b.n	11fa <gpiote_event_handler+0x3a>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    129c:	462c      	mov	r4, r5
    129e:	e7b2      	b.n	1206 <gpiote_event_handler+0x46>
	struct gpio_nrfx_data *data = get_port_data(port);
    12a0:	4f1d      	ldr	r7, [pc, #116]	; (1318 <gpiote_event_handler+0x158>)
    12a2:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    12a6:	f8d8 1000 	ldr.w	r1, [r8]
    12aa:	2900      	cmp	r1, #0
    12ac:	d0cd      	beq.n	124a <gpiote_event_handler+0x8a>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    12ae:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
    12b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
    12b4:	688a      	ldr	r2, [r1, #8]
    12b6:	4023      	ands	r3, r4
    12b8:	4213      	tst	r3, r2
    12ba:	d003      	beq.n	12c4 <gpiote_event_handler+0x104>
			cb->handler(port, cb, pins);
    12bc:	684b      	ldr	r3, [r1, #4]
    12be:	4622      	mov	r2, r4
    12c0:	4638      	mov	r0, r7
    12c2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    12c4:	2e00      	cmp	r6, #0
    12c6:	d0c0      	beq.n	124a <gpiote_event_handler+0x8a>
    12c8:	4631      	mov	r1, r6
    12ca:	6836      	ldr	r6, [r6, #0]
    12cc:	e7f0      	b.n	12b0 <gpiote_event_handler+0xf0>
		if (level_pins & bit) {
    12ce:	421c      	tst	r4, r3
    12d0:	d01c      	beq.n	130c <gpiote_event_handler+0x14c>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    12d2:	7930      	ldrb	r0, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    12d4:	69cf      	ldr	r7, [r1, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    12d6:	f005 021f 	and.w	r2, r5, #31
    12da:	ea42 1240 	orr.w	r2, r2, r0, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    12de:	6908      	ldr	r0, [r1, #16]
    12e0:	0092      	lsls	r2, r2, #2
    12e2:	4078      	eors	r0, r7
    12e4:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    12e8:	40e8      	lsrs	r0, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
    12ea:	f010 0f01 	tst.w	r0, #1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    12ee:	f8d2 0700 	ldr.w	r0, [r2, #1792]	; 0x700
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    12f2:	bf18      	it	ne
    12f4:	f44f 3700 	movne.w	r7, #131072	; 0x20000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    12f8:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    12fc:	bf08      	it	eq
    12fe:	f44f 3740 	moveq.w	r7, #196608	; 0x30000
    1302:	4338      	orrs	r0, r7
    1304:	f8c2 0700 	str.w	r0, [r2, #1792]	; 0x700
			level_pins &= ~bit;
    1308:	ea23 0304 	bic.w	r3, r3, r4
		++pin;
    130c:	3501      	adds	r5, #1
		bit <<= 1;
    130e:	0064      	lsls	r4, r4, #1
    1310:	e7aa      	b.n	1268 <gpiote_event_handler+0xa8>
    1312:	bf00      	nop
    1314:	4000617c 	.word	0x4000617c
    1318:	20000fb8 	.word	0x20000fb8
    131c:	40006000 	.word	0x40006000

00001320 <uart_nrfx_err_check>:
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    1320:	4b02      	ldr	r3, [pc, #8]	; (132c <uart_nrfx_err_check+0xc>)
    1322:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    1326:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    132a:	4770      	bx	lr
    132c:	40002000 	.word	0x40002000

00001330 <uart_nrfx_configure>:

static int uart_nrfx_configure(struct device *dev,
			       const struct uart_config *cfg)
{
    1330:	b530      	push	{r4, r5, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    1332:	794b      	ldrb	r3, [r1, #5]
    1334:	2b01      	cmp	r3, #1
    1336:	d120      	bne.n	137a <uart_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    1338:	798b      	ldrb	r3, [r1, #6]
    133a:	2b03      	cmp	r3, #3
    133c:	d11d      	bne.n	137a <uart_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    133e:	79ca      	ldrb	r2, [r1, #7]
    1340:	b12a      	cbz	r2, 134e <uart_nrfx_configure+0x1e>
    1342:	2a01      	cmp	r2, #1
    1344:	d119      	bne.n	137a <uart_nrfx_configure+0x4a>
	return dev->config->config_info;
    1346:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uart_cfg.hwfc = NRF_UART_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    1348:	689b      	ldr	r3, [r3, #8]
    134a:	781b      	ldrb	r3, [r3, #0]
    134c:	b1ab      	cbz	r3, 137a <uart_nrfx_configure+0x4a>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    134e:	790c      	ldrb	r4, [r1, #4]
    1350:	b114      	cbz	r4, 1358 <uart_nrfx_configure+0x28>
    1352:	2c02      	cmp	r4, #2
    1354:	d111      	bne.n	137a <uart_nrfx_configure+0x4a>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
    1356:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    1358:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    135a:	f647 2512 	movw	r5, #31250	; 0x7a12
    135e:	42ab      	cmp	r3, r5
    1360:	d05f      	beq.n	1422 <uart_nrfx_configure+0xf2>
    1362:	d827      	bhi.n	13b4 <uart_nrfx_configure+0x84>
    1364:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1368:	d05e      	beq.n	1428 <uart_nrfx_configure+0xf8>
    136a:	d812      	bhi.n	1392 <uart_nrfx_configure+0x62>
    136c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1370:	d05c      	beq.n	142c <uart_nrfx_configure+0xfc>
    1372:	d805      	bhi.n	1380 <uart_nrfx_configure+0x50>
    1374:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1378:	d05b      	beq.n	1432 <uart_nrfx_configure+0x102>
		return -ENOTSUP;
    137a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    137e:	e04f      	b.n	1420 <uart_nrfx_configure+0xf0>
	switch (baudrate) {
    1380:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    1384:	d058      	beq.n	1438 <uart_nrfx_configure+0x108>
    1386:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    138a:	d1f6      	bne.n	137a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    138c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    1390:	e03b      	b.n	140a <uart_nrfx_configure+0xda>
	switch (baudrate) {
    1392:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    1396:	d052      	beq.n	143e <uart_nrfx_configure+0x10e>
    1398:	d804      	bhi.n	13a4 <uart_nrfx_configure+0x74>
    139a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    139e:	d1ec      	bne.n	137a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    13a0:	4b30      	ldr	r3, [pc, #192]	; (1464 <uart_nrfx_configure+0x134>)
    13a2:	e032      	b.n	140a <uart_nrfx_configure+0xda>
	switch (baudrate) {
    13a4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    13a8:	d04c      	beq.n	1444 <uart_nrfx_configure+0x114>
    13aa:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    13ae:	d1e4      	bne.n	137a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    13b0:	4b2d      	ldr	r3, [pc, #180]	; (1468 <uart_nrfx_configure+0x138>)
    13b2:	e02a      	b.n	140a <uart_nrfx_configure+0xda>
	switch (baudrate) {
    13b4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    13b8:	d046      	beq.n	1448 <uart_nrfx_configure+0x118>
    13ba:	d811      	bhi.n	13e0 <uart_nrfx_configure+0xb0>
    13bc:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    13c0:	42ab      	cmp	r3, r5
    13c2:	d043      	beq.n	144c <uart_nrfx_configure+0x11c>
    13c4:	d804      	bhi.n	13d0 <uart_nrfx_configure+0xa0>
    13c6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    13ca:	d1d6      	bne.n	137a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    13cc:	4b27      	ldr	r3, [pc, #156]	; (146c <uart_nrfx_configure+0x13c>)
    13ce:	e01c      	b.n	140a <uart_nrfx_configure+0xda>
	switch (baudrate) {
    13d0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    13d4:	d03d      	beq.n	1452 <uart_nrfx_configure+0x122>
    13d6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    13da:	d1ce      	bne.n	137a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    13dc:	4b24      	ldr	r3, [pc, #144]	; (1470 <uart_nrfx_configure+0x140>)
    13de:	e014      	b.n	140a <uart_nrfx_configure+0xda>
	switch (baudrate) {
    13e0:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    13e4:	d037      	beq.n	1456 <uart_nrfx_configure+0x126>
    13e6:	d808      	bhi.n	13fa <uart_nrfx_configure+0xca>
    13e8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    13ec:	d035      	beq.n	145a <uart_nrfx_configure+0x12a>
    13ee:	4d21      	ldr	r5, [pc, #132]	; (1474 <uart_nrfx_configure+0x144>)
    13f0:	42ab      	cmp	r3, r5
    13f2:	d1c2      	bne.n	137a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    13f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    13f8:	e007      	b.n	140a <uart_nrfx_configure+0xda>
	switch (baudrate) {
    13fa:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    13fe:	d02e      	beq.n	145e <uart_nrfx_configure+0x12e>
    1400:	4d1d      	ldr	r5, [pc, #116]	; (1478 <uart_nrfx_configure+0x148>)
    1402:	42ab      	cmp	r3, r5
    1404:	d1b9      	bne.n	137a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    1406:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    140a:	4d1c      	ldr	r5, [pc, #112]	; (147c <uart_nrfx_configure+0x14c>)
                    | (uint32_t)p_cfg->hwfc;
    140c:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
    140e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    1412:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    1416:	6883      	ldr	r3, [r0, #8]
    1418:	c903      	ldmia	r1, {r0, r1}
    141a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    141e:	2000      	movs	r0, #0
}
    1420:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    1422:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    1426:	e7f0      	b.n	140a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    1428:	4b15      	ldr	r3, [pc, #84]	; (1480 <uart_nrfx_configure+0x150>)
    142a:	e7ee      	b.n	140a <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00027000;
    142c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    1430:	e7eb      	b.n	140a <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
    1432:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    1436:	e7e8      	b.n	140a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    1438:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    143c:	e7e5      	b.n	140a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    143e:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    1442:	e7e2      	b.n	140a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    1444:	4b0f      	ldr	r3, [pc, #60]	; (1484 <uart_nrfx_configure+0x154>)
    1446:	e7e0      	b.n	140a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    1448:	4b0f      	ldr	r3, [pc, #60]	; (1488 <uart_nrfx_configure+0x158>)
    144a:	e7de      	b.n	140a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    144c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    1450:	e7db      	b.n	140a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    1452:	4b0e      	ldr	r3, [pc, #56]	; (148c <uart_nrfx_configure+0x15c>)
    1454:	e7d9      	b.n	140a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    1456:	4b0e      	ldr	r3, [pc, #56]	; (1490 <uart_nrfx_configure+0x160>)
    1458:	e7d7      	b.n	140a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    145a:	4b0e      	ldr	r3, [pc, #56]	; (1494 <uart_nrfx_configure+0x164>)
    145c:	e7d5      	b.n	140a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    145e:	4b0e      	ldr	r3, [pc, #56]	; (1498 <uart_nrfx_configure+0x168>)
    1460:	e7d3      	b.n	140a <uart_nrfx_configure+0xda>
    1462:	bf00      	nop
    1464:	00275000 	.word	0x00275000
    1468:	0075f000 	.word	0x0075f000
    146c:	009d5000 	.word	0x009d5000
    1470:	013a9000 	.word	0x013a9000
    1474:	0003d090 	.word	0x0003d090
    1478:	000f4240 	.word	0x000f4240
    147c:	40002000 	.word	0x40002000
    1480:	0013b000 	.word	0x0013b000
    1484:	004ea000 	.word	0x004ea000
    1488:	01d7e000 	.word	0x01d7e000
    148c:	00ebf000 	.word	0x00ebf000
    1490:	075f7000 	.word	0x075f7000
    1494:	03afb000 	.word	0x03afb000
    1498:	0ebed000 	.word	0x0ebed000

0000149c <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    149c:	4b08      	ldr	r3, [pc, #32]	; (14c0 <uart_nrfx_poll_in+0x24>)
    149e:	681a      	ldr	r2, [r3, #0]
{
    14a0:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    14a2:	b152      	cbz	r2, 14ba <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    14a4:	2000      	movs	r0, #0
    14a6:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    14a8:	681b      	ldr	r3, [r3, #0]
    14aa:	9301      	str	r3, [sp, #4]
    (void)dummy;
    14ac:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
    14ae:	4b05      	ldr	r3, [pc, #20]	; (14c4 <uart_nrfx_poll_in+0x28>)
    14b0:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    14b4:	700b      	strb	r3, [r1, #0]
}
    14b6:	b002      	add	sp, #8
    14b8:	4770      	bx	lr
		return -1;
    14ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    14be:	e7fa      	b.n	14b6 <uart_nrfx_poll_in+0x1a>
    14c0:	40002108 	.word	0x40002108
    14c4:	40002000 	.word	0x40002000

000014c8 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    14c8:	4b09      	ldr	r3, [pc, #36]	; (14f0 <uart_nrfx_poll_out+0x28>)
    14ca:	2200      	movs	r2, #0
    14cc:	601a      	str	r2, [r3, #0]
{
    14ce:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    14d0:	681a      	ldr	r2, [r3, #0]
    14d2:	9201      	str	r2, [sp, #4]
    (void)dummy;
    14d4:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    14d6:	4a07      	ldr	r2, [pc, #28]	; (14f4 <uart_nrfx_poll_out+0x2c>)
    14d8:	2001      	movs	r0, #1
    14da:	6010      	str	r0, [r2, #0]
    p_reg->TXD = txd;
    14dc:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    14e0:	681a      	ldr	r2, [r3, #0]
	while (!event_txdrdy_check()) {
    14e2:	2a00      	cmp	r2, #0
    14e4:	d0fc      	beq.n	14e0 <uart_nrfx_poll_out+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    14e6:	4b04      	ldr	r3, [pc, #16]	; (14f8 <uart_nrfx_poll_out+0x30>)
    14e8:	2201      	movs	r2, #1
    14ea:	601a      	str	r2, [r3, #0]
}
    14ec:	b002      	add	sp, #8
    14ee:	4770      	bx	lr
    14f0:	4000211c 	.word	0x4000211c
    14f4:	40002008 	.word	0x40002008
    14f8:	4000200c 	.word	0x4000200c

000014fc <uart_nrfx_init>:
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    14fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
    1500:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSELRXD = pselrxd;
    1502:	4c16      	ldr	r4, [pc, #88]	; (155c <uart_nrfx_init+0x60>)
    1504:	2240      	movs	r2, #64	; 0x40
    1506:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    150a:	2103      	movs	r1, #3
    150c:	2200      	movs	r2, #0
    150e:	2508      	movs	r5, #8
    1510:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
    1514:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    1518:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
    151c:	2506      	movs	r5, #6
    151e:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    1522:	2520      	movs	r5, #32
    1524:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1528:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
    152c:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSELRTS = pselrts;
    1530:	2305      	movs	r3, #5
    1532:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSELCTS = pselcts;
    1536:	2307      	movs	r3, #7
    1538:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
			       DT_NORDIC_NRF_UART_UART_0_RTS_PIN,
			       DT_NORDIC_NRF_UART_UART_0_CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    153c:	6881      	ldr	r1, [r0, #8]
    153e:	f7ff fef7 	bl	1330 <uart_nrfx_configure>
	if (err) {
    1542:	b948      	cbnz	r0, 1558 <uart_nrfx_init+0x5c>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    1544:	2304      	movs	r3, #4
    1546:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    154a:	4b05      	ldr	r3, [pc, #20]	; (1560 <uart_nrfx_init+0x64>)
    154c:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    154e:	681b      	ldr	r3, [r3, #0]
    1550:	9301      	str	r3, [sp, #4]
    (void)dummy;
    1552:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1554:	2301      	movs	r3, #1
    1556:	6023      	str	r3, [r4, #0]
	defined(DT_NORDIC_NRF_UART_UART_0_CTS_PIN)
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
    1558:	b003      	add	sp, #12
    155a:	bd30      	pop	{r4, r5, pc}
    155c:	40002000 	.word	0x40002000
    1560:	40002108 	.word	0x40002108

00001564 <errata_108>:
static bool errata_12(void)
{
    uint32_t var1;
    uint32_t var2;

    if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    1564:	4b04      	ldr	r3, [pc, #16]	; (1578 <errata_108+0x14>)
    1566:	6818      	ldr	r0, [r3, #0]
    1568:	1c42      	adds	r2, r0, #1
    {
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    156a:	bf04      	itt	eq
    156c:	4b03      	ldreq	r3, [pc, #12]	; (157c <errata_108+0x18>)
    156e:	7818      	ldrbeq	r0, [r3, #0]
        break;

    }

    return false;
}
    1570:	1f83      	subs	r3, r0, #6
    1572:	4258      	negs	r0, r3
    1574:	4158      	adcs	r0, r3
    1576:	4770      	bx	lr
    1578:	10000130 	.word	0x10000130
    157c:	f0000fe0 	.word	0xf0000fe0

00001580 <errata_16>:
    return false;
}

static bool errata_16(void)
{
    uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    1580:	4b07      	ldr	r3, [pc, #28]	; (15a0 <errata_16+0x20>)
    1582:	781b      	ldrb	r3, [r3, #0]
    uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;

    switch(var1)
    1584:	2b06      	cmp	r3, #6
    1586:	d109      	bne.n	159c <errata_16+0x1c>
    uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    1588:	4b06      	ldr	r3, [pc, #24]	; (15a4 <errata_16+0x24>)
    158a:	681b      	ldr	r3, [r3, #0]
    158c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    1590:	3b03      	subs	r3, #3
    1592:	2b03      	cmp	r3, #3
    1594:	d802      	bhi.n	159c <errata_16+0x1c>
    1596:	4a04      	ldr	r2, [pc, #16]	; (15a8 <errata_16+0x28>)
    1598:	5cd0      	ldrb	r0, [r2, r3]
    159a:	4770      	bx	lr
            }
        break;

    }

    return false;
    159c:	2000      	movs	r0, #0
}
    159e:	4770      	bx	lr
    15a0:	f0000fe0 	.word	0xf0000fe0
    15a4:	f0000fe8 	.word	0xf0000fe8
    15a8:	0000324a 	.word	0x0000324a

000015ac <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    15ac:	b508      	push	{r3, lr}
        NRF_P0->PIN_CNF[20] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_12()){
    15ae:	f7ff ffd9 	bl	1564 <errata_108>
    15b2:	b128      	cbz	r0, 15c0 <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    15b4:	4b7c      	ldr	r3, [pc, #496]	; (17a8 <SystemInit+0x1fc>)
    15b6:	4a7d      	ldr	r2, [pc, #500]	; (17ac <SystemInit+0x200>)
    15b8:	681b      	ldr	r3, [r3, #0]
    15ba:	f3c3 2304 	ubfx	r3, r3, #8, #5
    15be:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_16()){
    15c0:	f7ff ffde 	bl	1580 <errata_16>
    15c4:	b110      	cbz	r0, 15cc <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    15c6:	4b7a      	ldr	r3, [pc, #488]	; (17b0 <SystemInit+0x204>)
    15c8:	4a7a      	ldr	r2, [pc, #488]	; (17b4 <SystemInit+0x208>)
    15ca:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_31()){
    15cc:	f7ff ffca 	bl	1564 <errata_108>
    15d0:	b128      	cbz	r0, 15de <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    15d2:	4b79      	ldr	r3, [pc, #484]	; (17b8 <SystemInit+0x20c>)
    15d4:	4a79      	ldr	r2, [pc, #484]	; (17bc <SystemInit+0x210>)
    15d6:	681b      	ldr	r3, [r3, #0]
    15d8:	f3c3 3342 	ubfx	r3, r3, #13, #3
    15dc:	6013      	str	r3, [r2, #0]
    }

    /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_32()){
    15de:	f7ff ffcf 	bl	1580 <errata_16>
    15e2:	b120      	cbz	r0, 15ee <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    15e4:	4a76      	ldr	r2, [pc, #472]	; (17c0 <SystemInit+0x214>)
    15e6:	68d3      	ldr	r3, [r2, #12]
    15e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    15ec:	60d3      	str	r3, [r2, #12]
    }

    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_36()){
    15ee:	f7ff ffb9 	bl	1564 <errata_108>
    15f2:	b140      	cbz	r0, 1606 <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
    15f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    15f8:	2200      	movs	r2, #0
    15fa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    15fe:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    1602:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }

    /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_37()){
    1606:	f7ff ffbb 	bl	1580 <errata_16>
    160a:	b110      	cbz	r0, 1612 <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    160c:	4b6d      	ldr	r3, [pc, #436]	; (17c4 <SystemInit+0x218>)
    160e:	2203      	movs	r2, #3
    1610:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_57()){
    1612:	f7ff ffb5 	bl	1580 <errata_16>
    1616:	b140      	cbz	r0, 162a <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    1618:	4b6b      	ldr	r3, [pc, #428]	; (17c8 <SystemInit+0x21c>)
    161a:	2205      	movs	r2, #5
    161c:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    161e:	2201      	movs	r2, #1
    1620:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    1622:	2200      	movs	r2, #0
    1624:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    1626:	223f      	movs	r2, #63	; 0x3f
    1628:	605a      	str	r2, [r3, #4]
static bool errata_66(void)
{
    uint32_t var1;
    uint32_t var2;

    if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    162a:	4b68      	ldr	r3, [pc, #416]	; (17cc <SystemInit+0x220>)
    162c:	681a      	ldr	r2, [r3, #0]
    162e:	1c51      	adds	r1, r2, #1
    {
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    1630:	bf0b      	itete	eq
    1632:	4b67      	ldreq	r3, [pc, #412]	; (17d0 <SystemInit+0x224>)
        var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    }
    else
    {
        var1 = *(uint32_t *)0x10000130ul;
        var2 = *(uint32_t *)0x10000134ul;
    1634:	4b67      	ldrne	r3, [pc, #412]	; (17d4 <SystemInit+0x228>)
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    1636:	781a      	ldrbeq	r2, [r3, #0]
        var2 = *(uint32_t *)0x10000134ul;
    1638:	681b      	ldrne	r3, [r3, #0]
        var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    163a:	bf02      	ittt	eq
    163c:	3308      	addeq	r3, #8
    163e:	681b      	ldreq	r3, [r3, #0]
    1640:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
    }

    switch(var1)
    1644:	2a06      	cmp	r2, #6
    1646:	d14d      	bne.n	16e4 <SystemInit+0x138>
    {
        case 0x06:
            switch(var2)
    1648:	3b03      	subs	r3, #3
    164a:	2b03      	cmp	r3, #3
    164c:	d803      	bhi.n	1656 <SystemInit+0xaa>
    }

    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_66()){
    164e:	4a62      	ldr	r2, [pc, #392]	; (17d8 <SystemInit+0x22c>)
    1650:	5cd3      	ldrb	r3, [r2, r3]
    1652:	2b00      	cmp	r3, #0
    1654:	d046      	beq.n	16e4 <SystemInit+0x138>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    1656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    165a:	4b60      	ldr	r3, [pc, #384]	; (17dc <SystemInit+0x230>)
    165c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    1660:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    1664:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    1668:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    166c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    1670:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    1674:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    1678:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    167c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    1680:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    1684:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    1688:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    168c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    1690:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    1694:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    1698:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    169c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    16a0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    16a4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    16a8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    16ac:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    16b0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    16b4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    16b8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    16bc:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    16c0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    16c4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    16c8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    16cc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    16d0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    16d4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    16d8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    16dc:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    16e0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }

    /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_108()){
    16e4:	f7ff ff3e 	bl	1564 <errata_108>
    16e8:	b128      	cbz	r0, 16f6 <SystemInit+0x14a>
        *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    16ea:	4b3d      	ldr	r3, [pc, #244]	; (17e0 <SystemInit+0x234>)
    16ec:	4a3d      	ldr	r2, [pc, #244]	; (17e4 <SystemInit+0x238>)
    16ee:	681b      	ldr	r3, [r3, #0]
    16f0:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    16f4:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_136()){
    16f6:	f7ff ff35 	bl	1564 <errata_108>
    16fa:	b148      	cbz	r0, 1710 <SystemInit+0x164>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    16fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1700:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1704:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    1706:	bf44      	itt	mi
    1708:	f06f 0201 	mvnmi.w	r2, #1
    170c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    return false;
}

static bool errata_182(void)
{
    uint32_t var1 = *(uint32_t *)0x10000130ul;
    1710:	4b2e      	ldr	r3, [pc, #184]	; (17cc <SystemInit+0x220>)
    uint32_t var2 = *(uint32_t *)0x10000134ul;

    switch(var1)
    1712:	681b      	ldr	r3, [r3, #0]
    1714:	2b06      	cmp	r3, #6
    1716:	d109      	bne.n	172c <SystemInit+0x180>
    uint32_t var2 = *(uint32_t *)0x10000134ul;
    1718:	4b2e      	ldr	r3, [pc, #184]	; (17d4 <SystemInit+0x228>)
    {
        case 0x06:
            switch(var2)
    171a:	681b      	ldr	r3, [r3, #0]
    171c:	3b03      	subs	r3, #3
    171e:	2b02      	cmp	r3, #2
    }
    
    /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_182()){
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    1720:	bf81      	itttt	hi
    1722:	4a31      	ldrhi	r2, [pc, #196]	; (17e8 <SystemInit+0x23c>)
    1724:	6813      	ldrhi	r3, [r2, #0]
    1726:	f443 6380 	orrhi.w	r3, r3, #1024	; 0x400
    172a:	6013      	strhi	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    172c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    1730:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    1734:	2a00      	cmp	r2, #0
    1736:	db03      	blt.n	1740 <SystemInit+0x194>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    1738:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    173c:	2b00      	cmp	r3, #0
    173e:	da2f      	bge.n	17a0 <SystemInit+0x1f4>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    1740:	4b2a      	ldr	r3, [pc, #168]	; (17ec <SystemInit+0x240>)
    1742:	2201      	movs	r2, #1
    1744:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1748:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    174c:	2a00      	cmp	r2, #0
    174e:	d0fb      	beq.n	1748 <SystemInit+0x19c>
            NRF_UICR->PSELRESET[0] = 21;
    1750:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    1754:	2115      	movs	r1, #21
    1756:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    175a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    175e:	2a00      	cmp	r2, #0
    1760:	d0fb      	beq.n	175a <SystemInit+0x1ae>
            NRF_UICR->PSELRESET[1] = 21;
    1762:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    1766:	2215      	movs	r2, #21
    1768:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    176c:	4b1f      	ldr	r3, [pc, #124]	; (17ec <SystemInit+0x240>)
    176e:	461a      	mov	r2, r3
    1770:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    1774:	2900      	cmp	r1, #0
    1776:	d0fb      	beq.n	1770 <SystemInit+0x1c4>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    1778:	2100      	movs	r1, #0
    177a:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    177e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    1782:	2b00      	cmp	r3, #0
    1784:	d0fb      	beq.n	177e <SystemInit+0x1d2>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1786:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    178a:	4919      	ldr	r1, [pc, #100]	; (17f0 <SystemInit+0x244>)
    178c:	4b19      	ldr	r3, [pc, #100]	; (17f4 <SystemInit+0x248>)
    178e:	68ca      	ldr	r2, [r1, #12]
    1790:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1794:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1796:	60cb      	str	r3, [r1, #12]
    1798:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    179c:	bf00      	nop
    179e:	e7fd      	b.n	179c <SystemInit+0x1f0>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    17a0:	4b15      	ldr	r3, [pc, #84]	; (17f8 <SystemInit+0x24c>)
    17a2:	4a16      	ldr	r2, [pc, #88]	; (17fc <SystemInit+0x250>)
    17a4:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    17a6:	bd08      	pop	{r3, pc}
    17a8:	10000324 	.word	0x10000324
    17ac:	40013540 	.word	0x40013540
    17b0:	4007c074 	.word	0x4007c074
    17b4:	baadf00d 	.word	0xbaadf00d
    17b8:	10000244 	.word	0x10000244
    17bc:	4000053c 	.word	0x4000053c
    17c0:	e000edf0 	.word	0xe000edf0
    17c4:	400005a0 	.word	0x400005a0
    17c8:	40005610 	.word	0x40005610
    17cc:	10000130 	.word	0x10000130
    17d0:	f0000fe0 	.word	0xf0000fe0
    17d4:	10000134 	.word	0x10000134
    17d8:	0000324e 	.word	0x0000324e
    17dc:	4000c000 	.word	0x4000c000
    17e0:	10000258 	.word	0x10000258
    17e4:	40000ee4 	.word	0x40000ee4
    17e8:	4000173c 	.word	0x4000173c
    17ec:	4001e000 	.word	0x4001e000
    17f0:	e000ed00 	.word	0xe000ed00
    17f4:	05fa0004 	.word	0x05fa0004
    17f8:	20000f48 	.word	0x20000f48
    17fc:	03d09000 	.word	0x03d09000

00001800 <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	z_sys_device_level = level;
    1800:	4b0a      	ldr	r3, [pc, #40]	; (182c <z_sys_device_do_config_level+0x2c>)
{
    1802:	b570      	push	{r4, r5, r6, lr}
	z_sys_device_level = level;
    1804:	7018      	strb	r0, [r3, #0]
	for (info = config_levels[level]; info < config_levels[level+1];
    1806:	4b0a      	ldr	r3, [pc, #40]	; (1830 <z_sys_device_do_config_level+0x30>)
    1808:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    180c:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    180e:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    1810:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    1814:	42a5      	cmp	r5, r4
    1816:	d800      	bhi.n	181a <z_sys_device_do_config_level+0x1a>
		} else {
			z_object_init(info);
		}
	}
}
    1818:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    181a:	6823      	ldr	r3, [r4, #0]
    181c:	4620      	mov	r0, r4
    181e:	685b      	ldr	r3, [r3, #4]
    1820:	4798      	blx	r3
		if (retval != 0) {
    1822:	b100      	cbz	r0, 1826 <z_sys_device_do_config_level+0x26>
			info->driver_api = NULL;
    1824:	6066      	str	r6, [r4, #4]
								info++) {
    1826:	340c      	adds	r4, #12
    1828:	e7f4      	b.n	1814 <z_sys_device_do_config_level+0x14>
    182a:	bf00      	nop
    182c:	200001f2 	.word	0x200001f2
    1830:	00003094 	.word	0x00003094

00001834 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    1834:	4b10      	ldr	r3, [pc, #64]	; (1878 <z_impl_device_get_binding+0x44>)
{
    1836:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    1838:	4c10      	ldr	r4, [pc, #64]	; (187c <z_impl_device_get_binding+0x48>)
{
    183a:	4605      	mov	r5, r0
    183c:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    183e:	429c      	cmp	r4, r3
    1840:	d104      	bne.n	184c <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    1842:	4c0e      	ldr	r4, [pc, #56]	; (187c <z_impl_device_get_binding+0x48>)
    1844:	42b4      	cmp	r4, r6
    1846:	d109      	bne.n	185c <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    1848:	2400      	movs	r4, #0
    184a:	e012      	b.n	1872 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    184c:	6862      	ldr	r2, [r4, #4]
    184e:	b11a      	cbz	r2, 1858 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    1850:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    1852:	6812      	ldr	r2, [r2, #0]
    1854:	42aa      	cmp	r2, r5
    1856:	d00c      	beq.n	1872 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    1858:	340c      	adds	r4, #12
    185a:	e7f0      	b.n	183e <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    185c:	6863      	ldr	r3, [r4, #4]
    185e:	b90b      	cbnz	r3, 1864 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    1860:	340c      	adds	r4, #12
    1862:	e7ef      	b.n	1844 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    1864:	6823      	ldr	r3, [r4, #0]
    1866:	4628      	mov	r0, r5
    1868:	6819      	ldr	r1, [r3, #0]
    186a:	f001 f84e 	bl	290a <strcmp>
    186e:	2800      	cmp	r0, #0
    1870:	d1f6      	bne.n	1860 <z_impl_device_get_binding+0x2c>
}
    1872:	4620      	mov	r0, r4
    1874:	bd70      	pop	{r4, r5, r6, pc}
    1876:	bf00      	nop
    1878:	20000fc4 	.word	0x20000fc4
    187c:	20000f58 	.word	0x20000f58

00001880 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    1880:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    1882:	4d0b      	ldr	r5, [pc, #44]	; (18b0 <idle+0x30>)
	__asm__ volatile(
    1884:	f04f 0220 	mov.w	r2, #32
    1888:	f3ef 8311 	mrs	r3, BASEPRI
    188c:	f382 8811 	msr	BASEPRI, r2
    1890:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    1894:	f001 fab6 	bl	2e04 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    1898:	2101      	movs	r1, #1
    189a:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
    189c:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    189e:	bfd8      	it	le
    18a0:	4608      	movle	r0, r1
    18a2:	f001 fabf 	bl	2e24 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    18a6:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    18a8:	f7ff f988 	bl	bbc <arch_cpu_idle>
    18ac:	e7ea      	b.n	1884 <idle+0x4>
    18ae:	bf00      	nop
    18b0:	200001b0 	.word	0x200001b0

000018b4 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    18b4:	4802      	ldr	r0, [pc, #8]	; (18c0 <z_bss_zero+0xc>)
    18b6:	4a03      	ldr	r2, [pc, #12]	; (18c4 <z_bss_zero+0x10>)
    18b8:	2100      	movs	r1, #0
    18ba:	1a12      	subs	r2, r2, r0
    18bc:	f001 b85b 	b.w	2976 <memset>
    18c0:	20000000 	.word	0x20000000
    18c4:	200001f4 	.word	0x200001f4

000018c8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    18c8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    18ca:	4806      	ldr	r0, [pc, #24]	; (18e4 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    18cc:	4a06      	ldr	r2, [pc, #24]	; (18e8 <z_data_copy+0x20>)
    18ce:	4907      	ldr	r1, [pc, #28]	; (18ec <z_data_copy+0x24>)
    18d0:	1a12      	subs	r2, r2, r0
    18d2:	f001 f826 	bl	2922 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    18d6:	4a06      	ldr	r2, [pc, #24]	; (18f0 <z_data_copy+0x28>)
    18d8:	4906      	ldr	r1, [pc, #24]	; (18f4 <z_data_copy+0x2c>)
    18da:	4807      	ldr	r0, [pc, #28]	; (18f8 <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    18dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    18e0:	f001 b81f 	b.w	2922 <memcpy>
    18e4:	20000f38 	.word	0x20000f38
    18e8:	20000fd8 	.word	0x20000fd8
    18ec:	000032a4 	.word	0x000032a4
    18f0:	00000000 	.word	0x00000000
    18f4:	000032a4 	.word	0x000032a4
    18f8:	20000000 	.word	0x20000000

000018fc <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    18fc:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    18fe:	2002      	movs	r0, #2
    1900:	f7ff ff7e 	bl	1800 <z_sys_device_do_config_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    1904:	4a08      	ldr	r2, [pc, #32]	; (1928 <bg_thread_main+0x2c>)
    1906:	4909      	ldr	r1, [pc, #36]	; (192c <bg_thread_main+0x30>)
    1908:	4809      	ldr	r0, [pc, #36]	; (1930 <bg_thread_main+0x34>)
    190a:	f000 ff01 	bl	2710 <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    190e:	2003      	movs	r0, #3
    1910:	f7ff ff76 	bl	1800 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    1914:	f000 fb44 	bl	1fa0 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    1918:	f7fe fd9c 	bl	454 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    191c:	4a05      	ldr	r2, [pc, #20]	; (1934 <bg_thread_main+0x38>)
    191e:	7b13      	ldrb	r3, [r2, #12]
    1920:	f023 0301 	bic.w	r3, r3, #1
    1924:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    1926:	bd08      	pop	{r3, pc}
    1928:	000030be 	.word	0x000030be
    192c:	00003252 	.word	0x00003252
    1930:	00003272 	.word	0x00003272
    1934:	20000144 	.word	0x20000144

00001938 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    1938:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
    193a:	4b36      	ldr	r3, [pc, #216]	; (1a14 <z_cstart+0xdc>)
    193c:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    193e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    1942:	4c35      	ldr	r4, [pc, #212]	; (1a18 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
    1944:	4e35      	ldr	r6, [pc, #212]	; (1a1c <z_cstart+0xe4>)
    1946:	6963      	ldr	r3, [r4, #20]
    1948:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    194c:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    194e:	2500      	movs	r5, #0
    1950:	23e0      	movs	r3, #224	; 0xe0
    1952:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    1956:	77e5      	strb	r5, [r4, #31]
    1958:	7625      	strb	r5, [r4, #24]
    195a:	7665      	strb	r5, [r4, #25]
    195c:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    195e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1960:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    1964:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    1966:	f7ff fa4b 	bl	e00 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    196a:	f7ff f921 	bl	bb0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    196e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1972:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    1974:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
    1976:	ab07      	add	r3, sp, #28
    1978:	226c      	movs	r2, #108	; 0x6c
    197a:	4629      	mov	r1, r5
    197c:	4618      	mov	r0, r3
    197e:	f000 fffa 	bl	2976 <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    1982:	4c27      	ldr	r4, [pc, #156]	; (1a20 <z_cstart+0xe8>)
	struct k_thread dummy_thread = {
    1984:	2701      	movs	r7, #1
	_current = &dummy_thread;
    1986:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    1988:	4628      	mov	r0, r5
	struct k_thread dummy_thread = {
    198a:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    198e:	f7ff ff37 	bl	1800 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    1992:	4638      	mov	r0, r7
    1994:	f7ff ff34 	bl	1800 <z_sys_device_do_config_level>
	z_sched_init();
    1998:	f000 f9fc 	bl	1d94 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    199c:	4b21      	ldr	r3, [pc, #132]	; (1a24 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
    199e:	6266      	str	r6, [r4, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    19a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    19a4:	e9cd 7304 	strd	r7, r3, [sp, #16]
    19a8:	e9cd 5502 	strd	r5, r5, [sp, #8]
    19ac:	4b1e      	ldr	r3, [pc, #120]	; (1a28 <z_cstart+0xf0>)
    19ae:	491f      	ldr	r1, [pc, #124]	; (1a2c <z_cstart+0xf4>)
    19b0:	e9cd 5500 	strd	r5, r5, [sp]
    19b4:	4630      	mov	r0, r6
    19b6:	f000 fa97 	bl	1ee8 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    19ba:	7b73      	ldrb	r3, [r6, #13]
    19bc:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    19c0:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    19c4:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    19c6:	d104      	bne.n	19d2 <z_cstart+0x9a>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    19c8:	69b3      	ldr	r3, [r6, #24]
    19ca:	b913      	cbnz	r3, 19d2 <z_cstart+0x9a>
		z_add_thread_to_ready_q(thread);
    19cc:	4630      	mov	r0, r6
    19ce:	f000 f8df 	bl	1b90 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
    19d2:	4b17      	ldr	r3, [pc, #92]	; (1a30 <z_cstart+0xf8>)
    19d4:	4d17      	ldr	r5, [pc, #92]	; (1a34 <z_cstart+0xfc>)
    19d6:	9305      	str	r3, [sp, #20]
    19d8:	2201      	movs	r2, #1
    19da:	230f      	movs	r3, #15
    19dc:	e9cd 3203 	strd	r3, r2, [sp, #12]
    19e0:	2300      	movs	r3, #0
    19e2:	e9cd 3301 	strd	r3, r3, [sp, #4]
    19e6:	9300      	str	r3, [sp, #0]
    19e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    19ec:	4b12      	ldr	r3, [pc, #72]	; (1a38 <z_cstart+0x100>)
    19ee:	4913      	ldr	r1, [pc, #76]	; (1a3c <z_cstart+0x104>)
    19f0:	4628      	mov	r0, r5
    19f2:	f000 fa79 	bl	1ee8 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    19f6:	7b6b      	ldrb	r3, [r5, #13]
	_kernel.cpus[0].idle_thread = &z_idle_thread;
    19f8:	60e5      	str	r5, [r4, #12]
    19fa:	f023 0304 	bic.w	r3, r3, #4
    19fe:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    1a00:	4b0f      	ldr	r3, [pc, #60]	; (1a40 <z_cstart+0x108>)
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    1a02:	490a      	ldr	r1, [pc, #40]	; (1a2c <z_cstart+0xf4>)
    1a04:	4805      	ldr	r0, [pc, #20]	; (1a1c <z_cstart+0xe4>)
	list->tail = (sys_dnode_t *)list;
    1a06:	e9c4 3306 	strd	r3, r3, [r4, #24]
    1a0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1a0e:	4b06      	ldr	r3, [pc, #24]	; (1a28 <z_cstart+0xf0>)
    1a10:	f7ff f8b0 	bl	b74 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    1a14:	20000f38 	.word	0x20000f38
    1a18:	e000ed00 	.word	0xe000ed00
    1a1c:	20000144 	.word	0x20000144
    1a20:	200001b0 	.word	0x200001b0
    1a24:	00003299 	.word	0x00003299
    1a28:	000018fd 	.word	0x000018fd
    1a2c:	200001f8 	.word	0x200001f8
    1a30:	0000329e 	.word	0x0000329e
    1a34:	200000d8 	.word	0x200000d8
    1a38:	00001881 	.word	0x00001881
    1a3c:	200005f8 	.word	0x200005f8
    1a40:	200001c8 	.word	0x200001c8

00001a44 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    1a44:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    1a46:	4c08      	ldr	r4, [pc, #32]	; (1a68 <z_reset_time_slice+0x24>)
    1a48:	6823      	ldr	r3, [r4, #0]
    1a4a:	b15b      	cbz	r3, 1a64 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    1a4c:	f7fe ffcc 	bl	9e8 <z_clock_elapsed>
    1a50:	6823      	ldr	r3, [r4, #0]
    1a52:	4a06      	ldr	r2, [pc, #24]	; (1a6c <z_reset_time_slice+0x28>)
    1a54:	4418      	add	r0, r3
    1a56:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    1a58:	2100      	movs	r1, #0
    1a5a:	4618      	mov	r0, r3
	}
}
    1a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    1a60:	f001 b9e0 	b.w	2e24 <z_set_timeout_expiry>
}
    1a64:	bd10      	pop	{r4, pc}
    1a66:	bf00      	nop
    1a68:	200001e8 	.word	0x200001e8
    1a6c:	200001b0 	.word	0x200001b0

00001a70 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
    1a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a72:	460d      	mov	r5, r1
    1a74:	f04f 0320 	mov.w	r3, #32
    1a78:	f3ef 8411 	mrs	r4, BASEPRI
    1a7c:	f383 8811 	msr	BASEPRI, r3
    1a80:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    1a84:	4b0d      	ldr	r3, [pc, #52]	; (1abc <k_sched_time_slice_set+0x4c>)
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
    1a86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1a8a:	f240 36e7 	movw	r6, #999	; 0x3e7
    1a8e:	2700      	movs	r7, #0
    1a90:	fbe1 6700 	umlal	r6, r7, r1, r0
    1a94:	2200      	movs	r2, #0
    1a96:	611a      	str	r2, [r3, #16]
    1a98:	4630      	mov	r0, r6
    1a9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1a9e:	2300      	movs	r3, #0
    1aa0:	4639      	mov	r1, r7
    1aa2:	f7fe fb1b 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    1aa6:	4b06      	ldr	r3, [pc, #24]	; (1ac0 <k_sched_time_slice_set+0x50>)
    1aa8:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    1aaa:	4b06      	ldr	r3, [pc, #24]	; (1ac4 <k_sched_time_slice_set+0x54>)
    1aac:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    1aae:	f7ff ffc9 	bl	1a44 <z_reset_time_slice>
	__asm__ volatile(
    1ab2:	f384 8811 	msr	BASEPRI, r4
    1ab6:	f3bf 8f6f 	isb	sy
	}
}
    1aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1abc:	200001b0 	.word	0x200001b0
    1ac0:	200001e8 	.word	0x200001e8
    1ac4:	200001e4 	.word	0x200001e4

00001ac8 <k_sched_lock>:
	__asm__ volatile(
    1ac8:	f04f 0320 	mov.w	r3, #32
    1acc:	f3ef 8111 	mrs	r1, BASEPRI
    1ad0:	f383 8811 	msr	BASEPRI, r3
    1ad4:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    1ad8:	4b04      	ldr	r3, [pc, #16]	; (1aec <k_sched_lock+0x24>)
    1ada:	689a      	ldr	r2, [r3, #8]
    1adc:	7bd3      	ldrb	r3, [r2, #15]
    1ade:	3b01      	subs	r3, #1
    1ae0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    1ae2:	f381 8811 	msr	BASEPRI, r1
    1ae6:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    1aea:	4770      	bx	lr
    1aec:	200001b0 	.word	0x200001b0

00001af0 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    1af0:	4b09      	ldr	r3, [pc, #36]	; (1b18 <z_priq_dumb_remove+0x28>)
    1af2:	f103 0228 	add.w	r2, r3, #40	; 0x28
    1af6:	4282      	cmp	r2, r0
    1af8:	d105      	bne.n	1b06 <z_priq_dumb_remove+0x16>
    1afa:	689b      	ldr	r3, [r3, #8]
    1afc:	428b      	cmp	r3, r1
    1afe:	d102      	bne.n	1b06 <z_priq_dumb_remove+0x16>
    1b00:	7b4b      	ldrb	r3, [r1, #13]
    1b02:	06db      	lsls	r3, r3, #27
    1b04:	d106      	bne.n	1b14 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    1b06:	e9d1 3200 	ldrd	r3, r2, [r1]
    1b0a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    1b0c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    1b0e:	2300      	movs	r3, #0
	node->prev = NULL;
    1b10:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    1b14:	4770      	bx	lr
    1b16:	bf00      	nop
    1b18:	200001b0 	.word	0x200001b0

00001b1c <update_cache>:
{
    1b1c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    1b1e:	4c0d      	ldr	r4, [pc, #52]	; (1b54 <update_cache+0x38>)
{
    1b20:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    1b22:	f104 0028 	add.w	r0, r4, #40	; 0x28
    1b26:	f001 f8e9 	bl	2cfc <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
    1b2a:	4605      	mov	r5, r0
    1b2c:	b900      	cbnz	r0, 1b30 <update_cache+0x14>
    1b2e:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    1b30:	68a3      	ldr	r3, [r4, #8]
    1b32:	b94a      	cbnz	r2, 1b48 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    1b34:	7b5a      	ldrb	r2, [r3, #13]
    1b36:	06d2      	lsls	r2, r2, #27
    1b38:	d106      	bne.n	1b48 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    1b3a:	69aa      	ldr	r2, [r5, #24]
    1b3c:	b922      	cbnz	r2, 1b48 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
    1b3e:	89da      	ldrh	r2, [r3, #14]
    1b40:	2a7f      	cmp	r2, #127	; 0x7f
    1b42:	d901      	bls.n	1b48 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    1b44:	6263      	str	r3, [r4, #36]	; 0x24
}
    1b46:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
    1b48:	429d      	cmp	r5, r3
    1b4a:	d001      	beq.n	1b50 <update_cache+0x34>
			z_reset_time_slice();
    1b4c:	f7ff ff7a 	bl	1a44 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
    1b50:	6265      	str	r5, [r4, #36]	; 0x24
}
    1b52:	e7f8      	b.n	1b46 <update_cache+0x2a>
    1b54:	200001b0 	.word	0x200001b0

00001b58 <k_sched_unlock>:
{
    1b58:	b510      	push	{r4, lr}
	__asm__ volatile(
    1b5a:	f04f 0320 	mov.w	r3, #32
    1b5e:	f3ef 8411 	mrs	r4, BASEPRI
    1b62:	f383 8811 	msr	BASEPRI, r3
    1b66:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    1b6a:	4b08      	ldr	r3, [pc, #32]	; (1b8c <k_sched_unlock+0x34>)
    1b6c:	689a      	ldr	r2, [r3, #8]
    1b6e:	7bd3      	ldrb	r3, [r2, #15]
    1b70:	3301      	adds	r3, #1
    1b72:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    1b74:	2000      	movs	r0, #0
    1b76:	f7ff ffd1 	bl	1b1c <update_cache>
	__asm__ volatile(
    1b7a:	f384 8811 	msr	BASEPRI, r4
    1b7e:	f3bf 8f6f 	isb	sy
}
    1b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    1b86:	f001 b8af 	b.w	2ce8 <z_reschedule_unlocked>
    1b8a:	bf00      	nop
    1b8c:	200001b0 	.word	0x200001b0

00001b90 <z_add_thread_to_ready_q>:
{
    1b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    1b92:	f04f 0320 	mov.w	r3, #32
    1b96:	f3ef 8411 	mrs	r4, BASEPRI
    1b9a:	f383 8811 	msr	BASEPRI, r3
    1b9e:	f3bf 8f6f 	isb	sy
	return list->head == list;
    1ba2:	4a15      	ldr	r2, [pc, #84]	; (1bf8 <z_add_thread_to_ready_q+0x68>)
    1ba4:	4611      	mov	r1, r2
    1ba6:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1baa:	428b      	cmp	r3, r1
    1bac:	d01d      	beq.n	1bea <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1bae:	b1e3      	cbz	r3, 1bea <z_add_thread_to_ready_q+0x5a>
    1bb0:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    1bb2:	f990 500e 	ldrsb.w	r5, [r0, #14]
    1bb6:	f993 700e 	ldrsb.w	r7, [r3, #14]
    1bba:	42af      	cmp	r7, r5
    1bbc:	dd10      	ble.n	1be0 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
    1bbe:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    1bc0:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    1bc4:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    1bc6:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    1bc8:	7b43      	ldrb	r3, [r0, #13]
    1bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1bce:	7343      	strb	r3, [r0, #13]
		update_cache(0);
    1bd0:	2000      	movs	r0, #0
    1bd2:	f7ff ffa3 	bl	1b1c <update_cache>
	__asm__ volatile(
    1bd6:	f384 8811 	msr	BASEPRI, r4
    1bda:	f3bf 8f6f 	isb	sy
}
    1bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    1be0:	42b3      	cmp	r3, r6
    1be2:	d002      	beq.n	1bea <z_add_thread_to_ready_q+0x5a>
    1be4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1be6:	2b00      	cmp	r3, #0
    1be8:	d1e5      	bne.n	1bb6 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
    1bea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1bec:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    1bee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    1bf0:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
    1bf2:	6018      	str	r0, [r3, #0]
	list->tail = node;
    1bf4:	62d0      	str	r0, [r2, #44]	; 0x2c
    1bf6:	e7e7      	b.n	1bc8 <z_add_thread_to_ready_q+0x38>
    1bf8:	200001b0 	.word	0x200001b0

00001bfc <z_move_thread_to_end_of_prio_q>:
{
    1bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bfe:	4604      	mov	r4, r0
	__asm__ volatile(
    1c00:	f04f 0320 	mov.w	r3, #32
    1c04:	f3ef 8511 	mrs	r5, BASEPRI
    1c08:	f383 8811 	msr	BASEPRI, r3
    1c0c:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    1c10:	7b43      	ldrb	r3, [r0, #13]
    1c12:	065a      	lsls	r2, r3, #25
    1c14:	d503      	bpl.n	1c1e <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    1c16:	4601      	mov	r1, r0
    1c18:	4817      	ldr	r0, [pc, #92]	; (1c78 <z_move_thread_to_end_of_prio_q+0x7c>)
    1c1a:	f7ff ff69 	bl	1af0 <z_priq_dumb_remove>
	return list->head == list;
    1c1e:	4a17      	ldr	r2, [pc, #92]	; (1c7c <z_move_thread_to_end_of_prio_q+0x80>)
    1c20:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1c24:	f102 0128 	add.w	r1, r2, #40	; 0x28
    1c28:	428b      	cmp	r3, r1
    1c2a:	d01f      	beq.n	1c6c <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1c2c:	b1f3      	cbz	r3, 1c6c <z_move_thread_to_end_of_prio_q+0x70>
	if (t1->base.prio < t2->base.prio) {
    1c2e:	f994 600e 	ldrsb.w	r6, [r4, #14]
    1c32:	f993 700e 	ldrsb.w	r7, [r3, #14]
    1c36:	42b7      	cmp	r7, r6
    1c38:	dd13      	ble.n	1c62 <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
    1c3a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    1c3c:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    1c40:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    1c42:	605c      	str	r4, [r3, #4]
    1c44:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    1c46:	6890      	ldr	r0, [r2, #8]
    1c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1c4c:	7363      	strb	r3, [r4, #13]
    1c4e:	1b03      	subs	r3, r0, r4
    1c50:	4258      	negs	r0, r3
    1c52:	4158      	adcs	r0, r3
    1c54:	f7ff ff62 	bl	1b1c <update_cache>
	__asm__ volatile(
    1c58:	f385 8811 	msr	BASEPRI, r5
    1c5c:	f3bf 8f6f 	isb	sy
}
    1c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    1c62:	4283      	cmp	r3, r0
    1c64:	d002      	beq.n	1c6c <z_move_thread_to_end_of_prio_q+0x70>
    1c66:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1c68:	2b00      	cmp	r3, #0
    1c6a:	d1e2      	bne.n	1c32 <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
    1c6c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    1c70:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1c72:	601c      	str	r4, [r3, #0]
	list->tail = node;
    1c74:	62d4      	str	r4, [r2, #44]	; 0x2c
    1c76:	e7e5      	b.n	1c44 <z_move_thread_to_end_of_prio_q+0x48>
    1c78:	200001d8 	.word	0x200001d8
    1c7c:	200001b0 	.word	0x200001b0

00001c80 <z_time_slice>:
	if (pending_current == _current) {
    1c80:	4a15      	ldr	r2, [pc, #84]	; (1cd8 <z_time_slice+0x58>)
    1c82:	4916      	ldr	r1, [pc, #88]	; (1cdc <z_time_slice+0x5c>)
{
    1c84:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    1c86:	680c      	ldr	r4, [r1, #0]
    1c88:	6893      	ldr	r3, [r2, #8]
    1c8a:	42a3      	cmp	r3, r4
    1c8c:	4614      	mov	r4, r2
    1c8e:	d103      	bne.n	1c98 <z_time_slice+0x18>
}
    1c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    1c94:	f7ff bed6 	b.w	1a44 <z_reset_time_slice>
	pending_current = NULL;
    1c98:	2500      	movs	r5, #0
    1c9a:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
    1c9c:	4910      	ldr	r1, [pc, #64]	; (1ce0 <z_time_slice+0x60>)
    1c9e:	6809      	ldr	r1, [r1, #0]
    1ca0:	b1b9      	cbz	r1, 1cd2 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
    1ca2:	89d9      	ldrh	r1, [r3, #14]
    1ca4:	297f      	cmp	r1, #127	; 0x7f
    1ca6:	d814      	bhi.n	1cd2 <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
    1ca8:	490e      	ldr	r1, [pc, #56]	; (1ce4 <z_time_slice+0x64>)
    1caa:	f993 500e 	ldrsb.w	r5, [r3, #14]
    1cae:	6809      	ldr	r1, [r1, #0]
    1cb0:	428d      	cmp	r5, r1
    1cb2:	db0e      	blt.n	1cd2 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
    1cb4:	490c      	ldr	r1, [pc, #48]	; (1ce8 <z_time_slice+0x68>)
    1cb6:	428b      	cmp	r3, r1
    1cb8:	d00b      	beq.n	1cd2 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
    1cba:	6999      	ldr	r1, [r3, #24]
    1cbc:	b949      	cbnz	r1, 1cd2 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    1cbe:	6911      	ldr	r1, [r2, #16]
    1cc0:	4281      	cmp	r1, r0
    1cc2:	dc03      	bgt.n	1ccc <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    1cc4:	4618      	mov	r0, r3
    1cc6:	f7ff ff99 	bl	1bfc <z_move_thread_to_end_of_prio_q>
    1cca:	e7e1      	b.n	1c90 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
    1ccc:	1a09      	subs	r1, r1, r0
    1cce:	6111      	str	r1, [r2, #16]
}
    1cd0:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    1cd2:	2300      	movs	r3, #0
    1cd4:	6123      	str	r3, [r4, #16]
    1cd6:	e7fb      	b.n	1cd0 <z_time_slice+0x50>
    1cd8:	200001b0 	.word	0x200001b0
    1cdc:	200001e0 	.word	0x200001e0
    1ce0:	200001e8 	.word	0x200001e8
    1ce4:	200001e4 	.word	0x200001e4
    1ce8:	200000d8 	.word	0x200000d8

00001cec <z_remove_thread_from_ready_q>:
{
    1cec:	b538      	push	{r3, r4, r5, lr}
    1cee:	4604      	mov	r4, r0
	__asm__ volatile(
    1cf0:	f04f 0320 	mov.w	r3, #32
    1cf4:	f3ef 8511 	mrs	r5, BASEPRI
    1cf8:	f383 8811 	msr	BASEPRI, r3
    1cfc:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    1d00:	7b43      	ldrb	r3, [r0, #13]
    1d02:	065a      	lsls	r2, r3, #25
    1d04:	d507      	bpl.n	1d16 <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    1d06:	4601      	mov	r1, r0
    1d08:	4809      	ldr	r0, [pc, #36]	; (1d30 <z_remove_thread_from_ready_q+0x44>)
    1d0a:	f7ff fef1 	bl	1af0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    1d0e:	7b63      	ldrb	r3, [r4, #13]
    1d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    1d14:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    1d16:	4b07      	ldr	r3, [pc, #28]	; (1d34 <z_remove_thread_from_ready_q+0x48>)
    1d18:	6898      	ldr	r0, [r3, #8]
    1d1a:	1b03      	subs	r3, r0, r4
    1d1c:	4258      	negs	r0, r3
    1d1e:	4158      	adcs	r0, r3
    1d20:	f7ff fefc 	bl	1b1c <update_cache>
	__asm__ volatile(
    1d24:	f385 8811 	msr	BASEPRI, r5
    1d28:	f3bf 8f6f 	isb	sy
}
    1d2c:	bd38      	pop	{r3, r4, r5, pc}
    1d2e:	bf00      	nop
    1d30:	200001d8 	.word	0x200001d8
    1d34:	200001b0 	.word	0x200001b0

00001d38 <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
    1d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
    1d3a:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
    1d3c:	f001 f88c 	bl	2e58 <z_tick_get_32>
    1d40:	1834      	adds	r4, r6, r0
	__asm__ volatile(
    1d42:	f04f 0320 	mov.w	r3, #32
    1d46:	f3ef 8711 	mrs	r7, BASEPRI
    1d4a:	f383 8811 	msr	BASEPRI, r3
    1d4e:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    1d52:	4d0d      	ldr	r5, [pc, #52]	; (1d88 <z_tick_sleep.part.19+0x50>)
    1d54:	4b0d      	ldr	r3, [pc, #52]	; (1d8c <z_tick_sleep.part.19+0x54>)
    1d56:	68a8      	ldr	r0, [r5, #8]
    1d58:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
    1d5a:	f7ff ffc7 	bl	1cec <z_remove_thread_from_ready_q>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    1d5e:	68a8      	ldr	r0, [r5, #8]
    1d60:	490b      	ldr	r1, [pc, #44]	; (1d90 <z_tick_sleep.part.19+0x58>)
    1d62:	4632      	mov	r2, r6
    1d64:	3018      	adds	r0, #24
    1d66:	f000 f9af 	bl	20c8 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
    1d6a:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    1d6c:	7b53      	ldrb	r3, [r2, #13]
    1d6e:	f043 0310 	orr.w	r3, r3, #16
    1d72:	7353      	strb	r3, [r2, #13]
    1d74:	4638      	mov	r0, r7
    1d76:	f7fe fe5f 	bl	a38 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    1d7a:	f001 f86d 	bl	2e58 <z_tick_get_32>
    1d7e:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    1d80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    1d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d86:	bf00      	nop
    1d88:	200001b0 	.word	0x200001b0
    1d8c:	200001e0 	.word	0x200001e0
    1d90:	00002d09 	.word	0x00002d09

00001d94 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    1d94:	4b04      	ldr	r3, [pc, #16]	; (1da8 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    1d96:	2100      	movs	r1, #0
    1d98:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    1d9c:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    1da0:	4608      	mov	r0, r1
    1da2:	f7ff be65 	b.w	1a70 <k_sched_time_slice_set>
    1da6:	bf00      	nop
    1da8:	200001b0 	.word	0x200001b0

00001dac <z_impl_k_yield>:
{
    1dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    1dae:	4c23      	ldr	r4, [pc, #140]	; (1e3c <z_impl_k_yield+0x90>)
    1db0:	4b23      	ldr	r3, [pc, #140]	; (1e40 <z_impl_k_yield+0x94>)
    1db2:	68a2      	ldr	r2, [r4, #8]
    1db4:	429a      	cmp	r2, r3
    1db6:	d029      	beq.n	1e0c <z_impl_k_yield+0x60>
    1db8:	f04f 0320 	mov.w	r3, #32
    1dbc:	f3ef 8611 	mrs	r6, BASEPRI
    1dc0:	f383 8811 	msr	BASEPRI, r3
    1dc4:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    1dc8:	f104 0528 	add.w	r5, r4, #40	; 0x28
    1dcc:	68a1      	ldr	r1, [r4, #8]
    1dce:	4628      	mov	r0, r5
    1dd0:	f7ff fe8e 	bl	1af0 <z_priq_dumb_remove>
	return list->head == list;
    1dd4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
    1dd6:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    1dd8:	42aa      	cmp	r2, r5
    1dda:	d028      	beq.n	1e2e <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1ddc:	b33a      	cbz	r2, 1e2e <z_impl_k_yield+0x82>
    1dde:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    1de0:	f993 100e 	ldrsb.w	r1, [r3, #14]
    1de4:	f992 700e 	ldrsb.w	r7, [r2, #14]
    1de8:	428f      	cmp	r7, r1
    1dea:	dd1b      	ble.n	1e24 <z_impl_k_yield+0x78>
	node->prev = successor->prev;
    1dec:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    1dee:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
    1df2:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    1df4:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
    1df6:	7b5a      	ldrb	r2, [r3, #13]
    1df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1dfc:	735a      	strb	r2, [r3, #13]
			update_cache(1);
    1dfe:	2001      	movs	r0, #1
    1e00:	f7ff fe8c 	bl	1b1c <update_cache>
	__asm__ volatile(
    1e04:	f386 8811 	msr	BASEPRI, r6
    1e08:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    1e0c:	f04f 0320 	mov.w	r3, #32
    1e10:	f3ef 8011 	mrs	r0, BASEPRI
    1e14:	f383 8811 	msr	BASEPRI, r3
    1e18:	f3bf 8f6f 	isb	sy
}
    1e1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1e20:	f7fe be0a 	b.w	a38 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    1e24:	4282      	cmp	r2, r0
    1e26:	d002      	beq.n	1e2e <z_impl_k_yield+0x82>
    1e28:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    1e2a:	2a00      	cmp	r2, #0
    1e2c:	d1da      	bne.n	1de4 <z_impl_k_yield+0x38>
	node->prev = list->tail;
    1e2e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1e30:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
    1e32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
    1e34:	601d      	str	r5, [r3, #0]
	list->tail->next = node;
    1e36:	6013      	str	r3, [r2, #0]
	list->tail = node;
    1e38:	62e3      	str	r3, [r4, #44]	; 0x2c
    1e3a:	e7dc      	b.n	1df6 <z_impl_k_yield+0x4a>
    1e3c:	200001b0 	.word	0x200001b0
    1e40:	200000d8 	.word	0x200000d8

00001e44 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
    1e44:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (ms == K_FOREVER) {
    1e46:	1c43      	adds	r3, r0, #1
{
    1e48:	4604      	mov	r4, r0
	if (ms == K_FOREVER) {
    1e4a:	d105      	bne.n	1e58 <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
    1e4c:	4b10      	ldr	r3, [pc, #64]	; (1e90 <z_impl_k_sleep+0x4c>)
    1e4e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    1e50:	f000 f886 	bl	1f60 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
    1e54:	4620      	mov	r0, r4
    1e56:	bd38      	pop	{r3, r4, r5, pc}
    1e58:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    1e5c:	f240 30e7 	movw	r0, #999	; 0x3e7
    1e60:	2100      	movs	r1, #0
    1e62:	fbe5 0104 	umlal	r0, r1, r5, r4
    1e66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1e6a:	2300      	movs	r3, #0
    1e6c:	f7fe f936 	bl	dc <__aeabi_uldivmod>
	if (ticks == 0) {
    1e70:	4604      	mov	r4, r0
    1e72:	b948      	cbnz	r0, 1e88 <z_impl_k_sleep+0x44>
	z_impl_k_yield();
    1e74:	f7ff ff9a 	bl	1dac <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
    1e78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1e7c:	fb84 0100 	smull	r0, r1, r4, r0
    1e80:	0bc4      	lsrs	r4, r0, #15
    1e82:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    1e86:	e7e5      	b.n	1e54 <z_impl_k_sleep+0x10>
    1e88:	f7ff ff56 	bl	1d38 <z_tick_sleep.part.19>
    1e8c:	4604      	mov	r4, r0
    1e8e:	e7f3      	b.n	1e78 <z_impl_k_sleep+0x34>
    1e90:	200001b0 	.word	0x200001b0

00001e94 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    1e94:	4b01      	ldr	r3, [pc, #4]	; (1e9c <z_impl_k_current_get+0x8>)
    1e96:	6898      	ldr	r0, [r3, #8]
    1e98:	4770      	bx	lr
    1e9a:	bf00      	nop
    1e9c:	200001b0 	.word	0x200001b0

00001ea0 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    1ea0:	b510      	push	{r4, lr}
    1ea2:	4602      	mov	r2, r0
    1ea4:	f04f 0320 	mov.w	r3, #32
    1ea8:	f3ef 8411 	mrs	r4, BASEPRI
    1eac:	f383 8811 	msr	BASEPRI, r3
    1eb0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
    1eb4:	7b43      	ldrb	r3, [r0, #13]
    1eb6:	0759      	lsls	r1, r3, #29
    1eb8:	d404      	bmi.n	1ec4 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
    1eba:	f384 8811 	msr	BASEPRI, r4
    1ebe:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
    1ec2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1ec4:	f023 0304 	bic.w	r3, r3, #4
    1ec8:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
    1eca:	f000 ff4e 	bl	2d6a <z_is_thread_ready>
    1ece:	b110      	cbz	r0, 1ed6 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
    1ed0:	4610      	mov	r0, r2
    1ed2:	f7ff fe5d 	bl	1b90 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
    1ed6:	4621      	mov	r1, r4
    1ed8:	4802      	ldr	r0, [pc, #8]	; (1ee4 <z_impl_k_thread_start+0x44>)
}
    1eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
    1ede:	f000 beec 	b.w	2cba <z_reschedule>
    1ee2:	bf00      	nop
    1ee4:	200001f3 	.word	0x200001f3

00001ee8 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    1ee8:	b530      	push	{r4, r5, lr}
    1eea:	b087      	sub	sp, #28
    1eec:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    1eee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    1ef0:	9504      	str	r5, [sp, #16]
    1ef2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    1ef4:	9503      	str	r5, [sp, #12]
    1ef6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    1ef8:	9502      	str	r5, [sp, #8]
    1efa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    1efc:	9501      	str	r5, [sp, #4]
    1efe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    1f00:	9500      	str	r5, [sp, #0]
    1f02:	f7fe fe15 	bl	b30 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    1f06:	4b03      	ldr	r3, [pc, #12]	; (1f14 <z_setup_new_thread+0x2c>)
    1f08:	689b      	ldr	r3, [r3, #8]
    1f0a:	b103      	cbz	r3, 1f0e <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    1f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1f0e:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    1f10:	b007      	add	sp, #28
    1f12:	bd30      	pop	{r4, r5, pc}
    1f14:	200001b0 	.word	0x200001b0

00001f18 <z_thread_single_suspend>:
#include <syscalls/k_thread_create_mrsh.c>
#endif /* CONFIG_USERSPACE */
#endif /* CONFIG_MULTITHREADING */

void z_thread_single_suspend(struct k_thread *thread)
{
    1f18:	b510      	push	{r4, lr}
    1f1a:	4604      	mov	r4, r0
	if (z_is_thread_ready(thread)) {
    1f1c:	f000 ff25 	bl	2d6a <z_is_thread_ready>
    1f20:	b110      	cbz	r0, 1f28 <z_thread_single_suspend+0x10>
		z_remove_thread_from_ready_q(thread);
    1f22:	4620      	mov	r0, r4
    1f24:	f7ff fee2 	bl	1cec <z_remove_thread_from_ready_q>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    1f28:	f104 0018 	add.w	r0, r4, #24
    1f2c:	f000 ff54 	bl	2dd8 <z_abort_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    1f30:	7b63      	ldrb	r3, [r4, #13]
    1f32:	f043 0310 	orr.w	r3, r3, #16
    1f36:	7363      	strb	r3, [r4, #13]

	(void)z_abort_thread_timeout(thread);

	z_mark_thread_as_suspended(thread);

	if (thread == _current) {
    1f38:	4b08      	ldr	r3, [pc, #32]	; (1f5c <z_thread_single_suspend+0x44>)
    1f3a:	689b      	ldr	r3, [r3, #8]
    1f3c:	42a3      	cmp	r3, r4
    1f3e:	d10b      	bne.n	1f58 <z_thread_single_suspend+0x40>
	__asm__ volatile(
    1f40:	f04f 0320 	mov.w	r3, #32
    1f44:	f3ef 8011 	mrs	r0, BASEPRI
    1f48:	f383 8811 	msr	BASEPRI, r3
    1f4c:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
    1f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    1f54:	f000 bebc 	b.w	2cd0 <z_reschedule_irqlock>
    1f58:	bd10      	pop	{r4, pc}
    1f5a:	bf00      	nop
    1f5c:	200001b0 	.word	0x200001b0

00001f60 <z_impl_k_thread_suspend>:

void z_impl_k_thread_suspend(struct k_thread *thread)
{
    1f60:	b538      	push	{r3, r4, r5, lr}
    1f62:	4605      	mov	r5, r0
    1f64:	f04f 0320 	mov.w	r3, #32
    1f68:	f3ef 8411 	mrs	r4, BASEPRI
    1f6c:	f383 8811 	msr	BASEPRI, r3
    1f70:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
    1f74:	f7ff ffd0 	bl	1f18 <z_thread_single_suspend>

	sys_trace_thread_suspend(thread);

	if (thread == _current) {
    1f78:	4b07      	ldr	r3, [pc, #28]	; (1f98 <z_impl_k_thread_suspend+0x38>)
    1f7a:	689b      	ldr	r3, [r3, #8]
    1f7c:	42ab      	cmp	r3, r5
    1f7e:	d105      	bne.n	1f8c <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
    1f80:	4621      	mov	r1, r4
    1f82:	4806      	ldr	r0, [pc, #24]	; (1f9c <z_impl_k_thread_suspend+0x3c>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
    1f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
    1f88:	f000 be97 	b.w	2cba <z_reschedule>
	__asm__ volatile(
    1f8c:	f384 8811 	msr	BASEPRI, r4
    1f90:	f3bf 8f6f 	isb	sy
}
    1f94:	bd38      	pop	{r3, r4, r5, pc}
    1f96:	bf00      	nop
    1f98:	200001b0 	.word	0x200001b0
    1f9c:	200001f3 	.word	0x200001f3

00001fa0 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    1fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    1fa4:	4e28      	ldr	r6, [pc, #160]	; (2048 <z_init_static_threads+0xa8>)
    1fa6:	4d29      	ldr	r5, [pc, #164]	; (204c <z_init_static_threads+0xac>)
{
    1fa8:	b087      	sub	sp, #28
    1faa:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    1fac:	42b5      	cmp	r5, r6
    1fae:	f105 0430 	add.w	r4, r5, #48	; 0x30
    1fb2:	d310      	bcc.n	1fd6 <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    1fb4:	f7ff fd88 	bl	1ac8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    1fb8:	4c24      	ldr	r4, [pc, #144]	; (204c <z_init_static_threads+0xac>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    1fba:	f8df a094 	ldr.w	sl, [pc, #148]	; 2050 <z_init_static_threads+0xb0>
			return (u32_t)((t * to_hz + off) / from_hz);
    1fbe:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    1fc2:	f240 36e7 	movw	r6, #999	; 0x3e7
    1fc6:	2700      	movs	r7, #0
    1fc8:	4544      	cmp	r4, r8
    1fca:	d321      	bcc.n	2010 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
    1fcc:	b007      	add	sp, #28
    1fce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    1fd2:	f7ff bdc1 	b.w	1b58 <k_sched_unlock>
		z_setup_new_thread(
    1fd6:	f854 3c04 	ldr.w	r3, [r4, #-4]
    1fda:	9305      	str	r3, [sp, #20]
    1fdc:	f854 3c10 	ldr.w	r3, [r4, #-16]
    1fe0:	9304      	str	r3, [sp, #16]
    1fe2:	f854 3c14 	ldr.w	r3, [r4, #-20]
    1fe6:	9303      	str	r3, [sp, #12]
    1fe8:	f854 3c18 	ldr.w	r3, [r4, #-24]
    1fec:	9302      	str	r3, [sp, #8]
    1fee:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    1ff2:	9301      	str	r3, [sp, #4]
    1ff4:	f854 3c20 	ldr.w	r3, [r4, #-32]
    1ff8:	9300      	str	r3, [sp, #0]
    1ffa:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    1ffe:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    2002:	f7ff ff71 	bl	1ee8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    2006:	f854 3c30 	ldr.w	r3, [r4, #-48]
    200a:	64dd      	str	r5, [r3, #76]	; 0x4c
    200c:	4625      	mov	r5, r4
    200e:	e7cd      	b.n	1fac <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
    2010:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2012:	1c4b      	adds	r3, r1, #1
    2014:	d004      	beq.n	2020 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
    2016:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
    2018:	b921      	cbnz	r1, 2024 <z_init_static_threads+0x84>
	z_impl_k_thread_start(thread);
    201a:	4628      	mov	r0, r5
    201c:	f7ff ff40 	bl	1ea0 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    2020:	3430      	adds	r4, #48	; 0x30
    2022:	e7d1      	b.n	1fc8 <z_init_static_threads+0x28>
    2024:	46b3      	mov	fp, r6
    2026:	46bc      	mov	ip, r7
    2028:	fbe9 bc01 	umlal	fp, ip, r9, r1
    202c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2030:	2300      	movs	r3, #0
    2032:	4658      	mov	r0, fp
    2034:	4661      	mov	r1, ip
    2036:	f7fe f851 	bl	dc <__aeabi_uldivmod>
    203a:	4651      	mov	r1, sl
    203c:	1c42      	adds	r2, r0, #1
    203e:	f105 0018 	add.w	r0, r5, #24
    2042:	f000 f841 	bl	20c8 <z_add_timeout>
    2046:	e7eb      	b.n	2020 <z_init_static_threads+0x80>
    2048:	20000fc4 	.word	0x20000fc4
    204c:	20000fc4 	.word	0x20000fc4
    2050:	00002d09 	.word	0x00002d09

00002054 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    2054:	4b03      	ldr	r3, [pc, #12]	; (2064 <elapsed+0x10>)
    2056:	681b      	ldr	r3, [r3, #0]
    2058:	b90b      	cbnz	r3, 205e <elapsed+0xa>
    205a:	f7fe bcc5 	b.w	9e8 <z_clock_elapsed>
}
    205e:	2000      	movs	r0, #0
    2060:	4770      	bx	lr
    2062:	bf00      	nop
    2064:	200001ec 	.word	0x200001ec

00002068 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2068:	6803      	ldr	r3, [r0, #0]
    206a:	b140      	cbz	r0, 207e <remove_timeout+0x16>
    206c:	4a07      	ldr	r2, [pc, #28]	; (208c <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    206e:	6852      	ldr	r2, [r2, #4]
    2070:	4290      	cmp	r0, r2
    2072:	d004      	beq.n	207e <remove_timeout+0x16>
	if (next(t) != NULL) {
    2074:	b11b      	cbz	r3, 207e <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    2076:	689a      	ldr	r2, [r3, #8]
    2078:	6881      	ldr	r1, [r0, #8]
    207a:	440a      	add	r2, r1
    207c:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    207e:	6842      	ldr	r2, [r0, #4]
    2080:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    2082:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    2084:	2300      	movs	r3, #0
	node->prev = NULL;
    2086:	e9c0 3300 	strd	r3, r3, [r0]
}
    208a:	4770      	bx	lr
    208c:	20000f4c 	.word	0x20000f4c

00002090 <next_timeout>:
	return list->head == list;
    2090:	4b0b      	ldr	r3, [pc, #44]	; (20c0 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    2092:	b510      	push	{r4, lr}
    2094:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2096:	429c      	cmp	r4, r3
    2098:	bf08      	it	eq
    209a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    209c:	f7ff ffda 	bl	2054 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    20a0:	b154      	cbz	r4, 20b8 <next_timeout+0x28>
    20a2:	68a3      	ldr	r3, [r4, #8]
    20a4:	1a18      	subs	r0, r3, r0
    20a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    20aa:	4b06      	ldr	r3, [pc, #24]	; (20c4 <next_timeout+0x34>)
    20ac:	691b      	ldr	r3, [r3, #16]
    20ae:	b113      	cbz	r3, 20b6 <next_timeout+0x26>
    20b0:	4298      	cmp	r0, r3
    20b2:	bfa8      	it	ge
    20b4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    20b6:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    20b8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    20bc:	e7f5      	b.n	20aa <next_timeout+0x1a>
    20be:	bf00      	nop
    20c0:	20000f4c 	.word	0x20000f4c
    20c4:	200001b0 	.word	0x200001b0

000020c8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    20c8:	b570      	push	{r4, r5, r6, lr}
    20ca:	4604      	mov	r4, r0
    20cc:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    20ce:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
    20d0:	f04f 0320 	mov.w	r3, #32
    20d4:	f3ef 8511 	mrs	r5, BASEPRI
    20d8:	f383 8811 	msr	BASEPRI, r3
    20dc:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    20e0:	f7ff ffb8 	bl	2054 <elapsed>
	return list->head == list;
    20e4:	4b18      	ldr	r3, [pc, #96]	; (2148 <z_add_timeout+0x80>)
    20e6:	681a      	ldr	r2, [r3, #0]
    20e8:	2e01      	cmp	r6, #1
    20ea:	bfac      	ite	ge
    20ec:	1980      	addge	r0, r0, r6
    20ee:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
    20f0:	429a      	cmp	r2, r3
    20f2:	60a0      	str	r0, [r4, #8]
    20f4:	d001      	beq.n	20fa <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    20f6:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    20f8:	b932      	cbnz	r2, 2108 <z_add_timeout+0x40>
	node->prev = list->tail;
    20fa:	685a      	ldr	r2, [r3, #4]
    20fc:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    20fe:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    2100:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
    2102:	6014      	str	r4, [r2, #0]
	list->tail = node;
    2104:	605c      	str	r4, [r3, #4]
    2106:	e00a      	b.n	211e <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    2108:	6890      	ldr	r0, [r2, #8]
    210a:	68a1      	ldr	r1, [r4, #8]
    210c:	4288      	cmp	r0, r1
    210e:	dd15      	ble.n	213c <z_add_timeout+0x74>
				t->dticks -= to->dticks;
    2110:	1a41      	subs	r1, r0, r1
    2112:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    2114:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    2116:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
    211a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    211c:	6054      	str	r4, [r2, #4]
	return list->head == list;
    211e:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2120:	429a      	cmp	r2, r3
    2122:	d006      	beq.n	2132 <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    2124:	4294      	cmp	r4, r2
    2126:	d104      	bne.n	2132 <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
    2128:	f7ff ffb2 	bl	2090 <next_timeout>
    212c:	2100      	movs	r1, #0
    212e:	f7fe fc05 	bl	93c <z_clock_set_timeout>
	__asm__ volatile(
    2132:	f385 8811 	msr	BASEPRI, r5
    2136:	f3bf 8f6f 	isb	sy
		}
	}
}
    213a:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    213c:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    213e:	42b2      	cmp	r2, r6
    2140:	60a1      	str	r1, [r4, #8]
    2142:	d0da      	beq.n	20fa <z_add_timeout+0x32>
    2144:	6812      	ldr	r2, [r2, #0]
    2146:	e7d7      	b.n	20f8 <z_add_timeout+0x30>
    2148:	20000f4c 	.word	0x20000f4c

0000214c <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    214c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    2150:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    2152:	f7ff fd95 	bl	1c80 <z_time_slice>
	__asm__ volatile(
    2156:	f04f 0320 	mov.w	r3, #32
    215a:	f3ef 8511 	mrs	r5, BASEPRI
    215e:	f383 8811 	msr	BASEPRI, r3
    2162:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    2166:	4e21      	ldr	r6, [pc, #132]	; (21ec <z_clock_announce+0xa0>)
    2168:	4f21      	ldr	r7, [pc, #132]	; (21f0 <z_clock_announce+0xa4>)
	return list->head == list;
    216a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 21f4 <z_clock_announce+0xa8>
    216e:	6034      	str	r4, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    2170:	46b8      	mov	r8, r7
    2172:	f8d9 4000 	ldr.w	r4, [r9]
    2176:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2178:	454c      	cmp	r4, r9
    217a:	e9d7 bc00 	ldrd	fp, ip, [r7]
    217e:	d005      	beq.n	218c <z_clock_announce+0x40>
    2180:	b124      	cbz	r4, 218c <z_clock_announce+0x40>
    2182:	68a3      	ldr	r3, [r4, #8]
    2184:	4293      	cmp	r3, r2
    2186:	dd14      	ble.n	21b2 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    2188:	1a9b      	subs	r3, r3, r2
    218a:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
    218c:	eb1b 0002 	adds.w	r0, fp, r2
    2190:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
    2194:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    2196:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
    219a:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    219c:	f7ff ff78 	bl	2090 <next_timeout>
    21a0:	4621      	mov	r1, r4
    21a2:	f7fe fbcb 	bl	93c <z_clock_set_timeout>
	__asm__ volatile(
    21a6:	f385 8811 	msr	BASEPRI, r5
    21aa:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    21ae:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
    21b2:	eb1b 0003 	adds.w	r0, fp, r3
    21b6:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
    21ba:	1ad3      	subs	r3, r2, r3
    21bc:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    21be:	2300      	movs	r3, #0
		curr_tick += dt;
    21c0:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
    21c4:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    21c6:	4620      	mov	r0, r4
    21c8:	f7ff ff4e 	bl	2068 <remove_timeout>
    21cc:	f385 8811 	msr	BASEPRI, r5
    21d0:	f3bf 8f6f 	isb	sy
		t->fn(t);
    21d4:	68e3      	ldr	r3, [r4, #12]
    21d6:	4798      	blx	r3
	__asm__ volatile(
    21d8:	f04f 0320 	mov.w	r3, #32
    21dc:	f3ef 8511 	mrs	r5, BASEPRI
    21e0:	f383 8811 	msr	BASEPRI, r3
    21e4:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    21e8:	e7c3      	b.n	2172 <z_clock_announce+0x26>
    21ea:	bf00      	nop
    21ec:	200001ec 	.word	0x200001ec
    21f0:	20000000 	.word	0x20000000
    21f4:	20000f4c 	.word	0x20000f4c

000021f8 <z_tick_get>:

s64_t z_tick_get(void)
{
    21f8:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
    21fc:	f04f 0320 	mov.w	r3, #32
    2200:	f3ef 8411 	mrs	r4, BASEPRI
    2204:	f383 8811 	msr	BASEPRI, r3
    2208:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    220c:	f7fe fbec 	bl	9e8 <z_clock_elapsed>
    2210:	4b07      	ldr	r3, [pc, #28]	; (2230 <z_tick_get+0x38>)
    2212:	e9d3 2300 	ldrd	r2, r3, [r3]
    2216:	eb12 0b00 	adds.w	fp, r2, r0
    221a:	f143 0c00 	adc.w	ip, r3, #0
    221e:	4658      	mov	r0, fp
    2220:	4661      	mov	r1, ip
	__asm__ volatile(
    2222:	f384 8811 	msr	BASEPRI, r4
    2226:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    222a:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
    222e:	bf00      	nop
    2230:	20000000 	.word	0x20000000

00002234 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    2234:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    2236:	4c07      	ldr	r4, [pc, #28]	; (2254 <init_static_pools+0x20>)
    2238:	4d07      	ldr	r5, [pc, #28]	; (2258 <init_static_pools+0x24>)
    223a:	42ac      	cmp	r4, r5
    223c:	d301      	bcc.n	2242 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    223e:	2000      	movs	r0, #0
    2240:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    2242:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
    2246:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
    2248:	e9c4 3305 	strd	r3, r3, [r4, #20]
    224c:	f000 f890 	bl	2370 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    2250:	341c      	adds	r4, #28
    2252:	e7f2      	b.n	223a <init_static_pools+0x6>
    2254:	20000fc4 	.word	0x20000fc4
    2258:	20000fc4 	.word	0x20000fc4

0000225c <k_sleep.constprop.0>:
	return z_impl_k_sleep(ms);
    225c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2260:	f7ff bdf0 	b.w	1e44 <z_impl_k_sleep>

00002264 <gpio_write.constprop.0>:
	return z_impl_gpio_config(port, access_op, pin, flags);
}


extern int z_impl_gpio_write(struct device * port, int access_op, u32_t pin, u32_t value);
static inline int gpio_write(struct device * port, int access_op, u32_t pin, u32_t value)
    2264:	b410      	push	{r4}
    2266:	4613      	mov	r3, r2
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
    2268:	6842      	ldr	r2, [r0, #4]
    226a:	6854      	ldr	r4, [r2, #4]
    226c:	460a      	mov	r2, r1
    226e:	46a4      	mov	ip, r4
    2270:	2100      	movs	r1, #0
		return (int) arch_syscall_invoke4(*(uintptr_t *)&port, *(uintptr_t *)&access_op, *(uintptr_t *)&pin, *(uintptr_t *)&value, K_SYSCALL_GPIO_WRITE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_write(port, access_op, pin, value);
}
    2272:	bc10      	pop	{r4}
    2274:	4760      	bx	ip

00002276 <led_init>:
#include "es_led.h"

#include <gpio.h>

int led_init(es_led_t *led, char *dev_name, u32_t pin)
{
    2276:	b538      	push	{r3, r4, r5, lr}
    2278:	4604      	mov	r4, r0
    227a:	4615      	mov	r5, r2
    227c:	4608      	mov	r0, r1
    227e:	f7ff fad9 	bl	1834 <z_impl_device_get_binding>
    led->dev   = device_get_binding(dev_name);
    led->pin   = pin;
    led->value = 1;
    2282:	2301      	movs	r3, #1
    led->pin   = pin;
    2284:	e9c4 0500 	strd	r0, r5, [r4]
    led->value = 1;
    2288:	7223      	strb	r3, [r4, #8]
	return api->config(port, access_op, pin, flags);
    228a:	6842      	ldr	r2, [r0, #4]
    228c:	2100      	movs	r1, #0
    228e:	6814      	ldr	r4, [r2, #0]
    2290:	462a      	mov	r2, r5
    2292:	47a0      	blx	r4

    gpio_pin_configure(led->dev, pin, GPIO_DIR_OUT);
    return 0;
}
    2294:	2000      	movs	r0, #0
    2296:	bd38      	pop	{r3, r4, r5, pc}

00002298 <set_all_led>:
    led->value = value;
    gpio_write(led->dev, 0, led->pin, led->value);
}

void set_all_led(es_led_t *led0, es_led_t *led1, es_led_t *led2, es_led_t *led3, u8_t value)
{
    2298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    229a:	f89d 4018 	ldrb.w	r4, [sp, #24]
    led0->value = value;
    229e:	7204      	strb	r4, [r0, #8]
{
    22a0:	460f      	mov	r7, r1
    22a2:	4616      	mov	r6, r2
    gpio_write(led0->dev, 0, led0->pin, led0->value);
    22a4:	e9d0 0100 	ldrd	r0, r1, [r0]
    22a8:	4622      	mov	r2, r4
{
    22aa:	461d      	mov	r5, r3
    gpio_write(led0->dev, 0, led0->pin, led0->value);
    22ac:	f7ff ffda 	bl	2264 <gpio_write.constprop.0>

    led1->value = value;
    gpio_write(led1->dev, 0, led1->pin, led1->value);
    22b0:	4622      	mov	r2, r4
    22b2:	e9d7 0100 	ldrd	r0, r1, [r7]
    led1->value = value;
    22b6:	723c      	strb	r4, [r7, #8]
    gpio_write(led1->dev, 0, led1->pin, led1->value);
    22b8:	f7ff ffd4 	bl	2264 <gpio_write.constprop.0>

    led2->value = value;
    gpio_write(led2->dev, 0, led2->pin, led2->value);
    22bc:	4622      	mov	r2, r4
    22be:	e9d6 0100 	ldrd	r0, r1, [r6]
    led2->value = value;
    22c2:	7234      	strb	r4, [r6, #8]
    gpio_write(led2->dev, 0, led2->pin, led2->value);
    22c4:	f7ff ffce 	bl	2264 <gpio_write.constprop.0>

    led3->value = value;
    22c8:	722c      	strb	r4, [r5, #8]
    gpio_write(led3->dev, 0, led3->pin, led3->value);
    22ca:	4622      	mov	r2, r4
    22cc:	e9d5 0100 	ldrd	r0, r1, [r5]
}
    22d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    gpio_write(led3->dev, 0, led3->pin, led3->value);
    22d4:	f7ff bfc6 	b.w	2264 <gpio_write.constprop.0>

000022d8 <turn_leds>:

void turn_leds(es_led_t *led0, es_led_t *led1, es_led_t *led2, es_led_t *led3,
                u8_t value0, u8_t value1, u8_t value2, u8_t value3)
{
    22d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    22dc:	460e      	mov	r6, r1
    22de:	4615      	mov	r5, r2
    22e0:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
    22e4:	f89d 2020 	ldrb.w	r2, [sp, #32]
    22e8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    led0->value = value0;
    22ec:	7202      	strb	r2, [r0, #8]
    gpio_write(led0->dev, 0, led0->pin, led0->value);
    22ee:	e9d0 0100 	ldrd	r0, r1, [r0]
{
    22f2:	461c      	mov	r4, r3
    22f4:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
    gpio_write(led0->dev, 0, led0->pin, led0->value);
    22f8:	f7ff ffb4 	bl	2264 <gpio_write.constprop.0>

    led1->value = value1;
    gpio_write(led1->dev, 0, led1->pin, led1->value);
    22fc:	464a      	mov	r2, r9
    22fe:	e9d6 0100 	ldrd	r0, r1, [r6]
    led1->value = value1;
    2302:	f886 9008 	strb.w	r9, [r6, #8]
    gpio_write(led1->dev, 0, led1->pin, led1->value);
    2306:	f7ff ffad 	bl	2264 <gpio_write.constprop.0>

    led2->value = value2;
    gpio_write(led2->dev, 0, led2->pin, led2->value);
    230a:	4642      	mov	r2, r8
    230c:	e9d5 0100 	ldrd	r0, r1, [r5]
    led2->value = value2;
    2310:	f885 8008 	strb.w	r8, [r5, #8]
    gpio_write(led2->dev, 0, led2->pin, led2->value);
    2314:	f7ff ffa6 	bl	2264 <gpio_write.constprop.0>

    led3->value = value3;
    2318:	7227      	strb	r7, [r4, #8]
    gpio_write(led3->dev, 0, led3->pin, led3->value);
    231a:	463a      	mov	r2, r7
    231c:	e9d4 0100 	ldrd	r0, r1, [r4]
}
    2320:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    gpio_write(led3->dev, 0, led3->pin, led3->value);
    2324:	f7ff bf9e 	b.w	2264 <gpio_write.constprop.0>

00002328 <button_create>:
#include "es_button.h"

int button_create(es_button_t* button, const char* dev_name, u32_t pin,
                     gpio_callback_handler_t callback)
{
    2328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    232a:	4604      	mov	r4, r0
    232c:	4615      	mov	r5, r2
    232e:	461e      	mov	r6, r3
    2330:	4608      	mov	r0, r1
    2332:	f7ff fa7f 	bl	1834 <z_impl_device_get_binding>
    button->dev = device_get_binding(dev_name);
    button->pin = pin;
    2336:	6125      	str	r5, [r4, #16]
    button->dev = device_get_binding(dev_name);
    2338:	6020      	str	r0, [r4, #0]
    233a:	6843      	ldr	r3, [r0, #4]
    233c:	462a      	mov	r2, r5
    233e:	681f      	ldr	r7, [r3, #0]
    2340:	2100      	movs	r1, #0
    2342:	f44f 739b 	mov.w	r3, #310	; 0x136
    2346:	47b8      	blx	r7
    gpio_pin_configure(button->dev, pin,
                       GPIO_DIR_IN | GPIO_PUD_PULL_UP | GPIO_INT | GPIO_INT_DEBOUNCE
                           | GPIO_INT_EDGE | GPIO_INT_ACTIVE_HIGH);
    gpio_init_callback(&button->gpio_cb, callback, BIT(pin));
    2348:	2201      	movs	r2, #1
    gpio_add_callback(button->dev, &button->gpio_cb);
    234a:	6820      	ldr	r0, [r4, #0]
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    234c:	60a6      	str	r6, [r4, #8]
    gpio_init_callback(&button->gpio_cb, callback, BIT(pin));
    234e:	fa02 f305 	lsl.w	r3, r2, r5
	callback->pin_mask = pin_mask;
    2352:	60e3      	str	r3, [r4, #12]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
    2354:	6843      	ldr	r3, [r0, #4]
    2356:	68db      	ldr	r3, [r3, #12]
    2358:	1d21      	adds	r1, r4, #4
    235a:	b103      	cbz	r3, 235e <button_create+0x36>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    235c:	4798      	blx	r3
    gpio_pin_enable_callback(button->dev, pin);
    235e:	6820      	ldr	r0, [r4, #0]
	if (api->enable_callback == NULL) {
    2360:	6843      	ldr	r3, [r0, #4]
    2362:	691b      	ldr	r3, [r3, #16]
    2364:	b113      	cbz	r3, 236c <button_create+0x44>
	return api->enable_callback(port, access_op, pin);
    2366:	462a      	mov	r2, r5
    2368:	2100      	movs	r1, #0
    236a:	4798      	blx	r3
    return 0;
}
    236c:	2000      	movs	r0, #0
    236e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002370 <z_sys_mem_pool_base_init>:

	return (*word >> (4*(bit / 4))) & 0xf;
}

void z_sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
    2370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    2374:	6846      	ldr	r6, [r0, #4]
    2376:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    2378:	6801      	ldr	r1, [r0, #0]

	p->max_inline_level = -1;

	for (i = 0; i < p->n_levels; i++) {
    237a:	f890 800a 	ldrb.w	r8, [r0, #10]
	p->max_inline_level = -1;
    237e:	23ff      	movs	r3, #255	; 0xff
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    2380:	fb06 fc07 	mul.w	ip, r6, r7
	p->max_inline_level = -1;
    2384:	72c3      	strb	r3, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    2386:	4461      	add	r1, ip
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    2388:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
    238a:	2300      	movs	r3, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
    238c:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < p->n_levels; i++) {
    2390:	4598      	cmp	r8, r3
    2392:	dc05      	bgt.n	23a0 <z_sys_mem_pool_base_init+0x30>
    2394:	2300      	movs	r3, #0
		}

		sz = WB_DN(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
    2396:	4619      	mov	r1, r3
    2398:	428f      	cmp	r7, r1
    239a:	dc20      	bgt.n	23de <z_sys_mem_pool_base_init+0x6e>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
	}
}
    239c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sys_dlist_init(&p->levels[i].free_list);
    23a0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		int nblocks = buflen / sz;
    23a4:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
    23a8:	fb09 fe03 	mul.w	lr, r9, r3
    23ac:	eb0a 040e 	add.w	r4, sl, lr
    23b0:	f104 0b04 	add.w	fp, r4, #4
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    23b4:	2d20      	cmp	r5, #32
    23b6:	e9c4 bb01 	strd	fp, fp, [r4, #4]
    23ba:	d805      	bhi.n	23c8 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
    23bc:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
    23be:	0892      	lsrs	r2, r2, #2
    23c0:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
    23c4:	3301      	adds	r3, #1
    23c6:	e7e3      	b.n	2390 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
    23c8:	f115 041f 	adds.w	r4, r5, #31
    23cc:	bf48      	it	mi
    23ce:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
    23d2:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
    23d4:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
    23d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    23dc:	e7ef      	b.n	23be <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
    23de:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
    23e0:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
    23e2:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
    23e6:	18ec      	adds	r4, r5, r3
	node->next = list;
    23e8:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
    23ec:	6895      	ldr	r5, [r2, #8]
    23ee:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
    23f0:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
    23f2:	3101      	adds	r1, #1
    23f4:	602c      	str	r4, [r5, #0]
	list->tail = node;
    23f6:	4433      	add	r3, r6
    23f8:	6094      	str	r4, [r2, #8]
    23fa:	e7cd      	b.n	2398 <z_sys_mem_pool_base_init+0x28>

000023fc <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    23fc:	4604      	mov	r4, r0
    23fe:	b508      	push	{r3, lr}
    2400:	4608      	mov	r0, r1
    2402:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    2404:	461a      	mov	r2, r3
    2406:	47a0      	blx	r4
	return z_impl_k_current_get();
    2408:	f7ff fd44 	bl	1e94 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    240c:	f7fe fd0c 	bl	e28 <z_impl_k_thread_abort>

00002410 <arch_printk_char_out>:
}
    2410:	2000      	movs	r0, #0
    2412:	4770      	bx	lr

00002414 <print_err>:
{
    2414:	b570      	push	{r4, r5, r6, lr}
    2416:	4604      	mov	r4, r0
    2418:	460d      	mov	r5, r1
	out('E', ctx);
    241a:	2045      	movs	r0, #69	; 0x45
    241c:	47a0      	blx	r4
	out('R', ctx);
    241e:	4629      	mov	r1, r5
    2420:	2052      	movs	r0, #82	; 0x52
    2422:	47a0      	blx	r4
	out('R', ctx);
    2424:	4629      	mov	r1, r5
    2426:	4623      	mov	r3, r4
    2428:	2052      	movs	r0, #82	; 0x52
}
    242a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    242e:	4718      	bx	r3

00002430 <z_vprintk>:
{
    2430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2434:	b08b      	sub	sp, #44	; 0x2c
    2436:	461c      	mov	r4, r3
	char length_mod = 0;
    2438:	f04f 0800 	mov.w	r8, #0
    243c:	1e53      	subs	r3, r2, #1
{
    243e:	4606      	mov	r6, r0
    2440:	460f      	mov	r7, r1
    2442:	9302      	str	r3, [sp, #8]
	int min_width = -1;
    2444:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    2448:	46c1      	mov	r9, r8
			might_format = 0;
    244a:	2500      	movs	r5, #0
					break;
    244c:	e005      	b.n	245a <z_vprintk+0x2a>
		if (!might_format) {
    244e:	b96d      	cbnz	r5, 246c <z_vprintk+0x3c>
			if (*fmt != '%') {
    2450:	2825      	cmp	r0, #37	; 0x25
    2452:	f000 814f 	beq.w	26f4 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
    2456:	4639      	mov	r1, r7
    2458:	47b0      	blx	r6
	while (*fmt) {
    245a:	9b02      	ldr	r3, [sp, #8]
    245c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    2460:	9302      	str	r3, [sp, #8]
    2462:	2800      	cmp	r0, #0
    2464:	d1f3      	bne.n	244e <z_vprintk+0x1e>
}
    2466:	b00b      	add	sp, #44	; 0x2c
    2468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    246c:	2864      	cmp	r0, #100	; 0x64
    246e:	d06e      	beq.n	254e <z_vprintk+0x11e>
    2470:	d81a      	bhi.n	24a8 <z_vprintk+0x78>
    2472:	2839      	cmp	r0, #57	; 0x39
    2474:	d80a      	bhi.n	248c <z_vprintk+0x5c>
    2476:	2831      	cmp	r0, #49	; 0x31
    2478:	d260      	bcs.n	253c <z_vprintk+0x10c>
    247a:	282d      	cmp	r0, #45	; 0x2d
    247c:	f000 8140 	beq.w	2700 <z_vprintk+0x2d0>
    2480:	2830      	cmp	r0, #48	; 0x30
    2482:	d04c      	beq.n	251e <z_vprintk+0xee>
    2484:	2825      	cmp	r0, #37	; 0x25
    2486:	d107      	bne.n	2498 <z_vprintk+0x68>
				out((int)'%', ctx);
    2488:	4639      	mov	r1, r7
    248a:	e00b      	b.n	24a4 <z_vprintk+0x74>
			switch (*fmt) {
    248c:	2858      	cmp	r0, #88	; 0x58
    248e:	f000 80bb 	beq.w	2608 <z_vprintk+0x1d8>
    2492:	2863      	cmp	r0, #99	; 0x63
    2494:	f000 812a 	beq.w	26ec <z_vprintk+0x2bc>
					out((int)'%', ctx);
    2498:	4639      	mov	r1, r7
    249a:	2025      	movs	r0, #37	; 0x25
    249c:	47b0      	blx	r6
					out((int)*fmt, ctx);
    249e:	9b02      	ldr	r3, [sp, #8]
    24a0:	7818      	ldrb	r0, [r3, #0]
    24a2:	4639      	mov	r1, r7
    24a4:	47b0      	blx	r6
    24a6:	e7d0      	b.n	244a <z_vprintk+0x1a>
			switch (*fmt) {
    24a8:	2870      	cmp	r0, #112	; 0x70
    24aa:	f000 80a3 	beq.w	25f4 <z_vprintk+0x1c4>
    24ae:	d811      	bhi.n	24d4 <z_vprintk+0xa4>
    24b0:	2869      	cmp	r0, #105	; 0x69
    24b2:	d04c      	beq.n	254e <z_vprintk+0x11e>
    24b4:	286c      	cmp	r0, #108	; 0x6c
    24b6:	d105      	bne.n	24c4 <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
    24b8:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    24bc:	d12a      	bne.n	2514 <z_vprintk+0xe4>
					length_mod = 'L';
    24be:	f04f 084c 	mov.w	r8, #76	; 0x4c
    24c2:	e7ca      	b.n	245a <z_vprintk+0x2a>
			switch (*fmt) {
    24c4:	2868      	cmp	r0, #104	; 0x68
    24c6:	d1e7      	bne.n	2498 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
    24c8:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
    24cc:	d122      	bne.n	2514 <z_vprintk+0xe4>
					length_mod = 'H';
    24ce:	f04f 0848 	mov.w	r8, #72	; 0x48
    24d2:	e7c2      	b.n	245a <z_vprintk+0x2a>
			switch (*fmt) {
    24d4:	2875      	cmp	r0, #117	; 0x75
    24d6:	d071      	beq.n	25bc <z_vprintk+0x18c>
    24d8:	d818      	bhi.n	250c <z_vprintk+0xdc>
    24da:	2873      	cmp	r0, #115	; 0x73
    24dc:	d1dc      	bne.n	2498 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
    24de:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
    24e2:	46ab      	mov	fp, r5
    24e4:	465b      	mov	r3, fp
    24e6:	f81b 0b01 	ldrb.w	r0, [fp], #1
    24ea:	2800      	cmp	r0, #0
    24ec:	f040 80fb 	bne.w	26e6 <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
    24f0:	f1b9 0f03 	cmp.w	r9, #3
    24f4:	f040 810a 	bne.w	270c <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
    24f8:	1b5d      	subs	r5, r3, r5
    24fa:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
    24fe:	2d00      	cmp	r5, #0
    2500:	dda3      	ble.n	244a <z_vprintk+0x1a>
						out(' ', ctx);
    2502:	4639      	mov	r1, r7
    2504:	2020      	movs	r0, #32
    2506:	47b0      	blx	r6
    2508:	3d01      	subs	r5, #1
    250a:	e7f8      	b.n	24fe <z_vprintk+0xce>
			switch (*fmt) {
    250c:	2878      	cmp	r0, #120	; 0x78
    250e:	d07b      	beq.n	2608 <z_vprintk+0x1d8>
    2510:	287a      	cmp	r0, #122	; 0x7a
    2512:	d1c1      	bne.n	2498 <z_vprintk+0x68>
				} else if (length_mod == 0) {
    2514:	f1b8 0f00 	cmp.w	r8, #0
    2518:	d1be      	bne.n	2498 <z_vprintk+0x68>
    251a:	4680      	mov	r8, r0
    251c:	e79d      	b.n	245a <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
    251e:	f1ba 0f00 	cmp.w	sl, #0
    2522:	da0e      	bge.n	2542 <z_vprintk+0x112>
    2524:	f1b9 0f00 	cmp.w	r9, #0
    2528:	f000 80ed 	beq.w	2706 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
    252c:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    2530:	f1b9 0f00 	cmp.w	r9, #0
    2534:	bf08      	it	eq
    2536:	f04f 0902 	moveq.w	r9, #2
    253a:	e78e      	b.n	245a <z_vprintk+0x2a>
				if (min_width < 0) {
    253c:	f1ba 0f00 	cmp.w	sl, #0
    2540:	dbf4      	blt.n	252c <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
    2542:	230a      	movs	r3, #10
    2544:	fb03 0a0a 	mla	sl, r3, sl, r0
    2548:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    254c:	e7f0      	b.n	2530 <z_vprintk+0x100>
				if (length_mod == 'z') {
    254e:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    2552:	d102      	bne.n	255a <z_vprintk+0x12a>
					d = va_arg(ap, int);
    2554:	f854 5b04 	ldr.w	r5, [r4], #4
    2558:	e01f      	b.n	259a <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
    255a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    255e:	d0f9      	beq.n	2554 <z_vprintk+0x124>
				} else if (length_mod == 'L') {
    2560:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    2564:	d1f6      	bne.n	2554 <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
    2566:	3407      	adds	r4, #7
    2568:	f024 0407 	bic.w	r4, r4, #7
    256c:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
    2570:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
    2574:	9106      	str	r1, [sp, #24]
    2576:	f143 0100 	adc.w	r1, r3, #0
    257a:	9107      	str	r1, [sp, #28]
    257c:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    2580:	2100      	movs	r1, #0
    2582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2586:	4561      	cmp	r1, ip
    2588:	bf08      	it	eq
    258a:	4558      	cmpeq	r0, fp
    258c:	d204      	bcs.n	2598 <z_vprintk+0x168>
						print_err(out, ctx);
    258e:	4639      	mov	r1, r7
    2590:	4630      	mov	r0, r6
    2592:	f7ff ff3f 	bl	2414 <print_err>
						break;
    2596:	e758      	b.n	244a <z_vprintk+0x1a>
					d = lld;
    2598:	4615      	mov	r5, r2
				if (d < 0) {
    259a:	2d00      	cmp	r5, #0
    259c:	da05      	bge.n	25aa <z_vprintk+0x17a>
					out((int)'-', ctx);
    259e:	4639      	mov	r1, r7
    25a0:	202d      	movs	r0, #45	; 0x2d
    25a2:	47b0      	blx	r6
					d = -d;
    25a4:	426d      	negs	r5, r5
					min_width--;
    25a6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    25aa:	f8cd a000 	str.w	sl, [sp]
    25ae:	464b      	mov	r3, r9
    25b0:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
    25b2:	4639      	mov	r1, r7
    25b4:	4630      	mov	r0, r6
    25b6:	f7fe f89d 	bl	6f4 <_printk_dec_ulong>
				break;
    25ba:	e746      	b.n	244a <z_vprintk+0x1a>
				if (length_mod == 'z') {
    25bc:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    25c0:	d102      	bne.n	25c8 <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
    25c2:	f854 2b04 	ldr.w	r2, [r4], #4
    25c6:	e011      	b.n	25ec <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
    25c8:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    25cc:	d0f9      	beq.n	25c2 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
    25ce:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    25d2:	d1f6      	bne.n	25c2 <z_vprintk+0x192>
					unsigned long long llu =
    25d4:	3407      	adds	r4, #7
    25d6:	f024 0407 	bic.w	r4, r4, #7
    25da:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    25de:	2100      	movs	r1, #0
    25e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    25e4:	4299      	cmp	r1, r3
    25e6:	bf08      	it	eq
    25e8:	4290      	cmpeq	r0, r2
    25ea:	d3d0      	bcc.n	258e <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
    25ec:	f8cd a000 	str.w	sl, [sp]
    25f0:	464b      	mov	r3, r9
    25f2:	e7de      	b.n	25b2 <z_vprintk+0x182>
				out('0', ctx);
    25f4:	4639      	mov	r1, r7
    25f6:	2030      	movs	r0, #48	; 0x30
    25f8:	47b0      	blx	r6
				out('x', ctx);
    25fa:	4639      	mov	r1, r7
    25fc:	2078      	movs	r0, #120	; 0x78
    25fe:	47b0      	blx	r6
					min_width = 8;
    2600:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
    2604:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
    2608:	9b02      	ldr	r3, [sp, #8]
    260a:	781b      	ldrb	r3, [r3, #0]
    260c:	2b70      	cmp	r3, #112	; 0x70
    260e:	d104      	bne.n	261a <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
    2610:	f854 3b04 	ldr.w	r3, [r4], #4
    2614:	9304      	str	r3, [sp, #16]
    2616:	2300      	movs	r3, #0
    2618:	e00d      	b.n	2636 <z_vprintk+0x206>
				} else if (length_mod == 'l') {
    261a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    261e:	d0f7      	beq.n	2610 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
    2620:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    2624:	d1f4      	bne.n	2610 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
    2626:	3407      	adds	r4, #7
    2628:	f024 0307 	bic.w	r3, r4, #7
    262c:	461c      	mov	r4, r3
    262e:	685b      	ldr	r3, [r3, #4]
    2630:	f854 2b08 	ldr.w	r2, [r4], #8
    2634:	9204      	str	r2, [sp, #16]
	int digits = 0;
    2636:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    2638:	2210      	movs	r2, #16
	int digits = 0;
    263a:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
    263c:	9105      	str	r1, [sp, #20]
	int shift = sizeof(num) * 8;
    263e:	f04f 0b40 	mov.w	fp, #64	; 0x40
		shift -= 4;
    2642:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
    2646:	9804      	ldr	r0, [sp, #16]
    2648:	f1cb 0c20 	rsb	ip, fp, #32
    264c:	f1ab 0120 	sub.w	r1, fp, #32
    2650:	fa20 f00b 	lsr.w	r0, r0, fp
    2654:	fa03 fc0c 	lsl.w	ip, r3, ip
    2658:	ea40 000c 	orr.w	r0, r0, ip
    265c:	fa23 f101 	lsr.w	r1, r3, r1
    2660:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    2662:	f010 000f 	ands.w	r0, r0, #15
    2666:	d108      	bne.n	267a <z_vprintk+0x24a>
    2668:	9905      	ldr	r1, [sp, #20]
    266a:	b911      	cbnz	r1, 2672 <z_vprintk+0x242>
    266c:	f1bb 0f00 	cmp.w	fp, #0
    2670:	d124      	bne.n	26bc <z_vprintk+0x28c>
			nibble += nibble > 9 ? 87 : 48;
    2672:	2130      	movs	r1, #48	; 0x30
    2674:	e005      	b.n	2682 <z_vprintk+0x252>
			found_largest_digit = 1;
    2676:	9505      	str	r5, [sp, #20]
    2678:	e7e3      	b.n	2642 <z_vprintk+0x212>
			nibble += nibble > 9 ? 87 : 48;
    267a:	2809      	cmp	r0, #9
    267c:	bf8c      	ite	hi
    267e:	2157      	movhi	r1, #87	; 0x57
    2680:	2130      	movls	r1, #48	; 0x30
    2682:	4408      	add	r0, r1
			out((int)nibble, ctx);
    2684:	b240      	sxtb	r0, r0
    2686:	4639      	mov	r1, r7
    2688:	9308      	str	r3, [sp, #32]
    268a:	9205      	str	r2, [sp, #20]
    268c:	47b0      	blx	r6
			digits++;
    268e:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
    2690:	9a05      	ldr	r2, [sp, #20]
			digits++;
    2692:	3301      	adds	r3, #1
    2694:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
    2696:	9b08      	ldr	r3, [sp, #32]
    2698:	f1bb 0f00 	cmp.w	fp, #0
    269c:	d1eb      	bne.n	2676 <z_vprintk+0x246>
	if (padding == PAD_SPACE_AFTER) {
    269e:	f1b9 0f03 	cmp.w	r9, #3
    26a2:	f47f aed2 	bne.w	244a <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
    26a6:	9b03      	ldr	r3, [sp, #12]
    26a8:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
    26ac:	2d00      	cmp	r5, #0
    26ae:	f77f aecc 	ble.w	244a <z_vprintk+0x1a>
			out(' ', ctx);
    26b2:	4639      	mov	r1, r7
    26b4:	2020      	movs	r0, #32
    26b6:	47b0      	blx	r6
    26b8:	3d01      	subs	r5, #1
    26ba:	e7f7      	b.n	26ac <z_vprintk+0x27c>
		if (remaining-- <= min_width) {
    26bc:	1e51      	subs	r1, r2, #1
    26be:	4592      	cmp	sl, r2
    26c0:	9108      	str	r1, [sp, #32]
    26c2:	db07      	blt.n	26d4 <z_vprintk+0x2a4>
			if (padding == PAD_ZERO_BEFORE) {
    26c4:	f1b9 0f01 	cmp.w	r9, #1
    26c8:	d106      	bne.n	26d8 <z_vprintk+0x2a8>
    26ca:	9309      	str	r3, [sp, #36]	; 0x24
				out('0', ctx);
    26cc:	4639      	mov	r1, r7
    26ce:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    26d0:	47b0      	blx	r6
    26d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
					x = va_arg(ap, unsigned int);
    26d4:	9a08      	ldr	r2, [sp, #32]
    26d6:	e7b4      	b.n	2642 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
    26d8:	f1b9 0f02 	cmp.w	r9, #2
    26dc:	d1fa      	bne.n	26d4 <z_vprintk+0x2a4>
    26de:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
    26e0:	4639      	mov	r1, r7
    26e2:	2020      	movs	r0, #32
    26e4:	e7f4      	b.n	26d0 <z_vprintk+0x2a0>
					out((int)(*s++), ctx);
    26e6:	4639      	mov	r1, r7
    26e8:	47b0      	blx	r6
    26ea:	e6fb      	b.n	24e4 <z_vprintk+0xb4>
				out(c, ctx);
    26ec:	4639      	mov	r1, r7
    26ee:	f854 0b04 	ldr.w	r0, [r4], #4
    26f2:	e6d7      	b.n	24a4 <z_vprintk+0x74>
				length_mod = 0;
    26f4:	46a8      	mov	r8, r5
				padding = PAD_NONE;
    26f6:	46a9      	mov	r9, r5
				min_width = -1;
    26f8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
    26fc:	2501      	movs	r5, #1
    26fe:	e6ac      	b.n	245a <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
    2700:	f04f 0903 	mov.w	r9, #3
    2704:	e6a9      	b.n	245a <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
    2706:	f04f 0901 	mov.w	r9, #1
    270a:	e6a6      	b.n	245a <z_vprintk+0x2a>
			might_format = 0;
    270c:	4605      	mov	r5, r0
		++fmt;
    270e:	e6a4      	b.n	245a <z_vprintk+0x2a>

00002710 <printk>:
{
    2710:	b40f      	push	{r0, r1, r2, r3}
    2712:	b507      	push	{r0, r1, r2, lr}
    2714:	a904      	add	r1, sp, #16
    2716:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    271a:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    271c:	f7fe f83c 	bl	798 <vprintk>
}
    2720:	b003      	add	sp, #12
    2722:	f85d eb04 	ldr.w	lr, [sp], #4
    2726:	b004      	add	sp, #16
    2728:	4770      	bx	lr

0000272a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);

GEN_ABS_SYM_END
    272a:	4770      	bx	lr

0000272c <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
    272c:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
    272e:	7a5a      	ldrb	r2, [r3, #9]
    2730:	b922      	cbnz	r2, 273c <get_status+0x10>
	if (data->ref > 0) {
    2732:	7a18      	ldrb	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
    2734:	fab0 f080 	clz	r0, r0
    2738:	0940      	lsrs	r0, r0, #5
    273a:	4770      	bx	lr
    273c:	2002      	movs	r0, #2
}
    273e:	4770      	bx	lr

00002740 <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    2740:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
    2742:	2000      	movs	r0, #0
	list->tail = NULL;
    2744:	e9c3 0000 	strd	r0, r0, [r3]
}
    2748:	4770      	bx	lr

0000274a <clkstarted_handle>:
{
    274a:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
    274c:	6884      	ldr	r4, [r0, #8]
	data->started = true;
    274e:	2301      	movs	r3, #1
{
    2750:	4605      	mov	r5, r0
	data->started = true;
    2752:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
    2754:	f04f 0320 	mov.w	r3, #32
    2758:	f3ef 8111 	mrs	r1, BASEPRI
    275c:	f383 8811 	msr	BASEPRI, r3
    2760:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    2764:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    2766:	b12b      	cbz	r3, 2774 <clkstarted_handle+0x2a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2768:	6860      	ldr	r0, [r4, #4]
    276a:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    276c:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    276e:	4283      	cmp	r3, r0
	list->tail = node;
    2770:	bf08      	it	eq
    2772:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
    2774:	f381 8811 	msr	BASEPRI, r1
    2778:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&data->list)) != NULL) {
    277c:	b903      	cbnz	r3, 2780 <clkstarted_handle+0x36>
}
    277e:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
    2780:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    2784:	4628      	mov	r0, r5
    2786:	4790      	blx	r2
    2788:	e7e4      	b.n	2754 <clkstarted_handle+0xa>

0000278a <clock_async_start>:
{
    278a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
    278c:	6803      	ldr	r3, [r0, #0]
{
    278e:	4606      	mov	r6, r0
	const struct nrf_clock_control_config *config =
    2790:	689d      	ldr	r5, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
    2792:	6883      	ldr	r3, [r0, #8]
	if ((data != NULL)
    2794:	b132      	cbz	r2, 27a4 <clock_async_start+0x1a>
	sys_snode_t *item = sys_slist_peek_head(list);
    2796:	6819      	ldr	r1, [r3, #0]
		if (item == node) {
    2798:	428a      	cmp	r2, r1
    279a:	d04c      	beq.n	2836 <clock_async_start+0xac>
Z_GENLIST_PEEK_NEXT(slist, snode)
    279c:	b111      	cbz	r1, 27a4 <clock_async_start+0x1a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    279e:	6809      	ldr	r1, [r1, #0]
	} while (item);
    27a0:	2900      	cmp	r1, #0
    27a2:	d1f9      	bne.n	2798 <clock_async_start+0xe>
	__asm__ volatile(
    27a4:	f04f 0020 	mov.w	r0, #32
    27a8:	f3ef 8111 	mrs	r1, BASEPRI
    27ac:	f380 8811 	msr	BASEPRI, r0
    27b0:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    27b4:	7a1c      	ldrb	r4, [r3, #8]
    27b6:	3401      	adds	r4, #1
    27b8:	b2e4      	uxtb	r4, r4
    27ba:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
    27bc:	f381 8811 	msr	BASEPRI, r1
    27c0:	f3bf 8f6f 	isb	sy
	if (data) {
    27c4:	b30a      	cbz	r2, 280a <clock_async_start+0x80>
    p_reg->INTENCLR = mask;
    27c6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    27ca:	2003      	movs	r0, #3
    27cc:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
		already_started = clk_data->started;
    27d0:	7a59      	ldrb	r1, [r3, #9]
		if (!already_started) {
    27d2:	b981      	cbnz	r1, 27f6 <clock_async_start+0x6c>
	__asm__ volatile(
    27d4:	f04f 0020 	mov.w	r0, #32
    27d8:	f3ef 8711 	mrs	r7, BASEPRI
    27dc:	f380 8811 	msr	BASEPRI, r0
    27e0:	f3bf 8f6f 	isb	sy
	parent->next = child;
    27e4:	6011      	str	r1, [r2, #0]
Z_GENLIST_APPEND(slist, snode)
    27e6:	6858      	ldr	r0, [r3, #4]
    27e8:	b9d0      	cbnz	r0, 2820 <clock_async_start+0x96>
	list->head = node;
    27ea:	e9c3 2200 	strd	r2, r2, [r3]
	__asm__ volatile(
    27ee:	f387 8811 	msr	BASEPRI, r7
    27f2:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    27f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    27fa:	2003      	movs	r0, #3
    27fc:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
		if (already_started) {
    2800:	b119      	cbz	r1, 280a <clock_async_start+0x80>
			data->cb(dev, data->user_data);
    2802:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
    2806:	4630      	mov	r0, r6
    2808:	4798      	blx	r3
	if (ref == 1) {
    280a:	2c01      	cmp	r4, #1
    280c:	d106      	bne.n	281c <clock_async_start+0x92>
		do_start =  (config->start_handler) ?
    280e:	682b      	ldr	r3, [r5, #0]
				config->start_handler(dev) : true;
    2810:	b94b      	cbnz	r3, 2826 <clock_async_start+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2812:	7aab      	ldrb	r3, [r5, #10]
    2814:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2818:	2201      	movs	r2, #1
    281a:	601a      	str	r2, [r3, #0]
	return 0;
    281c:	2000      	movs	r0, #0
    281e:	e00c      	b.n	283a <clock_async_start+0xb0>
	parent->next = child;
    2820:	6002      	str	r2, [r0, #0]
	list->tail = node;
    2822:	605a      	str	r2, [r3, #4]
    2824:	e7e3      	b.n	27ee <clock_async_start+0x64>
				config->start_handler(dev) : true;
    2826:	4630      	mov	r0, r6
    2828:	4798      	blx	r3
    282a:	2800      	cmp	r0, #0
    282c:	d1f1      	bne.n	2812 <clock_async_start+0x88>
			clkstarted_handle(dev);
    282e:	4630      	mov	r0, r6
    2830:	f7ff ff8b 	bl	274a <clkstarted_handle>
    2834:	e7f2      	b.n	281c <clock_async_start+0x92>
		return -EBUSY;
    2836:	f06f 000f 	mvn.w	r0, #15
}
    283a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000283c <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    283c:	2200      	movs	r2, #0
    283e:	f7ff bfa4 	b.w	278a <clock_async_start>

00002842 <hfclk_init>:
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    2842:	2200      	movs	r2, #0
{
    2844:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    2846:	2101      	movs	r1, #1
{
    2848:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    284a:	4610      	mov	r0, r2
    284c:	f7fe f958 	bl	b00 <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    2850:	2000      	movs	r0, #0
    2852:	f7fe f945 	bl	ae0 <arch_irq_enable>
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    2856:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    285a:	2201      	movs	r2, #1
    285c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    2860:	2203      	movs	r2, #3
    2862:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    2866:	68a3      	ldr	r3, [r4, #8]
	list->head = NULL;
    2868:	2000      	movs	r0, #0
	list->tail = NULL;
    286a:	e9c3 0000 	strd	r0, r0, [r3]
}
    286e:	bd10      	pop	{r4, pc}

00002870 <clock_stop>:
	const struct nrf_clock_control_config *config =
    2870:	6802      	ldr	r2, [r0, #0]
{
    2872:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
    2874:	6895      	ldr	r5, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
    2876:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
    2878:	f04f 0320 	mov.w	r3, #32
    287c:	f3ef 8611 	mrs	r6, BASEPRI
    2880:	f383 8811 	msr	BASEPRI, r3
    2884:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    2888:	7a23      	ldrb	r3, [r4, #8]
    288a:	b303      	cbz	r3, 28ce <clock_stop+0x5e>
	data->ref--;
    288c:	3b01      	subs	r3, #1
    288e:	b2db      	uxtb	r3, r3
    2890:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
    2892:	b9fb      	cbnz	r3, 28d4 <clock_stop+0x64>
    2894:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
    2898:	686b      	ldr	r3, [r5, #4]
				config->stop_handler(dev) : true;
    289a:	b9a3      	cbnz	r3, 28c6 <clock_stop+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    289c:	7aeb      	ldrb	r3, [r5, #11]
    289e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    28a2:	2201      	movs	r2, #1
    28a4:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    28a6:	892b      	ldrh	r3, [r5, #8]
    28a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    28ac:	2200      	movs	r2, #0
    28ae:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    28b0:	681b      	ldr	r3, [r3, #0]
    28b2:	9301      	str	r3, [sp, #4]
    (void)dummy;
    28b4:	9b01      	ldr	r3, [sp, #4]
		data->started = false;
    28b6:	2000      	movs	r0, #0
    28b8:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
    28ba:	f386 8811 	msr	BASEPRI, r6
    28be:	f3bf 8f6f 	isb	sy
}
    28c2:	b002      	add	sp, #8
    28c4:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
    28c6:	4798      	blx	r3
    28c8:	2800      	cmp	r0, #0
    28ca:	d1e7      	bne.n	289c <clock_stop+0x2c>
    28cc:	e7f3      	b.n	28b6 <clock_stop+0x46>
		err = -EALREADY;
    28ce:	f06f 0044 	mvn.w	r0, #68	; 0x44
    28d2:	e7f2      	b.n	28ba <clock_stop+0x4a>
	int err = 0;
    28d4:	2000      	movs	r0, #0
    28d6:	e7f0      	b.n	28ba <clock_stop+0x4a>

000028d8 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    28d8:	4770      	bx	lr

000028da <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    28da:	4770      	bx	lr

000028dc <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
    28dc:	f7fe b974 	b.w	bc8 <z_arm_bus_fault>

000028e0 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    28e0:	f000 b9b8 	b.w	2c54 <z_fatal_error>

000028e4 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    28e4:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    28e6:	6800      	ldr	r0, [r0, #0]
    28e8:	f000 b9b4 	b.w	2c54 <z_fatal_error>

000028ec <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    28ec:	b508      	push	{r3, lr}
	handler();
    28ee:	f7fe f975 	bl	bdc <z_SysNmiOnReset>
	z_arm_exc_exit();
}
    28f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
    28f6:	f7fe b891 	b.w	a1c <z_arm_exc_exit>

000028fa <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    28fa:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    28fc:	2100      	movs	r1, #0
    28fe:	a801      	add	r0, sp, #4
    2900:	f7fe fb62 	bl	fc8 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    2904:	b003      	add	sp, #12
    2906:	f85d fb04 	ldr.w	pc, [sp], #4

0000290a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    290a:	3801      	subs	r0, #1
    290c:	3901      	subs	r1, #1
    290e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    2912:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    2916:	4293      	cmp	r3, r2
    2918:	d101      	bne.n	291e <strcmp+0x14>
    291a:	2b00      	cmp	r3, #0
    291c:	d1f7      	bne.n	290e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    291e:	1a98      	subs	r0, r3, r2
    2920:	4770      	bx	lr

00002922 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    2922:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    2924:	ea81 0400 	eor.w	r4, r1, r0
    2928:	07a5      	lsls	r5, r4, #30
    292a:	4603      	mov	r3, r0
    292c:	d00b      	beq.n	2946 <memcpy+0x24>
    292e:	3b01      	subs	r3, #1
    2930:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    2932:	4291      	cmp	r1, r2
    2934:	d11a      	bne.n	296c <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    2936:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    2938:	2a00      	cmp	r2, #0
    293a:	d0fc      	beq.n	2936 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    293c:	f811 4b01 	ldrb.w	r4, [r1], #1
    2940:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    2944:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    2946:	079c      	lsls	r4, r3, #30
    2948:	d1f6      	bne.n	2938 <memcpy+0x16>
    294a:	0895      	lsrs	r5, r2, #2
    294c:	00ac      	lsls	r4, r5, #2
    294e:	1f1e      	subs	r6, r3, #4
    2950:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    2952:	42b9      	cmp	r1, r7
    2954:	d105      	bne.n	2962 <memcpy+0x40>
    2956:	f06f 0603 	mvn.w	r6, #3
    295a:	fb06 2205 	mla	r2, r6, r5, r2
    295e:	4423      	add	r3, r4
    2960:	e7e5      	b.n	292e <memcpy+0xc>
			*(d_word++) = *(s_word++);
    2962:	f851 cb04 	ldr.w	ip, [r1], #4
    2966:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
    296a:	e7f2      	b.n	2952 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
    296c:	f811 4b01 	ldrb.w	r4, [r1], #1
    2970:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    2974:	e7dd      	b.n	2932 <memcpy+0x10>

00002976 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    2976:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    2978:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    297a:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    297c:	079c      	lsls	r4, r3, #30
    297e:	d110      	bne.n	29a2 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    2980:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    2984:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    2988:	0894      	lsrs	r4, r2, #2
    298a:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    298e:	42b3      	cmp	r3, r6
    2990:	d10d      	bne.n	29ae <memset+0x38>
    2992:	f06f 0503 	mvn.w	r5, #3
    2996:	fb05 2404 	mla	r4, r5, r4, r2
    299a:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    299c:	42a3      	cmp	r3, r4
    299e:	d109      	bne.n	29b4 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    29a0:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    29a2:	2a00      	cmp	r2, #0
    29a4:	d0fc      	beq.n	29a0 <memset+0x2a>
		*(d_byte++) = c_byte;
    29a6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    29aa:	3a01      	subs	r2, #1
    29ac:	e7e6      	b.n	297c <memset+0x6>
		*(d_word++) = c_word;
    29ae:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    29b2:	e7ec      	b.n	298e <memset+0x18>
		*(d_byte++) = c_byte;
    29b4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    29b8:	e7f0      	b.n	299c <memset+0x26>

000029ba <_stdout_hook_default>:
}
    29ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    29be:	4770      	bx	lr

000029c0 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
    29c0:	f7fe bdf4 	b.w	15ac <SystemInit>

000029c4 <gpio_nrfx_write>:
{
    29c4:	b510      	push	{r4, lr}
	return port->config->config_info;
    29c6:	6804      	ldr	r4, [r0, #0]
    29c8:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    29ca:	68a4      	ldr	r4, [r4, #8]
    29cc:	69c0      	ldr	r0, [r0, #28]
    29ce:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    29d0:	2901      	cmp	r1, #1
    29d2:	d104      	bne.n	29de <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
    29d4:	4058      	eors	r0, r3
    p_reg->OUT = value;
    29d6:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
}
    29da:	2000      	movs	r0, #0
    29dc:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
    29de:	3300      	adds	r3, #0
    29e0:	fa20 f002 	lsr.w	r0, r0, r2
    29e4:	f04f 0101 	mov.w	r1, #1
    29e8:	bf18      	it	ne
    29ea:	2301      	movne	r3, #1
    29ec:	f000 0001 	and.w	r0, r0, #1
    29f0:	4091      	lsls	r1, r2
    29f2:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
    29f4:	bf14      	ite	ne
    29f6:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    29fa:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
    29fe:	e7ec      	b.n	29da <gpio_nrfx_write+0x16>

00002a00 <gpio_nrfx_read>:
{
    2a00:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
    2a02:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    2a04:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2a06:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    2a08:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2a0a:	6825      	ldr	r5, [r4, #0]
    return p_reg->DIR;
    2a0c:	f8d5 6514 	ldr.w	r6, [r5, #1300]	; 0x514
    return p_reg->IN;
    2a10:	f8d5 4510 	ldr.w	r4, [r5, #1296]	; 0x510
    return p_reg->OUT;
    2a14:	f8d5 5504 	ldr.w	r5, [r5, #1284]	; 0x504
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    2a18:	4060      	eors	r0, r4
    2a1a:	406c      	eors	r4, r5
    2a1c:	4034      	ands	r4, r6
    2a1e:	4060      	eors	r0, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
    2a20:	2901      	cmp	r1, #1
		*value = (port_val & BIT(pin)) ? 1 : 0;
    2a22:	bf1c      	itt	ne
    2a24:	40d0      	lsrne	r0, r2
    2a26:	f000 0001 	andne.w	r0, r0, #1
    2a2a:	6018      	str	r0, [r3, #0]
}
    2a2c:	2000      	movs	r0, #0
    2a2e:	bd70      	pop	{r4, r5, r6, pc}

00002a30 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2a30:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
    2a32:	6818      	ldr	r0, [r3, #0]
{
    2a34:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    2a36:	b158      	cbz	r0, 2a50 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2a38:	2400      	movs	r4, #0
    2a3a:	4281      	cmp	r1, r0
    2a3c:	d113      	bne.n	2a66 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    2a3e:	6808      	ldr	r0, [r1, #0]
    2a40:	b95c      	cbnz	r4, 2a5a <gpio_nrfx_manage_callback+0x2a>
    2a42:	685c      	ldr	r4, [r3, #4]
	list->head = node;
    2a44:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    2a46:	42a1      	cmp	r1, r4
    2a48:	d100      	bne.n	2a4c <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    2a4a:	6058      	str	r0, [r3, #4]
	parent->next = child;
    2a4c:	2000      	movs	r0, #0
    2a4e:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    2a50:	b972      	cbnz	r2, 2a70 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    2a52:	2000      	movs	r0, #0
}
    2a54:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2a56:	4628      	mov	r0, r5
    2a58:	e7ef      	b.n	2a3a <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
    2a5a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    2a5c:	6858      	ldr	r0, [r3, #4]
    2a5e:	4281      	cmp	r1, r0
	list->tail = node;
    2a60:	bf08      	it	eq
    2a62:	605c      	streq	r4, [r3, #4]
    2a64:	e7f2      	b.n	2a4c <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2a66:	6805      	ldr	r5, [r0, #0]
	return node->next;
    2a68:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2a6a:	2d00      	cmp	r5, #0
    2a6c:	d1f3      	bne.n	2a56 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    2a6e:	b13a      	cbz	r2, 2a80 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    2a70:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    2a72:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    2a74:	6858      	ldr	r0, [r3, #4]
	list->head = node;
    2a76:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    2a78:	2800      	cmp	r0, #0
    2a7a:	d1ea      	bne.n	2a52 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    2a7c:	6059      	str	r1, [r3, #4]
    2a7e:	e7e9      	b.n	2a54 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    2a80:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2a84:	e7e6      	b.n	2a54 <gpio_nrfx_manage_callback+0x24>

00002a86 <gpio_nrfx_config>:
{
    2a86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a8a:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    2a8c:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    2a8e:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    2a92:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    2a96:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    2a98:	d041      	beq.n	2b1e <gpio_nrfx_config+0x98>
    2a9a:	dc09      	bgt.n	2ab0 <gpio_nrfx_config+0x2a>
    2a9c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    2aa0:	d03f      	beq.n	2b22 <gpio_nrfx_config+0x9c>
    2aa2:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    2aa6:	d03e      	beq.n	2b26 <gpio_nrfx_config+0xa0>
    2aa8:	b190      	cbz	r0, 2ad0 <gpio_nrfx_config+0x4a>
		return -EINVAL;
    2aaa:	f06f 0015 	mvn.w	r0, #21
    2aae:	e033      	b.n	2b18 <gpio_nrfx_config+0x92>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    2ab0:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    2ab4:	d039      	beq.n	2b2a <gpio_nrfx_config+0xa4>
    2ab6:	dc04      	bgt.n	2ac2 <gpio_nrfx_config+0x3c>
    2ab8:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    2abc:	d1f5      	bne.n	2aaa <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    2abe:	2003      	movs	r0, #3
    2ac0:	e006      	b.n	2ad0 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    2ac2:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    2ac6:	d032      	beq.n	2b2e <gpio_nrfx_config+0xa8>
    2ac8:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    2acc:	d1ed      	bne.n	2aaa <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
    2ace:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    2ad0:	f406 7740 	and.w	r7, r6, #768	; 0x300
    2ad4:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    2ad8:	d02b      	beq.n	2b32 <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_NOPULL;
    2ada:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
    2ade:	4263      	negs	r3, r4
    2ae0:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    2ae2:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    2ae6:	ea4f 074c 	mov.w	r7, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
    2aea:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    2aec:	ea47 070c 	orr.w	r7, r7, ip
		from_pin = pin;
    2af0:	bf18      	it	ne
    2af2:	b2d4      	uxtbne	r4, r2
    2af4:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    2af8:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		to_pin   = pin;
    2afc:	bf12      	itee	ne
    2afe:	46a1      	movne	r9, r4
		to_pin   = 31U;
    2b00:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
    2b04:	2400      	moveq	r4, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2b06:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
    2b0a:	f04f 0b01 	mov.w	fp, #1
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    2b0e:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2b12:	45a1      	cmp	r9, r4
    2b14:	d20f      	bcs.n	2b36 <gpio_nrfx_config+0xb0>
	return 0;
    2b16:	2000      	movs	r0, #0
}
    2b18:	b003      	add	sp, #12
    2b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
    2b1e:	2002      	movs	r0, #2
    2b20:	e7d6      	b.n	2ad0 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
    2b22:	2001      	movs	r0, #1
    2b24:	e7d4      	b.n	2ad0 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
    2b26:	2004      	movs	r0, #4
    2b28:	e7d2      	b.n	2ad0 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
    2b2a:	2005      	movs	r0, #5
    2b2c:	e7d0      	b.n	2ad0 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
    2b2e:	2006      	movs	r0, #6
    2b30:	e7ce      	b.n	2ad0 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
    2b32:	2303      	movs	r3, #3
    2b34:	e7d5      	b.n	2ae2 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
    2b36:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    2b3a:	6892      	ldr	r2, [r2, #8]
    2b3c:	7911      	ldrb	r1, [r2, #4]
    2b3e:	f004 021f 	and.w	r2, r4, #31
    2b42:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    2b46:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    2b4a:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    2b4e:	fa0b f204 	lsl.w	r2, fp, r4
    2b52:	68a9      	ldr	r1, [r5, #8]
    2b54:	2b00      	cmp	r3, #0
    2b56:	d025      	beq.n	2ba4 <gpio_nrfx_config+0x11e>
    2b58:	4311      	orrs	r1, r2
    2b5a:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    2b5c:	6969      	ldr	r1, [r5, #20]
    2b5e:	9301      	str	r3, [sp, #4]
    2b60:	06b0      	lsls	r0, r6, #26
    2b62:	bf4c      	ite	mi
    2b64:	4311      	orrmi	r1, r2
    2b66:	4391      	bicpl	r1, r2
    2b68:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    2b6a:	69a9      	ldr	r1, [r5, #24]
    2b6c:	0670      	lsls	r0, r6, #25
    2b6e:	bf4c      	ite	mi
    2b70:	4311      	orrmi	r1, r2
    2b72:	4391      	bicpl	r1, r2
    2b74:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
    2b76:	6929      	ldr	r1, [r5, #16]
    2b78:	0770      	lsls	r0, r6, #29
    2b7a:	bf4c      	ite	mi
    2b7c:	4311      	orrmi	r1, r2
    2b7e:	4391      	bicpl	r1, r2
    2b80:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    2b82:	69e9      	ldr	r1, [r5, #28]
    2b84:	0630      	lsls	r0, r6, #24
    2b86:	bf4c      	ite	mi
    2b88:	430a      	orrmi	r2, r1
    2b8a:	ea21 0202 	bicpl.w	r2, r1, r2
    2b8e:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    2b90:	4621      	mov	r1, r4
    2b92:	4640      	mov	r0, r8
    2b94:	f7fe fa64 	bl	1060 <gpiote_pin_int_cfg>
		if (res != 0) {
    2b98:	2800      	cmp	r0, #0
    2b9a:	d1bd      	bne.n	2b18 <gpio_nrfx_config+0x92>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2b9c:	3401      	adds	r4, #1
    2b9e:	b2e4      	uxtb	r4, r4
    2ba0:	9b01      	ldr	r3, [sp, #4]
    2ba2:	e7b6      	b.n	2b12 <gpio_nrfx_config+0x8c>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    2ba4:	ea21 0102 	bic.w	r1, r1, r2
    2ba8:	e7d7      	b.n	2b5a <gpio_nrfx_config+0xd4>

00002baa <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    2baa:	2901      	cmp	r1, #1
{
    2bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    2bb0:	bf18      	it	ne
    2bb2:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    2bb4:	6887      	ldr	r7, [r0, #8]
{
    2bb6:	4606      	mov	r6, r0
		to_pin   = pin;
    2bb8:	bf12      	itee	ne
    2bba:	4625      	movne	r5, r4
		to_pin   = 31U;
    2bbc:	251f      	moveq	r5, #31
		from_pin = 0U;
    2bbe:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    2bc0:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2bc4:	42ac      	cmp	r4, r5
    2bc6:	d902      	bls.n	2bce <gpio_nrfx_pin_disable_callback+0x24>
	return res;
    2bc8:	2000      	movs	r0, #0
}
    2bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    2bce:	68fb      	ldr	r3, [r7, #12]
    2bd0:	fa08 f204 	lsl.w	r2, r8, r4
    2bd4:	ea23 0302 	bic.w	r3, r3, r2
    2bd8:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    2bda:	4621      	mov	r1, r4
    2bdc:	4630      	mov	r0, r6
    2bde:	f7fe fa3f 	bl	1060 <gpiote_pin_int_cfg>
		if (res != 0) {
    2be2:	2800      	cmp	r0, #0
    2be4:	d1f1      	bne.n	2bca <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2be6:	3401      	adds	r4, #1
    2be8:	b2e4      	uxtb	r4, r4
    2bea:	e7eb      	b.n	2bc4 <gpio_nrfx_pin_disable_callback+0x1a>

00002bec <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    2bec:	2901      	cmp	r1, #1
{
    2bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    2bf2:	bf18      	it	ne
    2bf4:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    2bf6:	6887      	ldr	r7, [r0, #8]
{
    2bf8:	4606      	mov	r6, r0
		to_pin   = pin;
    2bfa:	bf12      	itee	ne
    2bfc:	4625      	movne	r5, r4
		to_pin   = 31U;
    2bfe:	251f      	moveq	r5, #31
		from_pin = 0U;
    2c00:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    2c02:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2c06:	42ac      	cmp	r4, r5
    2c08:	d902      	bls.n	2c10 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
    2c0a:	2000      	movs	r0, #0
}
    2c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    2c10:	68fb      	ldr	r3, [r7, #12]
    2c12:	fa08 f204 	lsl.w	r2, r8, r4
    2c16:	4313      	orrs	r3, r2
    2c18:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    2c1a:	4621      	mov	r1, r4
    2c1c:	4630      	mov	r0, r6
    2c1e:	f7fe fa1f 	bl	1060 <gpiote_pin_int_cfg>
		if (res != 0) {
    2c22:	2800      	cmp	r0, #0
    2c24:	d1f2      	bne.n	2c0c <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2c26:	3401      	adds	r4, #1
    2c28:	b2e4      	uxtb	r4, r4
    2c2a:	e7ec      	b.n	2c06 <gpio_nrfx_pin_enable_callback+0x1a>

00002c2c <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    2c2c:	6882      	ldr	r2, [r0, #8]
{
    2c2e:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    2c30:	e892 0003 	ldmia.w	r2, {r0, r1}
    2c34:	e883 0003 	stmia.w	r3, {r0, r1}
}
    2c38:	2000      	movs	r0, #0
    2c3a:	4770      	bx	lr

00002c3c <arch_system_halt>:
	__asm__ volatile(
    2c3c:	f04f 0220 	mov.w	r2, #32
    2c40:	f3ef 8311 	mrs	r3, BASEPRI
    2c44:	f382 8811 	msr	BASEPRI, r2
    2c48:	f3bf 8f6f 	isb	sy
	 */

	(void)arch_irq_lock();
	for (;;) {
		/* Spin endlessly */
	}
    2c4c:	e7fe      	b.n	2c4c <arch_system_halt+0x10>

00002c4e <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    2c4e:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    2c50:	f7ff fff4 	bl	2c3c <arch_system_halt>

00002c54 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2c54:	b570      	push	{r4, r5, r6, lr}
    2c56:	4605      	mov	r5, r0
    2c58:	460e      	mov	r6, r1
	return z_impl_k_current_get();
    2c5a:	f7ff f91b 	bl	1e94 <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    2c5e:	4631      	mov	r1, r6
    2c60:	4604      	mov	r4, r0
    2c62:	4628      	mov	r0, r5
    2c64:	f7ff fff3 	bl	2c4e <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
    2c68:	4620      	mov	r0, r4
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
    2c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2c6e:	f7fe b8db 	b.w	e28 <z_impl_k_thread_abort>

00002c72 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    2c72:	f7ff be32 	b.w	28da <z_clock_idle_exit>

00002c76 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2c76:	7b43      	ldrb	r3, [r0, #13]
    2c78:	06db      	lsls	r3, r3, #27
    2c7a:	bf03      	ittte	eq
    2c7c:	6980      	ldreq	r0, [r0, #24]
    2c7e:	fab0 f080 	clzeq	r0, r0
    2c82:	0940      	lsreq	r0, r0, #5
    2c84:	2000      	movne	r0, #0
}
    2c86:	4770      	bx	lr

00002c88 <z_unpend_thread_no_timeout>:
{
    2c88:	b538      	push	{r3, r4, r5, lr}
    2c8a:	4604      	mov	r4, r0
    2c8c:	f04f 0320 	mov.w	r3, #32
    2c90:	f3ef 8511 	mrs	r5, BASEPRI
    2c94:	f383 8811 	msr	BASEPRI, r3
    2c98:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    2c9c:	4601      	mov	r1, r0
    2c9e:	6880      	ldr	r0, [r0, #8]
    2ca0:	f7fe ff26 	bl	1af0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    2ca4:	7b63      	ldrb	r3, [r4, #13]
    2ca6:	f023 0302 	bic.w	r3, r3, #2
    2caa:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    2cac:	f385 8811 	msr	BASEPRI, r5
    2cb0:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    2cb4:	2300      	movs	r3, #0
    2cb6:	60a3      	str	r3, [r4, #8]
}
    2cb8:	bd38      	pop	{r3, r4, r5, pc}

00002cba <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    2cba:	b921      	cbnz	r1, 2cc6 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2cbc:	f3ef 8005 	mrs	r0, IPSR
    2cc0:	b908      	cbnz	r0, 2cc6 <z_reschedule+0xc>
    2cc2:	f7fd beb9 	b.w	a38 <arch_swap>
    2cc6:	f381 8811 	msr	BASEPRI, r1
    2cca:	f3bf 8f6f 	isb	sy
}
    2cce:	4770      	bx	lr

00002cd0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    2cd0:	4603      	mov	r3, r0
    2cd2:	b920      	cbnz	r0, 2cde <z_reschedule_irqlock+0xe>
    2cd4:	f3ef 8205 	mrs	r2, IPSR
    2cd8:	b90a      	cbnz	r2, 2cde <z_reschedule_irqlock+0xe>
    2cda:	f7fd bead 	b.w	a38 <arch_swap>
    2cde:	f383 8811 	msr	BASEPRI, r3
    2ce2:	f3bf 8f6f 	isb	sy
}
    2ce6:	4770      	bx	lr

00002ce8 <z_reschedule_unlocked>:
	__asm__ volatile(
    2ce8:	f04f 0320 	mov.w	r3, #32
    2cec:	f3ef 8011 	mrs	r0, BASEPRI
    2cf0:	f383 8811 	msr	BASEPRI, r3
    2cf4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    2cf8:	f7ff bfea 	b.w	2cd0 <z_reschedule_irqlock>

00002cfc <z_priq_dumb_best>:
	return list->head == list;
    2cfc:	6803      	ldr	r3, [r0, #0]
}
    2cfe:	4298      	cmp	r0, r3
    2d00:	bf14      	ite	ne
    2d02:	4618      	movne	r0, r3
    2d04:	2000      	moveq	r0, #0
    2d06:	4770      	bx	lr

00002d08 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
    2d08:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    2d0c:	b570      	push	{r4, r5, r6, lr}
    2d0e:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
    2d10:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
    2d14:	b1cb      	cbz	r3, 2d4a <z_thread_timeout+0x42>
    2d16:	f04f 0320 	mov.w	r3, #32
    2d1a:	f3ef 8611 	mrs	r6, BASEPRI
    2d1e:	f383 8811 	msr	BASEPRI, r3
    2d22:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    2d26:	4629      	mov	r1, r5
    2d28:	f850 0c10 	ldr.w	r0, [r0, #-16]
    2d2c:	f7fe fee0 	bl	1af0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    2d30:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    2d34:	f023 0302 	bic.w	r3, r3, #2
    2d38:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
    2d3c:	f386 8811 	msr	BASEPRI, r6
    2d40:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    2d44:	2300      	movs	r3, #0
    2d46:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    2d4a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    2d4e:	f023 0314 	bic.w	r3, r3, #20
    2d52:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    2d56:	4628      	mov	r0, r5
    2d58:	f7ff ff8d 	bl	2c76 <z_is_thread_ready>
    2d5c:	b120      	cbz	r0, 2d68 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
    2d5e:	4628      	mov	r0, r5
}
    2d60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2d64:	f7fe bf14 	b.w	1b90 <z_add_thread_to_ready_q>
    2d68:	bd70      	pop	{r4, r5, r6, pc}

00002d6a <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2d6a:	7b43      	ldrb	r3, [r0, #13]
    2d6c:	06db      	lsls	r3, r3, #27
    2d6e:	bf03      	ittte	eq
    2d70:	6980      	ldreq	r0, [r0, #24]
    2d72:	fab0 f080 	clzeq	r0, r0
    2d76:	0940      	lsreq	r0, r0, #5
    2d78:	2000      	movne	r0, #0
}
    2d7a:	4770      	bx	lr

00002d7c <z_new_thread_init>:
{
    2d7c:	b510      	push	{r4, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    2d7e:	9c02      	ldr	r4, [sp, #8]
    2d80:	7304      	strb	r4, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
    2d82:	7383      	strb	r3, [r0, #14]
	thread_base->thread_state = (u8_t)initial_state;
    2d84:	2404      	movs	r4, #4

	thread_base->sched_locked = 0U;
    2d86:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
    2d88:	7344      	strb	r4, [r0, #13]
	thread_base->sched_locked = 0U;
    2d8a:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
    2d8c:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
    2d90:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
    2d94:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
    2d98:	bd10      	pop	{r4, pc}

00002d9a <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    2d9a:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    2d9c:	b510      	push	{r4, lr}
    2d9e:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    2da0:	b103      	cbz	r3, 2da4 <z_thread_single_abort+0xa>
		thread->fn_abort();
    2da2:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
    2da4:	4620      	mov	r0, r4
    2da6:	f7ff ffe0 	bl	2d6a <z_is_thread_ready>
    2daa:	b138      	cbz	r0, 2dbc <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
    2dac:	4620      	mov	r0, r4
    2dae:	f7fe ff9d 	bl	1cec <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
    2db2:	7b63      	ldrb	r3, [r4, #13]
    2db4:	f043 0308 	orr.w	r3, r3, #8
    2db8:	7363      	strb	r3, [r4, #13]
}
    2dba:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
    2dbc:	7b63      	ldrb	r3, [r4, #13]
    2dbe:	079b      	lsls	r3, r3, #30
    2dc0:	d502      	bpl.n	2dc8 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
    2dc2:	4620      	mov	r0, r4
    2dc4:	f7ff ff60 	bl	2c88 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
    2dc8:	69a3      	ldr	r3, [r4, #24]
    2dca:	2b00      	cmp	r3, #0
    2dcc:	d0f1      	beq.n	2db2 <z_thread_single_abort+0x18>
	return z_abort_timeout(&thread->base.timeout);
    2dce:	f104 0018 	add.w	r0, r4, #24
    2dd2:	f000 f801 	bl	2dd8 <z_abort_timeout>
    2dd6:	e7ec      	b.n	2db2 <z_thread_single_abort+0x18>

00002dd8 <z_abort_timeout>:
{
    2dd8:	b510      	push	{r4, lr}
	__asm__ volatile(
    2dda:	f04f 0220 	mov.w	r2, #32
    2dde:	f3ef 8411 	mrs	r4, BASEPRI
    2de2:	f382 8811 	msr	BASEPRI, r2
    2de6:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    2dea:	6803      	ldr	r3, [r0, #0]
    2dec:	b13b      	cbz	r3, 2dfe <z_abort_timeout+0x26>
			remove_timeout(to);
    2dee:	f7ff f93b 	bl	2068 <remove_timeout>
			ret = 0;
    2df2:	2000      	movs	r0, #0
	__asm__ volatile(
    2df4:	f384 8811 	msr	BASEPRI, r4
    2df8:	f3bf 8f6f 	isb	sy
}
    2dfc:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    2dfe:	f06f 0015 	mvn.w	r0, #21
    2e02:	e7f7      	b.n	2df4 <z_abort_timeout+0x1c>

00002e04 <z_get_next_timeout_expiry>:
{
    2e04:	b510      	push	{r4, lr}
	__asm__ volatile(
    2e06:	f04f 0320 	mov.w	r3, #32
    2e0a:	f3ef 8411 	mrs	r4, BASEPRI
    2e0e:	f383 8811 	msr	BASEPRI, r3
    2e12:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    2e16:	f7ff f93b 	bl	2090 <next_timeout>
	__asm__ volatile(
    2e1a:	f384 8811 	msr	BASEPRI, r4
    2e1e:	f3bf 8f6f 	isb	sy
}
    2e22:	bd10      	pop	{r4, pc}

00002e24 <z_set_timeout_expiry>:
{
    2e24:	b570      	push	{r4, r5, r6, lr}
    2e26:	4604      	mov	r4, r0
    2e28:	460e      	mov	r6, r1
	__asm__ volatile(
    2e2a:	f04f 0320 	mov.w	r3, #32
    2e2e:	f3ef 8511 	mrs	r5, BASEPRI
    2e32:	f383 8811 	msr	BASEPRI, r3
    2e36:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    2e3a:	f7ff f929 	bl	2090 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    2e3e:	2801      	cmp	r0, #1
    2e40:	dd05      	ble.n	2e4e <z_set_timeout_expiry+0x2a>
    2e42:	42a0      	cmp	r0, r4
    2e44:	dd03      	ble.n	2e4e <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    2e46:	4631      	mov	r1, r6
    2e48:	4620      	mov	r0, r4
    2e4a:	f7fd fd77 	bl	93c <z_clock_set_timeout>
	__asm__ volatile(
    2e4e:	f385 8811 	msr	BASEPRI, r5
    2e52:	f3bf 8f6f 	isb	sy
}
    2e56:	bd70      	pop	{r4, r5, r6, pc}

00002e58 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
    2e58:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
    2e5a:	f7ff f9cd 	bl	21f8 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
    2e5e:	bd08      	pop	{r3, pc}

00002e60 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    2e60:	4770      	bx	lr
