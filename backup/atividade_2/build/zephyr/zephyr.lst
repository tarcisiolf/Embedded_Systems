
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	200009d0 	.word	0x200009d0
	if (z_syscall_trap()) {
		return (int) z_arch_syscall_invoke2(*(u32_t *)&mutex, *(u32_t *)&timeout, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00001585 	.word	0x00001585
   8:	00004a9f 	.word	0x00004a9f
		if (fdtable[fd].obj == NULL) {
   c:	00001445 	.word	0x00001445
  10:	00001445 	.word	0x00001445
  14:	00001445 	.word	0x00001445
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	00001445 	.word	0x00001445
	if (z_syscall_trap()) {
		return (int *) z_arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  1c:	00001445 	.word	0x00001445
	errno = ENFILE;
  20:	00001445 	.word	0x00001445
	return -1;
  24:	00001445 	.word	0x00001445
		z_arch_syscall_invoke1(*(u32_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_mutex_unlock(mutex);
  28:	00001445 	.word	0x00001445
  2c:	00001329 	.word	0x00001329
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	00001445 	.word	0x00001445
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	00001445 	.word	0x00001445
  38:	000012d5 	.word	0x000012d5
  3c:	00004a8f 	.word	0x00004a8f

00000040 <_irq_vector_table>:
  40:	00001545 00001545 00001545 00001545     E...E...E...E...
		sys_pm_notify_power_state_exit(pm_state);
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  50:	00001545 00001545 00001545 00001545     E...E...E...E...
  60:	00001545 00001545 00001545 00001545     E...E...E...E...
  70:	00001545 00001545 00001545 00001545     E...E...E...E...
  80:	00001545 00001545 00001545 00001545     E...E...E...E...
  90:	00001545 00001545 00001545 00001545     E...E...E...E...
  a0:	00001545 00001545 00001545 00001545     E...E...E...E...
  b0:	00001545 00001545 00001545 00001545     E...E...E...E...
  c0:	00001545 00001545 00001545 00001545     E...E...E...E...
  d0:	00001545 00001545 00001545              E...E...E...

Disassembly of section _TEXT_SECTION_NAME_2:

000000dc <__aeabi_ldivmod>:
      dc:	b97b      	cbnz	r3, fe <__aeabi_ldivmod+0x22>
      de:	b972      	cbnz	r2, fe <__aeabi_ldivmod+0x22>
      e0:	2900      	cmp	r1, #0
      e2:	bfbe      	ittt	lt
      e4:	2000      	movlt	r0, #0
      e6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
      ea:	e006      	blt.n	fa <__aeabi_ldivmod+0x1e>
      ec:	bf08      	it	eq
      ee:	2800      	cmpeq	r0, #0
      f0:	bf1c      	itt	ne
      f2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
      f6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      fa:	f000 b83f 	b.w	17c <__aeabi_idiv0>
      fe:	f1ad 0c08 	sub.w	ip, sp, #8
     102:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     106:	2900      	cmp	r1, #0
     108:	db09      	blt.n	11e <CONFIG_KOBJECT_TEXT_AREA+0x1e>
     10a:	2b00      	cmp	r3, #0
     10c:	db1a      	blt.n	144 <CONFIG_IDLE_STACK_SIZE+0x4>
     10e:	f000 f837 	bl	180 <__udivmoddi4>
     112:	f8dd e004 	ldr.w	lr, [sp, #4]
     116:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     11a:	b004      	add	sp, #16
     11c:	4770      	bx	lr
     11e:	4240      	negs	r0, r0
     120:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     124:	2b00      	cmp	r3, #0
     126:	db1b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     128:	f000 f82a 	bl	180 <__udivmoddi4>
     12c:	f8dd e004 	ldr.w	lr, [sp, #4]
     130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     134:	b004      	add	sp, #16
     136:	4240      	negs	r0, r0
     138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     13c:	4252      	negs	r2, r2
     13e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     142:	4770      	bx	lr
     144:	4252      	negs	r2, r2
     146:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     14a:	f000 f819 	bl	180 <__udivmoddi4>
     14e:	f8dd e004 	ldr.w	lr, [sp, #4]
     152:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     156:	b004      	add	sp, #16
     158:	4240      	negs	r0, r0
     15a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     15e:	4770      	bx	lr
     160:	4252      	negs	r2, r2
     162:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     166:	f000 f80b 	bl	180 <__udivmoddi4>
     16a:	f8dd e004 	ldr.w	lr, [sp, #4]
     16e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     172:	b004      	add	sp, #16
     174:	4252      	negs	r2, r2
     176:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     17a:	4770      	bx	lr

0000017c <__aeabi_idiv0>:
     17c:	4770      	bx	lr
     17e:	bf00      	nop

00000180 <__udivmoddi4>:
     180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     184:	9f09      	ldr	r7, [sp, #36]	; 0x24
     186:	4615      	mov	r5, r2
     188:	4604      	mov	r4, r0
     18a:	468e      	mov	lr, r1
     18c:	461e      	mov	r6, r3
     18e:	2b00      	cmp	r3, #0
     190:	f040 80cc 	bne.w	32c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2c>
     194:	428a      	cmp	r2, r1
     196:	fab2 fc82 	clz	ip, r2
     19a:	d94c      	bls.n	236 <CONFIG_FLASH_SIZE+0x36>
     19c:	f1bc 0f00 	cmp.w	ip, #0
     1a0:	d00b      	beq.n	1ba <__udivmoddi4+0x3a>
     1a2:	f1cc 0820 	rsb	r8, ip, #32
     1a6:	fa01 fe0c 	lsl.w	lr, r1, ip
     1aa:	fa20 f808 	lsr.w	r8, r0, r8
     1ae:	fa02 f50c 	lsl.w	r5, r2, ip
     1b2:	ea48 0e0e 	orr.w	lr, r8, lr
     1b6:	fa00 f40c 	lsl.w	r4, r0, ip
     1ba:	ea4f 4915 	mov.w	r9, r5, lsr #16
     1be:	fa1f f885 	uxth.w	r8, r5
     1c2:	fbbe faf9 	udiv	sl, lr, r9
     1c6:	0c21      	lsrs	r1, r4, #16
     1c8:	fb09 e31a 	mls	r3, r9, sl, lr
     1cc:	fb0a fb08 	mul.w	fp, sl, r8
     1d0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     1d4:	459b      	cmp	fp, r3
     1d6:	d92a      	bls.n	22e <CONFIG_FLASH_SIZE+0x2e>
     1d8:	18eb      	adds	r3, r5, r3
     1da:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
     1de:	d204      	bcs.n	1ea <__udivmoddi4+0x6a>
     1e0:	459b      	cmp	fp, r3
     1e2:	d902      	bls.n	1ea <__udivmoddi4+0x6a>
     1e4:	f1aa 0002 	sub.w	r0, sl, #2
     1e8:	442b      	add	r3, r5
     1ea:	eba3 030b 	sub.w	r3, r3, fp
     1ee:	b2a4      	uxth	r4, r4
     1f0:	fbb3 f2f9 	udiv	r2, r3, r9
     1f4:	fb09 3312 	mls	r3, r9, r2, r3
     1f8:	fb02 f808 	mul.w	r8, r2, r8
     1fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     200:	45a0      	cmp	r8, r4
     202:	d916      	bls.n	232 <CONFIG_FLASH_SIZE+0x32>
     204:	192c      	adds	r4, r5, r4
     206:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     20a:	d203      	bcs.n	214 <CONFIG_FLASH_SIZE+0x14>
     20c:	45a0      	cmp	r8, r4
     20e:	d901      	bls.n	214 <CONFIG_FLASH_SIZE+0x14>
     210:	1e93      	subs	r3, r2, #2
     212:	442c      	add	r4, r5
     214:	eba4 0408 	sub.w	r4, r4, r8
     218:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     21c:	b127      	cbz	r7, 228 <CONFIG_FLASH_SIZE+0x28>
     21e:	fa24 f40c 	lsr.w	r4, r4, ip
     222:	2300      	movs	r3, #0
     224:	603c      	str	r4, [r7, #0]
     226:	607b      	str	r3, [r7, #4]
     228:	4631      	mov	r1, r6
     22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     22e:	4650      	mov	r0, sl
     230:	e7db      	b.n	1ea <__udivmoddi4+0x6a>
     232:	4613      	mov	r3, r2
     234:	e7ee      	b.n	214 <CONFIG_FLASH_SIZE+0x14>
     236:	b902      	cbnz	r2, 23a <CONFIG_FLASH_SIZE+0x3a>
     238:	deff      	udf	#255	; 0xff
     23a:	f1bc 0f00 	cmp.w	ip, #0
     23e:	d12e      	bne.n	29e <CONFIG_FLASH_SIZE+0x9e>
     240:	1a8b      	subs	r3, r1, r2
     242:	2601      	movs	r6, #1
     244:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     248:	b2aa      	uxth	r2, r5
     24a:	fbb3 f8fe 	udiv	r8, r3, lr
     24e:	0c21      	lsrs	r1, r4, #16
     250:	fb0e 3318 	mls	r3, lr, r8, r3
     254:	fb08 f902 	mul.w	r9, r8, r2
     258:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     25c:	4599      	cmp	r9, r3
     25e:	d961      	bls.n	324 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x24>
     260:	18eb      	adds	r3, r5, r3
     262:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     266:	d204      	bcs.n	272 <CONFIG_FLASH_SIZE+0x72>
     268:	4599      	cmp	r9, r3
     26a:	d902      	bls.n	272 <CONFIG_FLASH_SIZE+0x72>
     26c:	f1a8 0002 	sub.w	r0, r8, #2
     270:	442b      	add	r3, r5
     272:	eba3 0309 	sub.w	r3, r3, r9
     276:	b2a4      	uxth	r4, r4
     278:	fbb3 f1fe 	udiv	r1, r3, lr
     27c:	fb0e 3311 	mls	r3, lr, r1, r3
     280:	434a      	muls	r2, r1
     282:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     286:	42a2      	cmp	r2, r4
     288:	d94e      	bls.n	328 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x28>
     28a:	192c      	adds	r4, r5, r4
     28c:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
     290:	d203      	bcs.n	29a <CONFIG_FLASH_SIZE+0x9a>
     292:	42a2      	cmp	r2, r4
     294:	d901      	bls.n	29a <CONFIG_FLASH_SIZE+0x9a>
     296:	1e8b      	subs	r3, r1, #2
     298:	442c      	add	r4, r5
     29a:	1aa4      	subs	r4, r4, r2
     29c:	e7bc      	b.n	218 <CONFIG_FLASH_SIZE+0x18>
     29e:	f1cc 0e20 	rsb	lr, ip, #32
     2a2:	fa02 f50c 	lsl.w	r5, r2, ip
     2a6:	fa21 f90e 	lsr.w	r9, r1, lr
     2aa:	fa01 f30c 	lsl.w	r3, r1, ip
     2ae:	fa20 fe0e 	lsr.w	lr, r0, lr
     2b2:	ea4e 0303 	orr.w	r3, lr, r3
     2b6:	ea4f 4815 	mov.w	r8, r5, lsr #16
     2ba:	fa00 f40c 	lsl.w	r4, r0, ip
     2be:	fbb9 f1f8 	udiv	r1, r9, r8
     2c2:	fa1f fe85 	uxth.w	lr, r5
     2c6:	fb08 9211 	mls	r2, r8, r1, r9
     2ca:	0c18      	lsrs	r0, r3, #16
     2cc:	fb01 f60e 	mul.w	r6, r1, lr
     2d0:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
     2d4:	4296      	cmp	r6, r2
     2d6:	d921      	bls.n	31c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1c>
     2d8:	18aa      	adds	r2, r5, r2
     2da:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     2de:	d203      	bcs.n	2e8 <CONFIG_FLASH_SIZE+0xe8>
     2e0:	4296      	cmp	r6, r2
     2e2:	d901      	bls.n	2e8 <CONFIG_FLASH_SIZE+0xe8>
     2e4:	1e88      	subs	r0, r1, #2
     2e6:	442a      	add	r2, r5
     2e8:	1b92      	subs	r2, r2, r6
     2ea:	b29b      	uxth	r3, r3
     2ec:	fbb2 f9f8 	udiv	r9, r2, r8
     2f0:	fb08 2219 	mls	r2, r8, r9, r2
     2f4:	fb09 fe0e 	mul.w	lr, r9, lr
     2f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
     2fc:	459e      	cmp	lr, r3
     2fe:	d90f      	bls.n	320 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x20>
     300:	18eb      	adds	r3, r5, r3
     302:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
     306:	d204      	bcs.n	312 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x12>
     308:	459e      	cmp	lr, r3
     30a:	d902      	bls.n	312 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x12>
     30c:	f1a9 0602 	sub.w	r6, r9, #2
     310:	442b      	add	r3, r5
     312:	eba3 030e 	sub.w	r3, r3, lr
     316:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     31a:	e793      	b.n	244 <CONFIG_FLASH_SIZE+0x44>
     31c:	4608      	mov	r0, r1
     31e:	e7e3      	b.n	2e8 <CONFIG_FLASH_SIZE+0xe8>
     320:	464e      	mov	r6, r9
     322:	e7f6      	b.n	312 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x12>
     324:	4640      	mov	r0, r8
     326:	e7a4      	b.n	272 <CONFIG_FLASH_SIZE+0x72>
     328:	460b      	mov	r3, r1
     32a:	e7b6      	b.n	29a <CONFIG_FLASH_SIZE+0x9a>
     32c:	428b      	cmp	r3, r1
     32e:	d905      	bls.n	33c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3c>
     330:	b10f      	cbz	r7, 336 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x36>
     332:	e9c7 0100 	strd	r0, r1, [r7]
     336:	2600      	movs	r6, #0
     338:	4630      	mov	r0, r6
     33a:	e775      	b.n	228 <CONFIG_FLASH_SIZE+0x28>
     33c:	fab3 fc83 	clz	ip, r3
     340:	f1bc 0f00 	cmp.w	ip, #0
     344:	d10f      	bne.n	366 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x66>
     346:	428b      	cmp	r3, r1
     348:	d301      	bcc.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     34a:	4282      	cmp	r2, r0
     34c:	d809      	bhi.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     34e:	1a84      	subs	r4, r0, r2
     350:	eb61 0e03 	sbc.w	lr, r1, r3
     354:	2001      	movs	r0, #1
     356:	2f00      	cmp	r7, #0
     358:	d06a      	beq.n	430 <CONFIG_LOG_BUFFER_SIZE+0x30>
     35a:	e9c7 4e00 	strd	r4, lr, [r7]
     35e:	2600      	movs	r6, #0
     360:	e762      	b.n	228 <CONFIG_FLASH_SIZE+0x28>
     362:	4660      	mov	r0, ip
     364:	e7f7      	b.n	356 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x56>
     366:	f1cc 0e20 	rsb	lr, ip, #32
     36a:	fa03 f30c 	lsl.w	r3, r3, ip
     36e:	fa22 f50e 	lsr.w	r5, r2, lr
     372:	fa21 f40e 	lsr.w	r4, r1, lr
     376:	431d      	orrs	r5, r3
     378:	fa01 f30c 	lsl.w	r3, r1, ip
     37c:	fa20 f10e 	lsr.w	r1, r0, lr
     380:	430b      	orrs	r3, r1
     382:	ea4f 4a15 	mov.w	sl, r5, lsr #16
     386:	fa00 f60c 	lsl.w	r6, r0, ip
     38a:	fbb4 f9fa 	udiv	r9, r4, sl
     38e:	fa1f f885 	uxth.w	r8, r5
     392:	fb0a 4019 	mls	r0, sl, r9, r4
     396:	0c1c      	lsrs	r4, r3, #16
     398:	fb09 f108 	mul.w	r1, r9, r8
     39c:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
     3a0:	42a1      	cmp	r1, r4
     3a2:	fa02 f20c 	lsl.w	r2, r2, ip
     3a6:	d93f      	bls.n	428 <CONFIG_LOG_BUFFER_SIZE+0x28>
     3a8:	192c      	adds	r4, r5, r4
     3aa:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     3ae:	d204      	bcs.n	3ba <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xba>
     3b0:	42a1      	cmp	r1, r4
     3b2:	d902      	bls.n	3ba <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xba>
     3b4:	f1a9 0002 	sub.w	r0, r9, #2
     3b8:	442c      	add	r4, r5
     3ba:	1a64      	subs	r4, r4, r1
     3bc:	b29b      	uxth	r3, r3
     3be:	fbb4 f9fa 	udiv	r9, r4, sl
     3c2:	fb0a 4419 	mls	r4, sl, r9, r4
     3c6:	fb09 f808 	mul.w	r8, r9, r8
     3ca:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
     3ce:	4588      	cmp	r8, r1
     3d0:	d92c      	bls.n	42c <CONFIG_LOG_BUFFER_SIZE+0x2c>
     3d2:	1869      	adds	r1, r5, r1
     3d4:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
     3d8:	d204      	bcs.n	3e4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe4>
     3da:	4588      	cmp	r8, r1
     3dc:	d902      	bls.n	3e4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe4>
     3de:	f1a9 0302 	sub.w	r3, r9, #2
     3e2:	4429      	add	r1, r5
     3e4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3e8:	eba1 0108 	sub.w	r1, r1, r8
     3ec:	fba0 8902 	umull	r8, r9, r0, r2
     3f0:	4549      	cmp	r1, r9
     3f2:	46c2      	mov	sl, r8
     3f4:	464c      	mov	r4, r9
     3f6:	d302      	bcc.n	3fe <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x16>
     3f8:	d106      	bne.n	408 <CONFIG_LOG_BUFFER_SIZE+0x8>
     3fa:	4546      	cmp	r6, r8
     3fc:	d204      	bcs.n	408 <CONFIG_LOG_BUFFER_SIZE+0x8>
     3fe:	ebb8 0a02 	subs.w	sl, r8, r2
     402:	eb69 0405 	sbc.w	r4, r9, r5
     406:	3801      	subs	r0, #1
     408:	b197      	cbz	r7, 430 <CONFIG_LOG_BUFFER_SIZE+0x30>
     40a:	ebb6 030a 	subs.w	r3, r6, sl
     40e:	eb61 0604 	sbc.w	r6, r1, r4
     412:	fa06 fe0e 	lsl.w	lr, r6, lr
     416:	fa23 f30c 	lsr.w	r3, r3, ip
     41a:	ea4e 0303 	orr.w	r3, lr, r3
     41e:	fa26 f60c 	lsr.w	r6, r6, ip
     422:	e9c7 3600 	strd	r3, r6, [r7]
     426:	e79a      	b.n	35e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5e>
     428:	4648      	mov	r0, r9
     42a:	e7c6      	b.n	3ba <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xba>
     42c:	464b      	mov	r3, r9
     42e:	e7d9      	b.n	3e4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe4>
     430:	463e      	mov	r6, r7
     432:	e6f9      	b.n	228 <CONFIG_FLASH_SIZE+0x28>

00000434 <button0_callback>:
es_button_t button1 = {0};
es_button_t button0 = {0};


void button0_callback(struct device *gpiob, struct gpio_callback *cb, u32_t pins)
{
     434:	b508      	push	{r3, lr}
    printk("Button 0 pressed!\n");
     436:	4806      	ldr	r0, [pc, #24]	; (450 <button0_callback+0x1c>)
     438:	f003 ffaa 	bl	4390 <printk>
    es_led_on(&led2);
     43c:	4805      	ldr	r0, [pc, #20]	; (454 <button0_callback+0x20>)
     43e:	f003 fdb0 	bl	3fa2 <es_led_on>
	return z_impl_k_sleep(ms);
     442:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    k_sleep(500);
}
     446:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     44a:	f004 bea0 	b.w	518e <z_impl_k_sleep>
     44e:	bf00      	nop
     450:	0000566c 	.word	0x0000566c
     454:	20000048 	.word	0x20000048

00000458 <button1_callback>:

void button1_callback(struct device *gpiob, struct gpio_callback *cb, u32_t pins)
{
     458:	b508      	push	{r3, lr}
    printk("Button 1 pressed!\n");
     45a:	4806      	ldr	r0, [pc, #24]	; (474 <button1_callback+0x1c>)
     45c:	f003 ff98 	bl	4390 <printk>
    es_led_on(&led3);
     460:	4805      	ldr	r0, [pc, #20]	; (478 <button1_callback+0x20>)
     462:	f003 fd9e 	bl	3fa2 <es_led_on>
     466:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    k_sleep(500);
}
     46a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     46e:	f004 be8e 	b.w	518e <z_impl_k_sleep>
     472:	bf00      	nop
     474:	0000567f 	.word	0x0000567f
     478:	20000054 	.word	0x20000054

0000047c <main>:


void main(void)
{
     47c:	b508      	push	{r3, lr}
    es_led_init(&led0, LED_DEVICE, LED_PIN0);
     47e:	2211      	movs	r2, #17
     480:	4911      	ldr	r1, [pc, #68]	; (4c8 <main+0x4c>)
     482:	4812      	ldr	r0, [pc, #72]	; (4cc <main+0x50>)
     484:	f003 fd7a 	bl	3f7c <es_led_init>

    es_led_init(&led1, LED_DEVICE, LED_PIN1);
     488:	2212      	movs	r2, #18
     48a:	490f      	ldr	r1, [pc, #60]	; (4c8 <main+0x4c>)
     48c:	4810      	ldr	r0, [pc, #64]	; (4d0 <main+0x54>)
     48e:	f003 fd75 	bl	3f7c <es_led_init>
    es_led_on(&led1);
     492:	480f      	ldr	r0, [pc, #60]	; (4d0 <main+0x54>)
     494:	f003 fd85 	bl	3fa2 <es_led_on>

    es_led_init(&led2, LED_DEVICE, LED_PIN2);
     498:	2213      	movs	r2, #19
     49a:	490b      	ldr	r1, [pc, #44]	; (4c8 <main+0x4c>)
     49c:	480d      	ldr	r0, [pc, #52]	; (4d4 <main+0x58>)
     49e:	f003 fd6d 	bl	3f7c <es_led_init>
    es_led_init(&led3, LED_DEVICE, LED_PIN3);
     4a2:	2214      	movs	r2, #20
     4a4:	4908      	ldr	r1, [pc, #32]	; (4c8 <main+0x4c>)
     4a6:	480c      	ldr	r0, [pc, #48]	; (4d8 <main+0x5c>)
     4a8:	f003 fd68 	bl	3f7c <es_led_init>

    es_button_create(&button0, BUTTON_DEVICE, BUTTON_PIN0, button0_callback);
     4ac:	4b0b      	ldr	r3, [pc, #44]	; (4dc <main+0x60>)
     4ae:	4906      	ldr	r1, [pc, #24]	; (4c8 <main+0x4c>)
     4b0:	480b      	ldr	r0, [pc, #44]	; (4e0 <main+0x64>)
     4b2:	220d      	movs	r2, #13
     4b4:	f003 fd78 	bl	3fa8 <es_button_create>
    es_button_create(&button1, BUTTON_DEVICE, BUTTON_PIN1, button1_callback);
     4b8:	4b0a      	ldr	r3, [pc, #40]	; (4e4 <main+0x68>)
     4ba:	4903      	ldr	r1, [pc, #12]	; (4c8 <main+0x4c>)
     4bc:	480a      	ldr	r0, [pc, #40]	; (4e8 <main+0x6c>)
     4be:	220e      	movs	r2, #14
     4c0:	f003 fd72 	bl	3fa8 <es_button_create>

    while (1) {
    
    }
     4c4:	e7fe      	b.n	4c4 <main+0x48>
     4c6:	bf00      	nop
     4c8:	00005692 	.word	0x00005692
     4cc:	20000030 	.word	0x20000030
     4d0:	2000003c 	.word	0x2000003c
     4d4:	20000048 	.word	0x20000048
     4d8:	20000054 	.word	0x20000054
     4dc:	00000435 	.word	0x00000435
     4e0:	20000008 	.word	0x20000008
     4e4:	00000459 	.word	0x00000459
     4e8:	2000001c 	.word	0x2000001c

000004ec <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     4ec:	680b      	ldr	r3, [r1, #0]
     4ee:	3301      	adds	r3, #1
     4f0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     4f2:	4b01      	ldr	r3, [pc, #4]	; (4f8 <char_out+0xc>)
     4f4:	681b      	ldr	r3, [r3, #0]
     4f6:	4718      	bx	r3
     4f8:	200017b0 	.word	0x200017b0

000004fc <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     500:	b085      	sub	sp, #20
     502:	469b      	mov	fp, r3
     504:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     506:	f8df 9088 	ldr.w	r9, [pc, #136]	; 590 <_printk_dec_ulong+0x94>
     50a:	2c01      	cmp	r4, #1
     50c:	bfb8      	it	lt
     50e:	2401      	movlt	r4, #1
     510:	2b01      	cmp	r3, #1
     512:	bf0c      	ite	eq
     514:	2330      	moveq	r3, #48	; 0x30
     516:	2320      	movne	r3, #32
     518:	4616      	mov	r6, r2
     51a:	4682      	mov	sl, r0
     51c:	4688      	mov	r8, r1
     51e:	9302      	str	r3, [sp, #8]
     520:	2501      	movs	r5, #1
     522:	270a      	movs	r7, #10
     524:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
     526:	fbb6 f3f9 	udiv	r3, r6, r9
     52a:	9301      	str	r3, [sp, #4]
     52c:	b90a      	cbnz	r2, 532 <_printk_dec_ulong+0x36>
     52e:	45b1      	cmp	r9, r6
     530:	d81d      	bhi.n	56e <_printk_dec_ulong+0x72>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
     532:	9b01      	ldr	r3, [sp, #4]
     534:	4641      	mov	r1, r8
     536:	f103 0030 	add.w	r0, r3, #48	; 0x30
     53a:	47d0      	blx	sl
			digits++;
     53c:	3501      	adds	r5, #1
			found_largest_digit = 1;
     53e:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
     540:	9b01      	ldr	r3, [sp, #4]
		remaining--;
     542:	3f01      	subs	r7, #1
	while (pos >= 10) {
     544:	2f01      	cmp	r7, #1
		remainder %= pos;
     546:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
     54a:	f04f 030a 	mov.w	r3, #10
     54e:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
     552:	d1e8      	bne.n	526 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
     554:	4641      	mov	r1, r8
     556:	f106 0030 	add.w	r0, r6, #48	; 0x30
     55a:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
     55c:	f1bb 0f03 	cmp.w	fp, #3
     560:	d102      	bne.n	568 <_printk_dec_ulong+0x6c>
		remaining = min_width - digits;
     562:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
     564:	2c00      	cmp	r4, #0
     566:	dc0e      	bgt.n	586 <_printk_dec_ulong+0x8a>
			out(' ', ctx);
		}
	}
}
     568:	b005      	add	sp, #20
     56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     56e:	42bc      	cmp	r4, r7
     570:	dbe6      	blt.n	540 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     572:	f1bb 0f02 	cmp.w	fp, #2
     576:	d8e3      	bhi.n	540 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     578:	4641      	mov	r1, r8
     57a:	9802      	ldr	r0, [sp, #8]
     57c:	9203      	str	r2, [sp, #12]
			digits++;
     57e:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     580:	47d0      	blx	sl
			digits++;
     582:	9a03      	ldr	r2, [sp, #12]
     584:	e7dc      	b.n	540 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     586:	4641      	mov	r1, r8
     588:	2020      	movs	r0, #32
     58a:	47d0      	blx	sl
     58c:	3c01      	subs	r4, #1
     58e:	e7e9      	b.n	564 <_printk_dec_ulong+0x68>
     590:	3b9aca00 	.word	0x3b9aca00

00000594 <__printk_hook_install>:
	_char_out = fn;
     594:	4b01      	ldr	r3, [pc, #4]	; (59c <__printk_hook_install+0x8>)
     596:	6018      	str	r0, [r3, #0]
}
     598:	4770      	bx	lr
     59a:	bf00      	nop
     59c:	200017b0 	.word	0x200017b0

000005a0 <vprintk>:
{
     5a0:	b507      	push	{r0, r1, r2, lr}
	struct out_context ctx = { 0 };
     5a2:	2300      	movs	r3, #0
     5a4:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
     5a6:	4602      	mov	r2, r0
     5a8:	460b      	mov	r3, r1
     5aa:	4803      	ldr	r0, [pc, #12]	; (5b8 <vprintk+0x18>)
     5ac:	a901      	add	r1, sp, #4
     5ae:	f003 fd7f 	bl	40b0 <z_vprintk>
}
     5b2:	b003      	add	sp, #12
     5b4:	f85d fb04 	ldr.w	pc, [sp], #4
     5b8:	000004ed 	.word	0x000004ed

000005bc <nordicsemi_nrf52_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     5bc:	f04f 0320 	mov.w	r3, #32
     5c0:	f3ef 8211 	mrs	r2, BASEPRI
     5c4:	f383 8811 	msr	BASEPRI, r3
     5c8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     5cc:	4906      	ldr	r1, [pc, #24]	; (5e8 <nordicsemi_nrf52_init+0x2c>)
     5ce:	2301      	movs	r3, #1
     5d0:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
     5d4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     5d8:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     5dc:	f382 8811 	msr	BASEPRI, r2
     5e0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     5e4:	2000      	movs	r0, #0
     5e6:	4770      	bx	lr
     5e8:	4001e000 	.word	0x4001e000

000005ec <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
     5ec:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
     5ee:	2200      	movs	r2, #0
{
     5f0:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
     5f2:	490d      	ldr	r1, [pc, #52]	; (628 <enable_logger+0x3c>)
     5f4:	480d      	ldr	r0, [pc, #52]	; (62c <enable_logger+0x40>)
     5f6:	f004 fe62 	bl	52be <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     5fa:	4d0d      	ldr	r5, [pc, #52]	; (630 <enable_logger+0x44>)
     5fc:	490d      	ldr	r1, [pc, #52]	; (634 <enable_logger+0x48>)
     5fe:	2400      	movs	r4, #0
     600:	230e      	movs	r3, #14
     602:	e9cd 4302 	strd	r4, r3, [sp, #8]
     606:	e9cd 4404 	strd	r4, r4, [sp, #16]
     60a:	e9cd 4400 	strd	r4, r4, [sp]
     60e:	4b0a      	ldr	r3, [pc, #40]	; (638 <enable_logger+0x4c>)
     610:	f44f 7240 	mov.w	r2, #768	; 0x300
     614:	4628      	mov	r0, r5
     616:	f003 fad1 	bl	3bbc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
     61a:	4908      	ldr	r1, [pc, #32]	; (63c <enable_logger+0x50>)
     61c:	4628      	mov	r0, r5
     61e:	f004 fdde 	bl	51de <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
     622:	4620      	mov	r0, r4
     624:	b007      	add	sp, #28
     626:	bd30      	pop	{r4, r5, pc}
     628:	00000641 	.word	0x00000641
     62c:	20000074 	.word	0x20000074
     630:	200000bc 	.word	0x200000bc
     634:	200002d0 	.word	0x200002d0
     638:	00000a55 	.word	0x00000a55
     63c:	000056ac 	.word	0x000056ac

00000640 <log_process_thread_timer_expiry_fn>:
		z_arch_syscall_invoke1(*(u32_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     640:	4801      	ldr	r0, [pc, #4]	; (648 <log_process_thread_timer_expiry_fn+0x8>)
     642:	f003 ba35 	b.w	3ab0 <z_impl_k_sem_give>
     646:	bf00      	nop
     648:	20001870 	.word	0x20001870

0000064c <log_core_init>:
{
     64c:	b508      	push	{r3, lr}
		log_msg_pool_init();
     64e:	f000 fa61 	bl	b14 <log_msg_pool_init>
		log_list_init(&list);
     652:	4809      	ldr	r0, [pc, #36]	; (678 <log_core_init+0x2c>)
     654:	f003 feac 	bl	43b0 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
     658:	2304      	movs	r3, #4
     65a:	2228      	movs	r2, #40	; 0x28
     65c:	4807      	ldr	r0, [pc, #28]	; (67c <log_core_init+0x30>)
     65e:	4908      	ldr	r1, [pc, #32]	; (680 <log_core_init+0x34>)
     660:	f004 fcc4 	bl	4fec <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
     664:	4b07      	ldr	r3, [pc, #28]	; (684 <log_core_init+0x38>)
     666:	4a08      	ldr	r2, [pc, #32]	; (688 <log_core_init+0x3c>)
     668:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
     66a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
     66e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
     672:	f000 bc7f 	b.w	f74 <log_output_timestamp_freq_set>
     676:	bf00      	nop
     678:	2000006c 	.word	0x2000006c
     67c:	200000a0 	.word	0x200000a0
     680:	20001310 	.word	0x20001310
     684:	200017b4 	.word	0x200017b4
     688:	000043ef 	.word	0x000043ef

0000068c <dropped_notify>:
{
     68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     68e:	4b0f      	ldr	r3, [pc, #60]	; (6cc <dropped_notify+0x40>)
     690:	f3bf 8f5b 	dmb	ish
     694:	2500      	movs	r5, #0
     696:	e853 7f00 	ldrex	r7, [r3]
     69a:	e843 5200 	strex	r2, r5, [r3]
     69e:	2a00      	cmp	r2, #0
     6a0:	d1f9      	bne.n	696 <dropped_notify+0xa>
     6a2:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
     6a6:	4c0a      	ldr	r4, [pc, #40]	; (6d0 <dropped_notify+0x44>)
     6a8:	4e0a      	ldr	r6, [pc, #40]	; (6d4 <dropped_notify+0x48>)
     6aa:	1b36      	subs	r6, r6, r4
     6ac:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
     6ae:	42b5      	cmp	r5, r6
     6b0:	db00      	blt.n	6b4 <dropped_notify+0x28>
}
     6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
     6b4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
     6b6:	795b      	ldrb	r3, [r3, #5]
     6b8:	b12b      	cbz	r3, 6c6 <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
     6ba:	6823      	ldr	r3, [r4, #0]
     6bc:	68db      	ldr	r3, [r3, #12]
     6be:	b113      	cbz	r3, 6c6 <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
     6c0:	4639      	mov	r1, r7
     6c2:	4620      	mov	r0, r4
     6c4:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
     6c6:	3501      	adds	r5, #1
     6c8:	3410      	adds	r4, #16
     6ca:	e7f0      	b.n	6ae <dropped_notify+0x22>
     6cc:	20000064 	.word	0x20000064
     6d0:	00005530 	.word	0x00005530
     6d4:	00005540 	.word	0x00005540

000006d8 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
     6d8:	4b06      	ldr	r3, [pc, #24]	; (6f4 <log_dropped+0x1c>)
     6da:	f3bf 8f5b 	dmb	ish
     6de:	e853 2f00 	ldrex	r2, [r3]
     6e2:	3201      	adds	r2, #1
     6e4:	e843 2100 	strex	r1, r2, [r3]
     6e8:	2900      	cmp	r1, #0
     6ea:	d1f8      	bne.n	6de <log_dropped+0x6>
     6ec:	f3bf 8f5b 	dmb	ish
}
     6f0:	4770      	bx	lr
     6f2:	bf00      	nop
     6f4:	20000064 	.word	0x20000064

000006f8 <log_source_name_get>:
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
     6f8:	4a04      	ldr	r2, [pc, #16]	; (70c <log_source_name_get+0x14>)
     6fa:	4b05      	ldr	r3, [pc, #20]	; (710 <log_source_name_get+0x18>)
     6fc:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
     6fe:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
     702:	bf34      	ite	cc
     704:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
     708:	2000      	movcs	r0, #0
}
     70a:	4770      	bx	lr
     70c:	000054f8 	.word	0x000054f8
     710:	00005530 	.word	0x00005530

00000714 <log_backend_enable>:
	id += backend - log_backend_get(0);
     714:	4b06      	ldr	r3, [pc, #24]	; (730 <log_backend_enable+0x1c>)
	log_backend_id_set(backend, id);
     716:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
     718:	1ac3      	subs	r3, r0, r3
     71a:	111b      	asrs	r3, r3, #4
     71c:	3301      	adds	r3, #1
	log_backend_id_set(backend, id);
     71e:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
     720:	6842      	ldr	r2, [r0, #4]
	backend->cb->active = true;
     722:	2301      	movs	r3, #1
	backend->cb->ctx = ctx;
     724:	6011      	str	r1, [r2, #0]
	backend->cb->active = true;
     726:	7153      	strb	r3, [r2, #5]
	backend_attached = true;
     728:	4a02      	ldr	r2, [pc, #8]	; (734 <log_backend_enable+0x20>)
     72a:	7013      	strb	r3, [r2, #0]
}
     72c:	4770      	bx	lr
     72e:	bf00      	nop
     730:	00005530 	.word	0x00005530
     734:	200002c4 	.word	0x200002c4

00000738 <log_init>:
{
     738:	b570      	push	{r4, r5, r6, lr}
     73a:	4b11      	ldr	r3, [pc, #68]	; (780 <log_init+0x48>)
     73c:	f3bf 8f5b 	dmb	ish
     740:	e853 5f00 	ldrex	r5, [r3]
     744:	1c6a      	adds	r2, r5, #1
     746:	e843 2100 	strex	r1, r2, [r3]
     74a:	2900      	cmp	r1, #0
     74c:	d1f8      	bne.n	740 <log_init+0x8>
     74e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
     752:	b92d      	cbnz	r5, 760 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
     754:	4c0b      	ldr	r4, [pc, #44]	; (784 <log_init+0x4c>)
     756:	4e0c      	ldr	r6, [pc, #48]	; (788 <log_init+0x50>)
     758:	1b36      	subs	r6, r6, r4
     75a:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
     75c:	42b5      	cmp	r5, r6
     75e:	db00      	blt.n	762 <log_init+0x2a>
}
     760:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
     762:	7b23      	ldrb	r3, [r4, #12]
     764:	b143      	cbz	r3, 778 <log_init+0x40>
			if (backend->api->init != NULL) {
     766:	6823      	ldr	r3, [r4, #0]
     768:	695b      	ldr	r3, [r3, #20]
     76a:	b103      	cbz	r3, 76e <log_init+0x36>
				backend->api->init();
     76c:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
     76e:	2204      	movs	r2, #4
     770:	2100      	movs	r1, #0
     772:	4620      	mov	r0, r4
     774:	f7ff ffce 	bl	714 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
     778:	3501      	adds	r5, #1
     77a:	3410      	adds	r4, #16
     77c:	e7ee      	b.n	75c <log_init+0x24>
     77e:	bf00      	nop
     780:	20000068 	.word	0x20000068
     784:	00005530 	.word	0x00005530
     788:	00005540 	.word	0x00005540

0000078c <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
     78c:	4b16      	ldr	r3, [pc, #88]	; (7e8 <log_strdup+0x5c>)
     78e:	4298      	cmp	r0, r3
{
     790:	b537      	push	{r0, r1, r2, r4, r5, lr}
     792:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
     794:	d302      	bcc.n	79c <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
     796:	4b15      	ldr	r3, [pc, #84]	; (7ec <log_strdup+0x60>)
     798:	4298      	cmp	r0, r3
     79a:	d31f      	bcc.n	7dc <log_strdup+0x50>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
     79c:	2200      	movs	r2, #0
     79e:	a901      	add	r1, sp, #4
     7a0:	4813      	ldr	r0, [pc, #76]	; (7f0 <log_strdup+0x64>)
     7a2:	f002 febd 	bl	3520 <k_mem_slab_alloc>
	if (err != 0) {
     7a6:	4605      	mov	r5, r0
     7a8:	b9d8      	cbnz	r0, 7e2 <log_strdup+0x56>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     7aa:	2201      	movs	r2, #1
     7ac:	9b01      	ldr	r3, [sp, #4]
     7ae:	f3bf 8f5b 	dmb	ish
     7b2:	e853 1f00 	ldrex	r1, [r3]
     7b6:	e843 2000 	strex	r0, r2, [r3]
     7ba:	2800      	cmp	r0, #0
     7bc:	d1f9      	bne.n	7b2 <log_strdup+0x26>
     7be:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
     7c2:	9801      	ldr	r0, [sp, #4]
     7c4:	4621      	mov	r1, r4
     7c6:	221f      	movs	r2, #31
     7c8:	3004      	adds	r0, #4
     7ca:	f004 f977 	bl	4abc <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
     7ce:	9c01      	ldr	r4, [sp, #4]
     7d0:	237e      	movs	r3, #126	; 0x7e
     7d2:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
     7d6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
     7da:	3404      	adds	r4, #4
}
     7dc:	4620      	mov	r0, r4
     7de:	b003      	add	sp, #12
     7e0:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
     7e2:	4c04      	ldr	r4, [pc, #16]	; (7f4 <log_strdup+0x68>)
     7e4:	e7fa      	b.n	7dc <log_strdup+0x50>
     7e6:	bf00      	nop
     7e8:	00005330 	.word	0x00005330
     7ec:	00005dcc 	.word	0x00005dcc
     7f0:	200000a0 	.word	0x200000a0
     7f4:	000056b4 	.word	0x000056b4

000007f8 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
     7f8:	b148      	cbz	r0, 80e <CONFIG_ISR_STACK_SIZE+0xe>
     7fa:	4b05      	ldr	r3, [pc, #20]	; (810 <CONFIG_ISR_STACK_SIZE+0x10>)
     7fc:	4298      	cmp	r0, r3
     7fe:	d305      	bcc.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
     800:	33a0      	adds	r3, #160	; 0xa0
     802:	4298      	cmp	r0, r3
     804:	bf2c      	ite	cs
     806:	2000      	movcs	r0, #0
     808:	2001      	movcc	r0, #1
     80a:	4770      	bx	lr
     80c:	2000      	movs	r0, #0
}
     80e:	4770      	bx	lr
     810:	20001310 	.word	0x20001310

00000814 <z_impl_log_process>:
{
     814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
     818:	4b53      	ldr	r3, [pc, #332]	; (968 <z_impl_log_process+0x154>)
     81a:	781b      	ldrb	r3, [r3, #0]
{
     81c:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
     81e:	b903      	cbnz	r3, 822 <z_impl_log_process+0xe>
     820:	b360      	cbz	r0, 87c <z_impl_log_process+0x68>
	__asm__ volatile(
     822:	f04f 0320 	mov.w	r3, #32
     826:	f3ef 8611 	mrs	r6, BASEPRI
     82a:	f383 8811 	msr	BASEPRI, r3
     82e:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
     832:	484e      	ldr	r0, [pc, #312]	; (96c <z_impl_log_process+0x158>)
     834:	f003 fdcc 	bl	43d0 <log_list_head_get>
     838:	4605      	mov	r5, r0
	__asm__ volatile(
     83a:	f386 8811 	msr	BASEPRI, r6
     83e:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
     842:	b178      	cbz	r0, 864 <z_impl_log_process+0x50>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
     844:	f3bf 8f5b 	dmb	ish
     848:	4b49      	ldr	r3, [pc, #292]	; (970 <z_impl_log_process+0x15c>)
     84a:	e853 2f00 	ldrex	r2, [r3]
     84e:	3a01      	subs	r2, #1
     850:	e843 2100 	strex	r1, r2, [r3]
     854:	2900      	cmp	r1, #0
     856:	d1f8      	bne.n	84a <z_impl_log_process+0x36>
     858:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
     85c:	b18c      	cbz	r4, 882 <z_impl_log_process+0x6e>
	log_msg_put(msg);
     85e:	4628      	mov	r0, r5
     860:	f003 fe9c 	bl	459c <log_msg_put>
	if (!bypass && dropped_cnt) {
     864:	b924      	cbnz	r4, 870 <z_impl_log_process+0x5c>
     866:	4b43      	ldr	r3, [pc, #268]	; (974 <z_impl_log_process+0x160>)
     868:	681b      	ldr	r3, [r3, #0]
     86a:	b10b      	cbz	r3, 870 <z_impl_log_process+0x5c>
		dropped_notify();
     86c:	f7ff ff0e 	bl	68c <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
     870:	483e      	ldr	r0, [pc, #248]	; (96c <z_impl_log_process+0x158>)
     872:	f003 fdab 	bl	43cc <log_list_head_peek>
     876:	1c04      	adds	r4, r0, #0
     878:	bf18      	it	ne
     87a:	2401      	movne	r4, #1
}
     87c:	4620      	mov	r0, r4
     87e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
     882:	4b3d      	ldr	r3, [pc, #244]	; (978 <z_impl_log_process+0x164>)
     884:	781b      	ldrb	r3, [r3, #0]
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
     886:	b9db      	cbnz	r3, 8c0 <z_impl_log_process+0xac>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
     888:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
     88a:	07db      	lsls	r3, r3, #31
     88c:	d418      	bmi.n	8c0 <z_impl_log_process+0xac>
	msg_str = log_msg_str_get(msg);
     88e:	f003 fe98 	bl	45c2 <log_msg_str_get>
     892:	4681      	mov	r9, r0
	mask = count_s(msg_str, log_msg_nargs_get(msg));
     894:	4628      	mov	r0, r5
     896:	f003 fe61 	bl	455c <log_msg_nargs_get>
	u32_t mask = 0;
     89a:	4626      	mov	r6, r4
	bool arm = false;
     89c:	4622      	mov	r2, r4
	mask = count_s(msg_str, log_msg_nargs_get(msg));
     89e:	46cc      	mov	ip, r9
	u32_t arg = 0;
     8a0:	4623      	mov	r3, r4
				mask |= BIT(arg);
     8a2:	f04f 0e01 	mov.w	lr, #1
	while ((curr = *str++) && arg < nargs) {
     8a6:	f81c 1b01 	ldrb.w	r1, [ip], #1
     8aa:	b109      	cbz	r1, 8b0 <z_impl_log_process+0x9c>
     8ac:	4298      	cmp	r0, r3
     8ae:	d80e      	bhi.n	8ce <z_impl_log_process+0xba>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
     8b0:	4b32      	ldr	r3, [pc, #200]	; (97c <z_impl_log_process+0x168>)
				LOG_ERR(ERR_MSG, idx, msg_str);
     8b2:	4a33      	ldr	r2, [pc, #204]	; (980 <z_impl_log_process+0x16c>)
     8b4:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 998 <z_impl_log_process+0x184>
     8b8:	1a9b      	subs	r3, r3, r2
     8ba:	f3c3 0ac9 	ubfx	sl, r3, #3, #10
	while (mask) {
     8be:	b9d6      	cbnz	r6, 8f6 <z_impl_log_process+0xe2>
     8c0:	4e30      	ldr	r6, [pc, #192]	; (984 <z_impl_log_process+0x170>)
     8c2:	4f31      	ldr	r7, [pc, #196]	; (988 <z_impl_log_process+0x174>)
     8c4:	1bbf      	subs	r7, r7, r6
     8c6:	113f      	asrs	r7, r7, #4
     8c8:	f04f 0800 	mov.w	r8, #0
     8cc:	e048      	b.n	960 <z_impl_log_process+0x14c>
		if (curr == '%') {
     8ce:	2925      	cmp	r1, #37	; 0x25
     8d0:	d102      	bne.n	8d8 <z_impl_log_process+0xc4>
			arm = !arm;
     8d2:	f082 0201 	eor.w	r2, r2, #1
     8d6:	e7e6      	b.n	8a6 <z_impl_log_process+0x92>
		} else if (arm && isalpha(curr)) {
     8d8:	2a00      	cmp	r2, #0
     8da:	d0e4      	beq.n	8a6 <z_impl_log_process+0x92>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
}

static inline int isalpha(int c)
{
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
     8dc:	f041 0720 	orr.w	r7, r1, #32
     8e0:	3f61      	subs	r7, #97	; 0x61
     8e2:	2f19      	cmp	r7, #25
     8e4:	d8df      	bhi.n	8a6 <z_impl_log_process+0x92>
			if (curr == 's') {
     8e6:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
     8e8:	bf04      	itt	eq
     8ea:	fa0e f203 	lsleq.w	r2, lr, r3
     8ee:	4316      	orreq	r6, r2
			arg++;
     8f0:	3301      	adds	r3, #1
			arm = false;
     8f2:	2200      	movs	r2, #0
     8f4:	e7d7      	b.n	8a6 <z_impl_log_process+0x92>
		idx = 31 - __builtin_clz(mask);
     8f6:	fab6 f786 	clz	r7, r6
     8fa:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
     8fe:	4639      	mov	r1, r7
     900:	4628      	mov	r0, r5
     902:	f003 fe2e 	bl	4562 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
     906:	4b21      	ldr	r3, [pc, #132]	; (98c <z_impl_log_process+0x178>)
     908:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
     90a:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
     90c:	d302      	bcc.n	914 <z_impl_log_process+0x100>
		if (!is_rodata(str) && !log_is_strdup(str) &&
     90e:	4b20      	ldr	r3, [pc, #128]	; (990 <z_impl_log_process+0x17c>)
     910:	4298      	cmp	r0, r3
     912:	d314      	bcc.n	93e <z_impl_log_process+0x12a>
     914:	4610      	mov	r0, r2
     916:	f7ff ff6f 	bl	7f8 <log_is_strdup>
     91a:	b980      	cbnz	r0, 93e <z_impl_log_process+0x12a>
     91c:	4b1d      	ldr	r3, [pc, #116]	; (994 <z_impl_log_process+0x180>)
     91e:	429a      	cmp	r2, r3
     920:	d00d      	beq.n	93e <z_impl_log_process+0x12a>
				LOG_ERR(ERR_MSG, idx, msg_str);
     922:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
     926:	f043 0301 	orr.w	r3, r3, #1
     92a:	f363 0807 	bfi	r8, r3, #0, #8
     92e:	f36a 188f 	bfi	r8, sl, #6, #10
     932:	4643      	mov	r3, r8
     934:	464a      	mov	r2, r9
     936:	4639      	mov	r1, r7
     938:	4658      	mov	r0, fp
     93a:	f003 fd7d 	bl	4438 <log_2>
		mask &= ~BIT(idx);
     93e:	2301      	movs	r3, #1
     940:	fa03 f707 	lsl.w	r7, r3, r7
     944:	ea26 0607 	bic.w	r6, r6, r7
     948:	e7b9      	b.n	8be <z_impl_log_process+0xaa>
	return backend->cb->active;
     94a:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
     94c:	795b      	ldrb	r3, [r3, #5]
     94e:	b123      	cbz	r3, 95a <z_impl_log_process+0x146>
	backend->api->put(backend, msg);
     950:	6833      	ldr	r3, [r6, #0]
     952:	4629      	mov	r1, r5
     954:	681b      	ldr	r3, [r3, #0]
     956:	4630      	mov	r0, r6
     958:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
     95a:	f108 0801 	add.w	r8, r8, #1
     95e:	3610      	adds	r6, #16
     960:	45b8      	cmp	r8, r7
     962:	dbf2      	blt.n	94a <z_impl_log_process+0x136>
     964:	e77b      	b.n	85e <z_impl_log_process+0x4a>
     966:	bf00      	nop
     968:	200002c4 	.word	0x200002c4
     96c:	2000006c 	.word	0x2000006c
     970:	20000060 	.word	0x20000060
     974:	20000064 	.word	0x20000064
     978:	200002c5 	.word	0x200002c5
     97c:	00005500 	.word	0x00005500
     980:	000054f8 	.word	0x000054f8
     984:	00005530 	.word	0x00005530
     988:	00005540 	.word	0x00005540
     98c:	00005330 	.word	0x00005330
     990:	00005dcc 	.word	0x00005dcc
     994:	000056b4 	.word	0x000056b4
     998:	000056d2 	.word	0x000056d2

0000099c <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
     99c:	4b26      	ldr	r3, [pc, #152]	; (a38 <msg_finalize+0x9c>)
{
     99e:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
     9a0:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
     9a2:	8141      	strh	r1, [r0, #10]
{
     9a4:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
     9a6:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
     9a8:	4c24      	ldr	r4, [pc, #144]	; (a3c <msg_finalize+0xa0>)
     9aa:	60e8      	str	r0, [r5, #12]
     9ac:	f3bf 8f5b 	dmb	ish
     9b0:	e854 3f00 	ldrex	r3, [r4]
     9b4:	3301      	adds	r3, #1
     9b6:	e844 3200 	strex	r2, r3, [r4]
     9ba:	2a00      	cmp	r2, #0
     9bc:	d1f8      	bne.n	9b0 <msg_finalize+0x14>
     9be:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
     9c2:	f04f 0320 	mov.w	r3, #32
     9c6:	f3ef 8611 	mrs	r6, BASEPRI
     9ca:	f383 8811 	msr	BASEPRI, r3
     9ce:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
     9d2:	481b      	ldr	r0, [pc, #108]	; (a40 <msg_finalize+0xa4>)
     9d4:	4629      	mov	r1, r5
     9d6:	f003 fcef 	bl	43b8 <log_list_add_tail>
	__asm__ volatile(
     9da:	f386 8811 	msr	BASEPRI, r6
     9de:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
     9e2:	4b18      	ldr	r3, [pc, #96]	; (a44 <msg_finalize+0xa8>)
     9e4:	781a      	ldrb	r2, [r3, #0]
     9e6:	b17a      	cbz	r2, a08 <msg_finalize+0x6c>
	__asm__ volatile(
     9e8:	f04f 0320 	mov.w	r3, #32
     9ec:	f3ef 8411 	mrs	r4, BASEPRI
     9f0:	f383 8811 	msr	BASEPRI, r3
     9f4:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) z_arch_syscall_invoke1(*(u32_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
     9f8:	2000      	movs	r0, #0
     9fa:	f7ff ff0b 	bl	814 <z_impl_log_process>
	__asm__ volatile(
     9fe:	f384 8811 	msr	BASEPRI, r4
     a02:	f3bf 8f6f 	isb	sy
}
     a06:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
     a08:	490f      	ldr	r1, [pc, #60]	; (a48 <msg_finalize+0xac>)
     a0a:	6823      	ldr	r3, [r4, #0]
     a0c:	6809      	ldr	r1, [r1, #0]
     a0e:	2900      	cmp	r1, #0
     a10:	d0f9      	beq.n	a06 <msg_finalize+0x6a>
     a12:	2b01      	cmp	r3, #1
     a14:	d106      	bne.n	a24 <msg_finalize+0x88>
	z_impl_k_timer_start(timer, duration, period);
     a16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     a1a:	480c      	ldr	r0, [pc, #48]	; (a4c <msg_finalize+0xb0>)
}
     a1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     a20:	f003 ba6a 	b.w	3ef8 <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
     a24:	2b0a      	cmp	r3, #10
     a26:	d1ee      	bne.n	a06 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
     a28:	4808      	ldr	r0, [pc, #32]	; (a4c <msg_finalize+0xb0>)
     a2a:	f004 fc54 	bl	52d6 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
     a2e:	4808      	ldr	r0, [pc, #32]	; (a50 <msg_finalize+0xb4>)
}
     a30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     a34:	f003 b83c 	b.w	3ab0 <z_impl_k_sem_give>
     a38:	200017b4 	.word	0x200017b4
     a3c:	20000060 	.word	0x20000060
     a40:	2000006c 	.word	0x2000006c
     a44:	200002c5 	.word	0x200002c5
     a48:	20000128 	.word	0x20000128
     a4c:	20000074 	.word	0x20000074
     a50:	20001870 	.word	0x20001870

00000a54 <log_process_thread_func>:
{
     a54:	b508      	push	{r3, lr}
	log_init();
     a56:	f7ff fe6f 	bl	738 <log_init>
	return z_impl_k_current_get();
     a5a:	f003 f823 	bl	3aa4 <z_impl_k_current_get>
	proc_tid = process_tid;
     a5e:	4b0b      	ldr	r3, [pc, #44]	; (a8c <log_process_thread_func+0x38>)
     a60:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
     a62:	b130      	cbz	r0, a72 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
     a64:	4b0a      	ldr	r3, [pc, #40]	; (a90 <log_process_thread_func+0x3c>)
	    process_tid &&
     a66:	681b      	ldr	r3, [r3, #0]
     a68:	2b09      	cmp	r3, #9
     a6a:	dd02      	ble.n	a72 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
     a6c:	4809      	ldr	r0, [pc, #36]	; (a94 <log_process_thread_func+0x40>)
     a6e:	f003 f81f 	bl	3ab0 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
     a72:	4c08      	ldr	r4, [pc, #32]	; (a94 <log_process_thread_func+0x40>)
     a74:	2000      	movs	r0, #0
     a76:	f7ff fecd 	bl	814 <z_impl_log_process>
		if (log_process(false) == false) {
     a7a:	2800      	cmp	r0, #0
     a7c:	d1fa      	bne.n	a74 <log_process_thread_func+0x20>
     a7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     a82:	4620      	mov	r0, r4
     a84:	f003 f83a 	bl	3afc <z_impl_k_sem_take>
     a88:	e7f4      	b.n	a74 <log_process_thread_func+0x20>
     a8a:	bf00      	nop
     a8c:	20000128 	.word	0x20000128
     a90:	20000060 	.word	0x20000060
     a94:	20001870 	.word	0x20001870

00000a98 <z_impl_log_panic>:
{
     a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
     a9a:	4f0e      	ldr	r7, [pc, #56]	; (ad4 <z_impl_log_panic+0x3c>)
     a9c:	783d      	ldrb	r5, [r7, #0]
     a9e:	b975      	cbnz	r5, abe <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
     aa0:	4c0d      	ldr	r4, [pc, #52]	; (ad8 <z_impl_log_panic+0x40>)
     aa2:	4e0e      	ldr	r6, [pc, #56]	; (adc <z_impl_log_panic+0x44>)
	log_init();
     aa4:	f7ff fe48 	bl	738 <log_init>
     aa8:	1b36      	subs	r6, r6, r4
     aaa:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
     aac:	42b5      	cmp	r5, r6
     aae:	db07      	blt.n	ac0 <z_impl_log_panic+0x28>
     ab0:	2000      	movs	r0, #0
     ab2:	f7ff feaf 	bl	814 <z_impl_log_process>
		while (log_process(false) == true) {
     ab6:	2800      	cmp	r0, #0
     ab8:	d1fa      	bne.n	ab0 <z_impl_log_panic+0x18>
	panic_mode = true;
     aba:	2301      	movs	r3, #1
     abc:	703b      	strb	r3, [r7, #0]
}
     abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
     ac0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
     ac2:	795b      	ldrb	r3, [r3, #5]
     ac4:	b11b      	cbz	r3, ace <z_impl_log_panic+0x36>
	backend->api->panic(backend);
     ac6:	6823      	ldr	r3, [r4, #0]
     ac8:	4620      	mov	r0, r4
     aca:	691b      	ldr	r3, [r3, #16]
     acc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
     ace:	3501      	adds	r5, #1
     ad0:	3410      	adds	r4, #16
     ad2:	e7eb      	b.n	aac <z_impl_log_panic+0x14>
     ad4:	200002c5 	.word	0x200002c5
     ad8:	00005530 	.word	0x00005530
     adc:	00005540 	.word	0x00005540

00000ae0 <log_free>:
{
     ae0:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
     ae2:	3804      	subs	r0, #4
     ae4:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
     ae6:	f3bf 8f5b 	dmb	ish
     aea:	e850 3f00 	ldrex	r3, [r0]
     aee:	1e5a      	subs	r2, r3, #1
     af0:	e840 2100 	strex	r1, r2, [r0]
     af4:	2900      	cmp	r1, #0
     af6:	d1f8      	bne.n	aea <log_free+0xa>
     af8:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
     afc:	2b01      	cmp	r3, #1
     afe:	d103      	bne.n	b08 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
     b00:	a901      	add	r1, sp, #4
     b02:	4803      	ldr	r0, [pc, #12]	; (b10 <log_free+0x30>)
     b04:	f002 fd38 	bl	3578 <k_mem_slab_free>
}
     b08:	b003      	add	sp, #12
     b0a:	f85d fb04 	ldr.w	pc, [sp], #4
     b0e:	bf00      	nop
     b10:	200000a0 	.word	0x200000a0

00000b14 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
     b14:	2320      	movs	r3, #32
     b16:	461a      	mov	r2, r3
     b18:	4901      	ldr	r1, [pc, #4]	; (b20 <log_msg_pool_init+0xc>)
     b1a:	4802      	ldr	r0, [pc, #8]	; (b24 <log_msg_pool_init+0x10>)
     b1c:	f004 ba66 	b.w	4fec <k_mem_slab_init>
     b20:	200013b0 	.word	0x200013b0
     b24:	2000012c 	.word	0x2000012c

00000b28 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
     b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
     b2a:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
     b2c:	4d09      	ldr	r5, [pc, #36]	; (b54 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
     b2e:	9301      	str	r3, [sp, #4]
     b30:	2001      	movs	r0, #1
     b32:	f7ff fe6f 	bl	814 <z_impl_log_process>
     b36:	4604      	mov	r4, r0
			log_dropped();
     b38:	f7ff fdce 	bl	6d8 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
     b3c:	2200      	movs	r2, #0
     b3e:	a901      	add	r1, sp, #4
     b40:	4628      	mov	r0, r5
     b42:	f002 fced 	bl	3520 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
     b46:	b108      	cbz	r0, b4c <log_msg_no_space_handle+0x24>
     b48:	2c00      	cmp	r4, #0
     b4a:	d1f1      	bne.n	b30 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
     b4c:	9801      	ldr	r0, [sp, #4]
     b4e:	b003      	add	sp, #12
     b50:	bd30      	pop	{r4, r5, pc}
     b52:	bf00      	nop
     b54:	2000012c 	.word	0x2000012c

00000b58 <log_msg_chunk_alloc>:
{
     b58:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
     b5a:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
     b5c:	a901      	add	r1, sp, #4
     b5e:	4806      	ldr	r0, [pc, #24]	; (b78 <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
     b60:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
     b62:	f002 fcdd 	bl	3520 <k_mem_slab_alloc>
	if (err != 0) {
     b66:	b110      	cbz	r0, b6e <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
     b68:	f7ff ffde 	bl	b28 <log_msg_no_space_handle>
     b6c:	9001      	str	r0, [sp, #4]
}
     b6e:	9801      	ldr	r0, [sp, #4]
     b70:	b003      	add	sp, #12
     b72:	f85d fb04 	ldr.w	pc, [sp], #4
     b76:	bf00      	nop
     b78:	2000012c 	.word	0x2000012c

00000b7c <msg_free>:
{
     b7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     b7e:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
     b80:	7a45      	ldrb	r5, [r0, #9]
{
     b82:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
     b84:	f014 0401 	ands.w	r4, r4, #1
	u32_t nargs = msg->hdr.params.std.nargs;
     b88:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
     b8c:	d00e      	beq.n	bac <msg_free+0x30>
	if (msg->hdr.params.generic.ext == 1) {
     b8e:	9b01      	ldr	r3, [sp, #4]
     b90:	7a1a      	ldrb	r2, [r3, #8]
     b92:	0792      	lsls	r2, r2, #30
     b94:	d504      	bpl.n	ba0 <msg_free+0x24>
		cont_free(msg->payload.ext.next);
     b96:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
     b98:	4c10      	ldr	r4, [pc, #64]	; (bdc <msg_free+0x60>)
     b9a:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
     b9c:	9b03      	ldr	r3, [sp, #12]
     b9e:	b9b3      	cbnz	r3, bce <msg_free+0x52>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
     ba0:	a901      	add	r1, sp, #4
     ba2:	480e      	ldr	r0, [pc, #56]	; (bdc <msg_free+0x60>)
     ba4:	f002 fce8 	bl	3578 <k_mem_slab_free>
}
     ba8:	b004      	add	sp, #16
     baa:	bd70      	pop	{r4, r5, r6, pc}
	if (log_msg_is_std(msg) && nargs) {
     bac:	2d00      	cmp	r5, #0
     bae:	d0ee      	beq.n	b8e <msg_free+0x12>
		for (i = 0; i < nargs; i++) {
     bb0:	42a5      	cmp	r5, r4
     bb2:	9801      	ldr	r0, [sp, #4]
     bb4:	d9eb      	bls.n	b8e <msg_free+0x12>
			void *buf = (void *)log_msg_arg_get(msg, i);
     bb6:	4621      	mov	r1, r4
     bb8:	f003 fcd3 	bl	4562 <log_msg_arg_get>
     bbc:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
     bbe:	f7ff fe1b 	bl	7f8 <log_is_strdup>
     bc2:	b110      	cbz	r0, bca <msg_free+0x4e>
				log_free(buf);
     bc4:	4630      	mov	r0, r6
     bc6:	f7ff ff8b 	bl	ae0 <log_free>
		for (i = 0; i < nargs; i++) {
     bca:	3401      	adds	r4, #1
     bcc:	e7f0      	b.n	bb0 <msg_free+0x34>
		next = cont->next;
     bce:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
     bd0:	a903      	add	r1, sp, #12
     bd2:	4620      	mov	r0, r4
     bd4:	f002 fcd0 	bl	3578 <k_mem_slab_free>
		cont = next;
     bd8:	9503      	str	r5, [sp, #12]
     bda:	e7df      	b.n	b9c <msg_free+0x20>
     bdc:	2000012c 	.word	0x2000012c

00000be0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
     be0:	b40e      	push	{r1, r2, r3}
     be2:	b503      	push	{r0, r1, lr}
     be4:	ab03      	add	r3, sp, #12
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
     be6:	4601      	mov	r1, r0
{
     be8:	f853 2b04 	ldr.w	r2, [r3], #4
	z_vprintk(out_func, (void *)log_output, fmt, args);
     bec:	4804      	ldr	r0, [pc, #16]	; (c00 <print_formatted+0x20>)
	va_start(args, fmt);
     bee:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
     bf0:	f003 fa5e 	bl	40b0 <z_vprintk>
#endif
	va_end(args);

	return length;
}
     bf4:	2000      	movs	r0, #0
     bf6:	b002      	add	sp, #8
     bf8:	f85d eb04 	ldr.w	lr, [sp], #4
     bfc:	b003      	add	sp, #12
     bfe:	4770      	bx	lr
     c00:	000048c3 	.word	0x000048c3

00000c04 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
     c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c08:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
     c0a:	f011 0402 	ands.w	r4, r1, #2
{
     c0e:	4606      	mov	r6, r0
     c10:	4690      	mov	r8, r2
     c12:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
     c16:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
     c1a:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
     c1e:	d007      	beq.n	c30 <prefix_print+0x2c>
	if (!format) {
     c20:	f011 0f44 	tst.w	r1, #68	; 0x44
     c24:	d137      	bne.n	c96 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
     c26:	461a      	mov	r2, r3
     c28:	4932      	ldr	r1, [pc, #200]	; (cf4 <prefix_print+0xf0>)
     c2a:	f7ff ffd9 	bl	be0 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
     c2e:	4604      	mov	r4, r0
	if (color) {
     c30:	f1b9 0f00 	cmp.w	r9, #0
     c34:	d00a      	beq.n	c4c <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
     c36:	4b30      	ldr	r3, [pc, #192]	; (cf8 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
     c38:	4930      	ldr	r1, [pc, #192]	; (cfc <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
     c3a:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
     c3e:	4b30      	ldr	r3, [pc, #192]	; (d00 <prefix_print+0xfc>)
     c40:	4630      	mov	r0, r6
     c42:	2a00      	cmp	r2, #0
     c44:	bf08      	it	eq
     c46:	461a      	moveq	r2, r3
     c48:	f7ff ffca 	bl	be0 <print_formatted>
	if (level_on) {
     c4c:	b13d      	cbz	r5, c5e <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
     c4e:	4b2d      	ldr	r3, [pc, #180]	; (d04 <prefix_print+0x100>)
     c50:	492d      	ldr	r1, [pc, #180]	; (d08 <prefix_print+0x104>)
     c52:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
     c56:	4630      	mov	r0, r6
     c58:	f7ff ffc2 	bl	be0 <print_formatted>
     c5c:	4605      	mov	r5, r0
	total += print_formatted(log_output,
     c5e:	f1b8 0f00 	cmp.w	r8, #0
     c62:	d044      	beq.n	cee <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
     c64:	2301      	movs	r3, #1
     c66:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
     c6a:	4b28      	ldr	r3, [pc, #160]	; (d0c <prefix_print+0x108>)
     c6c:	f017 0f10 	tst.w	r7, #16
     c70:	4f27      	ldr	r7, [pc, #156]	; (d10 <prefix_print+0x10c>)
     c72:	bf18      	it	ne
     c74:	461f      	movne	r7, r3
     c76:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
     c7a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
     c7e:	f7ff fd3b 	bl	6f8 <log_source_name_get>
     c82:	4639      	mov	r1, r7
     c84:	4602      	mov	r2, r0
     c86:	4630      	mov	r0, r6
     c88:	f7ff ffaa 	bl	be0 <print_formatted>
     c8c:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
     c8e:	4420      	add	r0, r4
     c90:	b005      	add	sp, #20
     c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
     c96:	4a1f      	ldr	r2, [pc, #124]	; (d14 <prefix_print+0x110>)
     c98:	6811      	ldr	r1, [r2, #0]
     c9a:	b331      	cbz	r1, cea <prefix_print+0xe6>
		timestamp /= timestamp_div;
     c9c:	4a1e      	ldr	r2, [pc, #120]	; (d18 <prefix_print+0x114>)
     c9e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
     ca2:	6814      	ldr	r4, [r2, #0]
     ca4:	fbb3 f3f4 	udiv	r3, r3, r4
		ms = (remainder * 1000U) / freq;
     ca8:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		seconds = timestamp / freq;
     cac:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
     cb0:	fbb4 f2fe 	udiv	r2, r4, lr
     cb4:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
     cb8:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
     cbc:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
     cc0:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
     cc4:	fbb4 fbf1 	udiv	fp, r4, r1
     cc8:	fb01 441b 	mls	r4, r1, fp, r4
		mins = seconds / 60U;
     ccc:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
     cd0:	fb0c f404 	mul.w	r4, ip, r4
     cd4:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
     cd8:	e9cd b101 	strd	fp, r1, [sp, #4]
     cdc:	fb0a e113 	mls	r1, sl, r3, lr
     ce0:	9100      	str	r1, [sp, #0]
     ce2:	490e      	ldr	r1, [pc, #56]	; (d1c <prefix_print+0x118>)
     ce4:	f7ff ff7c 	bl	be0 <print_formatted>
     ce8:	e7a1      	b.n	c2e <prefix_print+0x2a>
		length = 0;
     cea:	4608      	mov	r0, r1
     cec:	e79f      	b.n	c2e <prefix_print+0x2a>
	total += print_formatted(log_output,
     cee:	4f08      	ldr	r7, [pc, #32]	; (d10 <prefix_print+0x10c>)
     cf0:	e7c1      	b.n	c76 <prefix_print+0x72>
     cf2:	bf00      	nop
     cf4:	00005752 	.word	0x00005752
     cf8:	00005560 	.word	0x00005560
     cfc:	00005d5c 	.word	0x00005d5c
     d00:	00005744 	.word	0x00005744
     d04:	00005574 	.word	0x00005574
     d08:	00005777 	.word	0x00005777
     d0c:	0000574e 	.word	0x0000574e
     d10:	00005749 	.word	0x00005749
     d14:	20000148 	.word	0x20000148
     d18:	2000014c 	.word	0x2000014c
     d1c:	0000575b 	.word	0x0000575b

00000d20 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
     d20:	b538      	push	{r3, r4, r5, lr}
     d22:	460c      	mov	r4, r1
	if (color) {
     d24:	07e1      	lsls	r1, r4, #31
{
     d26:	4605      	mov	r5, r0
	if (color) {
     d28:	d503      	bpl.n	d32 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
     d2a:	4a08      	ldr	r2, [pc, #32]	; (d4c <postfix_print+0x2c>)
     d2c:	4908      	ldr	r1, [pc, #32]	; (d50 <postfix_print+0x30>)
     d2e:	f7ff ff57 	bl	be0 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
     d32:	06e2      	lsls	r2, r4, #27
     d34:	d408      	bmi.n	d48 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
     d36:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
     d38:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
     d3a:	bf4c      	ite	mi
     d3c:	4905      	ldrmi	r1, [pc, #20]	; (d54 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
     d3e:	4906      	ldrpl	r1, [pc, #24]	; (d58 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
     d40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
     d44:	f7ff bf4c 	b.w	be0 <print_formatted>
}
     d48:	bd38      	pop	{r3, r4, r5, pc}
     d4a:	bf00      	nop
     d4c:	00005744 	.word	0x00005744
     d50:	00005d5c 	.word	0x00005d5c
     d54:	00005736 	.word	0x00005736
     d58:	00005735 	.word	0x00005735

00000d5c <hexdump_line_print>:
{
     d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     d60:	4698      	mov	r8, r3
     d62:	9b08      	ldr	r3, [sp, #32]
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
     d64:	06dd      	lsls	r5, r3, #27
{
     d66:	4604      	mov	r4, r0
     d68:	460e      	mov	r6, r1
     d6a:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
     d6c:	d405      	bmi.n	d7a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
     d6e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
     d70:	bf4c      	ite	mi
     d72:	4929      	ldrmi	r1, [pc, #164]	; (e18 <hexdump_line_print+0xbc>)
		print_formatted(ctx, "\r\n");
     d74:	4929      	ldrpl	r1, [pc, #164]	; (e1c <hexdump_line_print+0xc0>)
     d76:	f7ff ff33 	bl	be0 <print_formatted>
		print_formatted(log_output, " ");
     d7a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; e24 <hexdump_line_print+0xc8>
{
     d7e:	2500      	movs	r5, #0
	for (int i = 0; i < prefix_offset; i++) {
     d80:	4545      	cmp	r5, r8
     d82:	db2a      	blt.n	dda <hexdump_line_print+0x7e>
			print_formatted(log_output, "   ");
     d84:	f8df 80a0 	ldr.w	r8, [pc, #160]	; e28 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%02x ", data[i]);
     d88:	f8df 90a0 	ldr.w	r9, [pc, #160]	; e2c <hexdump_line_print+0xd0>
			print_formatted(log_output, " ");
     d8c:	f8df a094 	ldr.w	sl, [pc, #148]	; e24 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
     d90:	2500      	movs	r5, #0
		if (i < length) {
     d92:	42af      	cmp	r7, r5
     d94:	d92e      	bls.n	df4 <hexdump_line_print+0x98>
			print_formatted(log_output, "%02x ", data[i]);
     d96:	5d72      	ldrb	r2, [r6, r5]
     d98:	4649      	mov	r1, r9
     d9a:	4620      	mov	r0, r4
     d9c:	f7ff ff20 	bl	be0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
     da0:	3501      	adds	r5, #1
     da2:	2d10      	cmp	r5, #16
     da4:	d11f      	bne.n	de6 <hexdump_line_print+0x8a>
	print_formatted(log_output, "|");
     da6:	491e      	ldr	r1, [pc, #120]	; (e20 <hexdump_line_print+0xc4>)
			print_formatted(log_output, " ");
     da8:	f8df 8078 	ldr.w	r8, [pc, #120]	; e24 <hexdump_line_print+0xc8>
			print_formatted(log_output, "%c",
     dac:	f8df 9080 	ldr.w	r9, [pc, #128]	; e30 <hexdump_line_print+0xd4>
	print_formatted(log_output, "|");
     db0:	4620      	mov	r0, r4
     db2:	f7ff ff15 	bl	be0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
     db6:	2500      	movs	r5, #0
		if (i < length) {
     db8:	42af      	cmp	r7, r5
     dba:	d927      	bls.n	e0c <hexdump_line_print+0xb0>
			      isprint((int)c) ? c : '.');
     dbc:	5d72      	ldrb	r2, [r6, r5]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
     dbe:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
     dc2:	2b5f      	cmp	r3, #95	; 0x5f
     dc4:	bf28      	it	cs
     dc6:	222e      	movcs	r2, #46	; 0x2e
     dc8:	4649      	mov	r1, r9
     dca:	4620      	mov	r0, r4
     dcc:	f7ff ff08 	bl	be0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
     dd0:	3501      	adds	r5, #1
     dd2:	2d10      	cmp	r5, #16
     dd4:	d113      	bne.n	dfe <hexdump_line_print+0xa2>
}
     dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
     dda:	4649      	mov	r1, r9
     ddc:	4620      	mov	r0, r4
     dde:	f7ff feff 	bl	be0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
     de2:	3501      	adds	r5, #1
     de4:	e7cc      	b.n	d80 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
     de6:	076a      	lsls	r2, r5, #29
     de8:	d1d3      	bne.n	d92 <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
     dea:	4651      	mov	r1, sl
     dec:	4620      	mov	r0, r4
     dee:	f7ff fef7 	bl	be0 <print_formatted>
     df2:	e7ce      	b.n	d92 <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
     df4:	4641      	mov	r1, r8
     df6:	4620      	mov	r0, r4
     df8:	f7ff fef2 	bl	be0 <print_formatted>
     dfc:	e7d0      	b.n	da0 <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
     dfe:	076b      	lsls	r3, r5, #29
     e00:	d1da      	bne.n	db8 <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
     e02:	4641      	mov	r1, r8
     e04:	4620      	mov	r0, r4
     e06:	f7ff feeb 	bl	be0 <print_formatted>
     e0a:	e7d5      	b.n	db8 <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
     e0c:	4641      	mov	r1, r8
     e0e:	4620      	mov	r0, r4
     e10:	f7ff fee6 	bl	be0 <print_formatted>
     e14:	e7dc      	b.n	dd0 <hexdump_line_print+0x74>
     e16:	bf00      	nop
     e18:	00005736 	.word	0x00005736
     e1c:	00005735 	.word	0x00005735
     e20:	00005712 	.word	0x00005712
     e24:	00005710 	.word	0x00005710
     e28:	0000570e 	.word	0x0000570e
     e2c:	00005708 	.word	0x00005708
     e30:	00005714 	.word	0x00005714

00000e34 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
     e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
     e38:	7a8b      	ldrb	r3, [r1, #10]
	u16_t source_id = (u16_t)log_msg_source_id_get(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	int prefix_offset;

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
     e3a:	f013 0407 	ands.w	r4, r3, #7
{
     e3e:	4617      	mov	r7, r2
     e40:	b08a      	sub	sp, #40	; 0x28
     e42:	4605      	mov	r5, r0
     e44:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
     e46:	7a0a      	ldrb	r2, [r1, #8]
			0 : prefix_print(log_output, flags, std_msg, timestamp,
     e48:	d01c      	beq.n	e84 <log_output_msg_process+0x50>
	return msg->hdr.ids.source_id;
     e4a:	8949      	ldrh	r1, [r1, #10]
     e4c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
     e50:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
     e52:	43d2      	mvns	r2, r2
     e54:	9102      	str	r1, [sp, #8]
     e56:	e9cd 4300 	strd	r4, r3, [sp]
     e5a:	f002 0201 	and.w	r2, r2, #1
     e5e:	68f3      	ldr	r3, [r6, #12]
     e60:	4639      	mov	r1, r7
     e62:	f7ff fecf 	bl	c04 <prefix_print>
     e66:	4681      	mov	r9, r0
     e68:	7a33      	ldrb	r3, [r6, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
     e6a:	07da      	lsls	r2, r3, #31
     e6c:	d40c      	bmi.n	e88 <log_output_msg_process+0x54>
		std_print(msg, log_output);
     e6e:	4629      	mov	r1, r5
     e70:	4630      	mov	r0, r6
     e72:	f003 fbbc 	bl	45ee <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
     e76:	b34c      	cbz	r4, ecc <log_output_msg_process+0x98>
		postfix_print(log_output, flags, level);
     e78:	4622      	mov	r2, r4
     e7a:	4639      	mov	r1, r7
     e7c:	4628      	mov	r0, r5
     e7e:	f7ff ff4f 	bl	d20 <postfix_print>
     e82:	e023      	b.n	ecc <log_output_msg_process+0x98>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
     e84:	46a1      	mov	r9, r4
     e86:	e7ef      	b.n	e68 <log_output_msg_process+0x34>
	} else if (raw_string) {
     e88:	bb34      	cbnz	r4, ed8 <log_output_msg_process+0xa4>
	size_t offset = 0;
     e8a:	4627      	mov	r7, r4
		length = log_output->size;
     e8c:	68eb      	ldr	r3, [r5, #12]
     e8e:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
     e90:	aa06      	add	r2, sp, #24
     e92:	463b      	mov	r3, r7
     e94:	68a9      	ldr	r1, [r5, #8]
     e96:	4630      	mov	r0, r6
     e98:	f003 fb95 	bl	45c6 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
     e9c:	9a06      	ldr	r2, [sp, #24]
     e9e:	686b      	ldr	r3, [r5, #4]
     ea0:	601a      	str	r2, [r3, #0]
		if (length != 0) {
     ea2:	b13a      	cbz	r2, eb4 <log_output_msg_process+0x80>
			eol = (log_output->buf[length - 1] == '\n');
     ea4:	68ab      	ldr	r3, [r5, #8]
     ea6:	4413      	add	r3, r2
     ea8:	f813 4c01 	ldrb.w	r4, [r3, #-1]
     eac:	f1a4 030a 	sub.w	r3, r4, #10
     eb0:	425c      	negs	r4, r3
     eb2:	415c      	adcs	r4, r3
		log_output_flush(log_output);
     eb4:	4628      	mov	r0, r5
     eb6:	f003 fcf7 	bl	48a8 <log_output_flush>
		offset += length;
     eba:	9b06      	ldr	r3, [sp, #24]
     ebc:	441f      	add	r7, r3
	} while (length > 0);
     ebe:	2b00      	cmp	r3, #0
     ec0:	d1e4      	bne.n	e8c <log_output_msg_process+0x58>
	if (eol) {
     ec2:	b11c      	cbz	r4, ecc <log_output_msg_process+0x98>
		print_formatted(log_output, "\r");
     ec4:	4914      	ldr	r1, [pc, #80]	; (f18 <log_output_msg_process+0xe4>)
     ec6:	4628      	mov	r0, r5
     ec8:	f7ff fe8a 	bl	be0 <print_formatted>
	}

	log_output_flush(log_output);
     ecc:	4628      	mov	r0, r5
     ece:	f003 fceb 	bl	48a8 <log_output_flush>
}
     ed2:	b00a      	add	sp, #40	; 0x28
     ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
     ed8:	4630      	mov	r0, r6
     eda:	f003 fb72 	bl	45c2 <log_msg_str_get>
     ede:	490f      	ldr	r1, [pc, #60]	; (f1c <log_output_msg_process+0xe8>)
     ee0:	4602      	mov	r2, r0
     ee2:	4628      	mov	r0, r5
     ee4:	f7ff fe7c 	bl	be0 <print_formatted>
	u32_t offset = 0U;
     ee8:	f04f 0800 	mov.w	r8, #0
		length = sizeof(buf);
     eec:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
     ef0:	aa05      	add	r2, sp, #20
     ef2:	4643      	mov	r3, r8
     ef4:	a906      	add	r1, sp, #24
     ef6:	4630      	mov	r0, r6
		length = sizeof(buf);
     ef8:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
     efc:	f003 fb63 	bl	45c6 <log_msg_hexdump_data_get>
		if (length) {
     f00:	9a05      	ldr	r2, [sp, #20]
     f02:	2a00      	cmp	r2, #0
     f04:	d0b8      	beq.n	e78 <log_output_msg_process+0x44>
			hexdump_line_print(log_output, buf, length,
     f06:	464b      	mov	r3, r9
     f08:	9700      	str	r7, [sp, #0]
     f0a:	a906      	add	r1, sp, #24
     f0c:	4628      	mov	r0, r5
     f0e:	f7ff ff25 	bl	d5c <hexdump_line_print>
			offset += length;
     f12:	9b05      	ldr	r3, [sp, #20]
     f14:	4498      	add	r8, r3
     f16:	e7eb      	b.n	ef0 <log_output_msg_process+0xbc>
     f18:	00005717 	.word	0x00005717
     f1c:	00005d5c 	.word	0x00005d5c

00000f20 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
     f20:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
     f22:	e9d0 4300 	ldrd	r4, r3, [r0]
     f26:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
     f28:	4a0f      	ldr	r2, [pc, #60]	; (f68 <log_output_dropped_process+0x48>)
     f2a:	f242 730f 	movw	r3, #9999	; 0x270f
     f2e:	428b      	cmp	r3, r1
     f30:	bf28      	it	cs
     f32:	460b      	movcs	r3, r1
     f34:	4668      	mov	r0, sp
     f36:	2105      	movs	r1, #5
     f38:	f001 fb66 	bl	2608 <snprintf>

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
     f3c:	462b      	mov	r3, r5
	len = snprintf(buf, sizeof(buf), "%d", cnt);
     f3e:	4606      	mov	r6, r0
	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
     f40:	220b      	movs	r2, #11
     f42:	4620      	mov	r0, r4
     f44:	4909      	ldr	r1, [pc, #36]	; (f6c <log_output_dropped_process+0x4c>)
     f46:	f003 fb45 	bl	45d4 <buffer_write>
	buffer_write(outf, buf, len, dev);
     f4a:	462b      	mov	r3, r5
     f4c:	4632      	mov	r2, r6
     f4e:	4669      	mov	r1, sp
     f50:	4620      	mov	r0, r4
     f52:	f003 fb3f 	bl	45d4 <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
     f56:	462b      	mov	r3, r5
     f58:	221b      	movs	r2, #27
     f5a:	4905      	ldr	r1, [pc, #20]	; (f70 <log_output_dropped_process+0x50>)
     f5c:	4620      	mov	r0, r4
     f5e:	f003 fb39 	bl	45d4 <buffer_write>
}
     f62:	b002      	add	sp, #8
     f64:	bd70      	pop	{r4, r5, r6, pc}
     f66:	bf00      	nop
     f68:	00005c60 	.word	0x00005c60
     f6c:	00005738 	.word	0x00005738
     f70:	00005719 	.word	0x00005719

00000f74 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
     f74:	4a08      	ldr	r2, [pc, #32]	; (f98 <log_output_timestamp_freq_set+0x24>)
{
     f76:	b510      	push	{r4, lr}
	timestamp_div = 1U;
     f78:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
     f7a:	4c08      	ldr	r4, [pc, #32]	; (f9c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
     f7c:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
     f7e:	2100      	movs	r1, #0
     f80:	42a0      	cmp	r0, r4
     f82:	d804      	bhi.n	f8e <log_output_timestamp_freq_set+0x1a>
     f84:	b101      	cbz	r1, f88 <log_output_timestamp_freq_set+0x14>
     f86:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
     f88:	4b05      	ldr	r3, [pc, #20]	; (fa0 <log_output_timestamp_freq_set+0x2c>)
     f8a:	6018      	str	r0, [r3, #0]
}
     f8c:	bd10      	pop	{r4, pc}
		frequency /= 2U;
     f8e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
     f90:	005b      	lsls	r3, r3, #1
     f92:	2101      	movs	r1, #1
     f94:	e7f4      	b.n	f80 <log_output_timestamp_freq_set+0xc>
     f96:	bf00      	nop
     f98:	2000014c 	.word	0x2000014c
     f9c:	000f4240 	.word	0x000f4240
     fa0:	20000148 	.word	0x20000148

00000fa4 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
     fa4:	4801      	ldr	r0, [pc, #4]	; (fac <panic+0x8>)
     fa6:	f003 bc7f 	b.w	48a8 <log_output_flush>
     faa:	bf00      	nop
     fac:	000055a0 	.word	0x000055a0

00000fb0 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
     fb0:	4801      	ldr	r0, [pc, #4]	; (fb8 <dropped+0x8>)
     fb2:	f7ff bfb5 	b.w	f20 <log_output_dropped_process>
     fb6:	bf00      	nop
     fb8:	000055a0 	.word	0x000055a0

00000fbc <log_backend_uart_init>:
{
	log_backend_std_put(&log_output, 0, msg);
}

static void log_backend_uart_init(void)
{
     fbc:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) z_arch_syscall_invoke1(*(u32_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     fbe:	4803      	ldr	r0, [pc, #12]	; (fcc <log_backend_uart_init+0x10>)
     fc0:	f002 f922 	bl	3208 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
     fc4:	4b02      	ldr	r3, [pc, #8]	; (fd0 <log_backend_uart_init+0x14>)
     fc6:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
     fc8:	bd08      	pop	{r3, pc}
     fca:	bf00      	nop
     fcc:	0000579d 	.word	0x0000579d
     fd0:	20000158 	.word	0x20000158

00000fd4 <put>:
{
     fd4:	b510      	push	{r4, lr}
	log_msg_get(msg);
     fd6:	4608      	mov	r0, r1
     fd8:	460c      	mov	r4, r1
     fda:	f003 fab2 	bl	4542 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
     fde:	4621      	mov	r1, r4
     fe0:	4804      	ldr	r0, [pc, #16]	; (ff4 <put+0x20>)
     fe2:	220f      	movs	r2, #15
     fe4:	f7ff ff26 	bl	e34 <log_output_msg_process>
	log_msg_put(msg);
     fe8:	4620      	mov	r0, r4
}
     fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     fee:	f003 bad5 	b.w	459c <log_msg_put>
     ff2:	bf00      	nop
     ff4:	000055a0 	.word	0x000055a0

00000ff8 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
     ff8:	280a      	cmp	r0, #10
{
     ffa:	b538      	push	{r3, r4, r5, lr}
     ffc:	4604      	mov	r4, r0
     ffe:	4d07      	ldr	r5, [pc, #28]	; (101c <console_out+0x24>)
	if ('\n' == c) {
    1000:	d104      	bne.n	100c <console_out+0x14>
    1002:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    1004:	6843      	ldr	r3, [r0, #4]
    1006:	210d      	movs	r1, #13
    1008:	685b      	ldr	r3, [r3, #4]
    100a:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    100c:	6828      	ldr	r0, [r5, #0]
    100e:	6843      	ldr	r3, [r0, #4]
    1010:	b2e1      	uxtb	r1, r4
    1012:	685b      	ldr	r3, [r3, #4]
    1014:	4798      	blx	r3

	return c;
}
    1016:	4620      	mov	r0, r4
    1018:	bd38      	pop	{r3, r4, r5, pc}
    101a:	bf00      	nop
    101c:	20000164 	.word	0x20000164

00001020 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    1020:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    1022:	4c04      	ldr	r4, [pc, #16]	; (1034 <uart_console_hook_install+0x14>)
    1024:	4620      	mov	r0, r4
    1026:	f001 fae9 	bl	25fc <__stdout_hook_install>
	__printk_hook_install(console_out);
    102a:	4620      	mov	r0, r4
}
    102c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    1030:	f7ff bab0 	b.w	594 <__printk_hook_install>
    1034:	00000ff9 	.word	0x00000ff9

00001038 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1038:	b508      	push	{r3, lr}
    103a:	4804      	ldr	r0, [pc, #16]	; (104c <uart_console_init+0x14>)
    103c:	f002 f8e4 	bl	3208 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1040:	4b03      	ldr	r3, [pc, #12]	; (1050 <uart_console_init+0x18>)
    1042:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1044:	f7ff ffec 	bl	1020 <uart_console_hook_install>

	return 0;
}
    1048:	2000      	movs	r0, #0
    104a:	bd08      	pop	{r3, pc}
    104c:	0000579d 	.word	0x0000579d
    1050:	20000164 	.word	0x20000164

00001054 <nrf_power_clock_isr>:
#endif
}

__STATIC_INLINE bool nrf_clock_event_check(nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
    1054:	4b15      	ldr	r3, [pc, #84]	; (10ac <nrf_power_clock_isr+0x58>)
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    1056:	b507      	push	{r0, r1, r2, lr}
    1058:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
    105a:	b182      	cbz	r2, 107e <nrf_power_clock_isr+0x2a>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
    105c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1060:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
    1064:	07d1      	lsls	r1, r2, #31
    1066:	d50a      	bpl.n	107e <nrf_power_clock_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
    1068:	2200      	movs	r2, #0
    106a:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + (uint32_t)event));
    106c:	681b      	ldr	r3, [r3, #0]
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
    106e:	4810      	ldr	r0, [pc, #64]	; (10b0 <nrf_power_clock_isr+0x5c>)
    1070:	9300      	str	r3, [sp, #0]
    (void)dummy;
    1072:	9b00      	ldr	r3, [sp, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    1074:	6883      	ldr	r3, [r0, #8]
    1076:	7a5b      	ldrb	r3, [r3, #9]
    1078:	b90b      	cbnz	r3, 107e <nrf_power_clock_isr+0x2a>
			clkstarted_handle(hfclk_dev);
    107a:	f003 fceb 	bl	4a54 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
    107e:	4b0d      	ldr	r3, [pc, #52]	; (10b4 <nrf_power_clock_isr+0x60>)
    1080:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
    1082:	b182      	cbz	r2, 10a6 <nrf_power_clock_isr+0x52>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
    1084:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1088:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
    108c:	0792      	lsls	r2, r2, #30
    108e:	d50a      	bpl.n	10a6 <nrf_power_clock_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
    1090:	2200      	movs	r2, #0
    1092:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + (uint32_t)event));
    1094:	681b      	ldr	r3, [r3, #0]
    1096:	9301      	str	r3, [sp, #4]
    (void)dummy;
    1098:	9b01      	ldr	r3, [sp, #4]

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
    109a:	4807      	ldr	r0, [pc, #28]	; (10b8 <nrf_power_clock_isr+0x64>)
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    109c:	b003      	add	sp, #12
    109e:	f85d eb04 	ldr.w	lr, [sp], #4
		clkstarted_handle(lfclk_dev);
    10a2:	f003 bcd7 	b.w	4a54 <clkstarted_handle>
}
    10a6:	b003      	add	sp, #12
    10a8:	f85d fb04 	ldr.w	pc, [sp], #4
    10ac:	40000100 	.word	0x40000100
    10b0:	20001810 	.word	0x20001810
    10b4:	40000104 	.word	0x40000104
    10b8:	2000181c 	.word	0x2000181c

000010bc <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    10bc:	4b0d      	ldr	r3, [pc, #52]	; (10f4 <rtc1_nrf_isr+0x38>)
    10be:	2200      	movs	r2, #0
    10c0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    10c4:	f04f 0220 	mov.w	r2, #32
    10c8:	f3ef 8111 	mrs	r1, BASEPRI
    10cc:	f382 8811 	msr	BASEPRI, r2
    10d0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    10d4:	4a08      	ldr	r2, [pc, #32]	; (10f8 <rtc1_nrf_isr+0x3c>)
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
    10d6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    10da:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    10dc:	1ac0      	subs	r0, r0, r3
    10de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    10e2:	4403      	add	r3, r0
    10e4:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    10e6:	f381 8811 	msr	BASEPRI, r1
    10ea:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    10ee:	f002 be6b 	b.w	3dc8 <z_clock_announce>
    10f2:	bf00      	nop
    10f4:	40011000 	.word	0x40011000
    10f8:	20000180 	.word	0x20000180

000010fc <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    10fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    10fe:	481c      	ldr	r0, [pc, #112]	; (1170 <z_clock_driver_init+0x74>)
    1100:	f002 f882 	bl	3208 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
    1104:	b380      	cbz	r0, 1168 <z_clock_driver_init+0x6c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    1106:	6843      	ldr	r3, [r0, #4]
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    1108:	4d1a      	ldr	r5, [pc, #104]	; (1174 <z_clock_driver_init+0x78>)
    110a:	681b      	ldr	r3, [r3, #0]
    110c:	2100      	movs	r1, #0
    110e:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
    1110:	2601      	movs	r6, #1
    p_reg->PRESCALER = val;
    1112:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    1114:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    1118:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    111c:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    1120:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1124:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1128:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    112c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1130:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1132:	681b      	ldr	r3, [r3, #0]
    1134:	9301      	str	r3, [sp, #4]
    (void)dummy;
    1136:	9b01      	ldr	r3, [sp, #4]
    1138:	4b0f      	ldr	r3, [pc, #60]	; (1178 <z_clock_driver_init+0x7c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    113a:	4631      	mov	r1, r6
    113c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1140:	2011      	movs	r0, #17
    1142:	4622      	mov	r2, r4
    1144:	f000 f910 	bl	1368 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    1148:	2011      	movs	r0, #17
    114a:	f000 f8fd 	bl	1348 <z_arch_irq_enable>
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    114e:	4b0b      	ldr	r3, [pc, #44]	; (117c <z_clock_driver_init+0x80>)
    1150:	601e      	str	r6, [r3, #0]
    1152:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
    1154:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
    1158:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    115a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    115e:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	}

	return 0;
    1162:	4620      	mov	r0, r4
}
    1164:	b002      	add	sp, #8
    1166:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    116c:	e7fa      	b.n	1164 <z_clock_driver_init+0x68>
    116e:	bf00      	nop
    1170:	000057bb 	.word	0x000057bb
    1174:	40011000 	.word	0x40011000
    1178:	e000e100 	.word	0xe000e100
    117c:	40011008 	.word	0x40011008

00001180 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    1180:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    1182:	4e21      	ldr	r6, [pc, #132]	; (1208 <z_clock_set_timeout+0x88>)
    1184:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1188:	bf08      	it	eq
    118a:	4630      	moveq	r0, r6
	__asm__ volatile(
    118c:	f04f 0320 	mov.w	r3, #32
    1190:	f3ef 8411 	mrs	r4, BASEPRI
    1194:	f383 8811 	msr	BASEPRI, r3
    1198:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    119c:	491b      	ldr	r1, [pc, #108]	; (120c <z_clock_set_timeout+0x8c>)
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	bool zli_fixup = IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS);

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
    119e:	4b1c      	ldr	r3, [pc, #112]	; (1210 <z_clock_set_timeout+0x90>)
    11a0:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
    11a4:	681d      	ldr	r5, [r3, #0]
	return (a - b) & COUNTER_MAX;
    11a6:	1b53      	subs	r3, r2, r5
    11a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
	cyc += last_count;
    11ac:	3501      	adds	r5, #1
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    11ae:	3801      	subs	r0, #1
	cyc += last_count;
    11b0:	442b      	add	r3, r5
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
    11b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	cyc += last_count;
    11b6:	42b0      	cmp	r0, r6
    11b8:	bfd4      	ite	le
    11ba:	1818      	addle	r0, r3, r0
    11bc:	1998      	addgt	r0, r3, r6
	return (a - b) & COUNTER_MAX;
    11be:	1a82      	subs	r2, r0, r2
    11c0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    11c4:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    11c8:	2a02      	cmp	r2, #2
    p_reg->CC[ch] = cc_val;
    11ca:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
    11ce:	d904      	bls.n	11da <z_clock_set_timeout+0x5a>
	__asm__ volatile(
    11d0:	f384 8811 	msr	BASEPRI, r4
    11d4:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    11d8:	bd70      	pop	{r4, r5, r6, pc}
     return p_reg->COUNTER;
    11da:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    11de:	4a0d      	ldr	r2, [pc, #52]	; (1214 <z_clock_set_timeout+0x94>)
	return (a - b) & COUNTER_MAX;
    11e0:	1ac3      	subs	r3, r0, r3
    11e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    11e6:	1e5d      	subs	r5, r3, #1
    11e8:	4295      	cmp	r5, r2
    11ea:	d905      	bls.n	11f8 <z_clock_set_timeout+0x78>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11ec:	4b0a      	ldr	r3, [pc, #40]	; (1218 <z_clock_set_timeout+0x98>)
    11ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    11f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    11f6:	e7eb      	b.n	11d0 <z_clock_set_timeout+0x50>
		} else if (dt == 1) {
    11f8:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    11fa:	bf02      	ittt	eq
    11fc:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    11fe:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    1202:	f8c1 0540 	streq.w	r0, [r1, #1344]	; 0x540
    1206:	e7e3      	b.n	11d0 <z_clock_set_timeout+0x50>
    1208:	00fffffe 	.word	0x00fffffe
    120c:	40011000 	.word	0x40011000
    1210:	20000180 	.word	0x20000180
    1214:	007ffffe 	.word	0x007ffffe
    1218:	e000e100 	.word	0xe000e100

0000121c <z_clock_elapsed>:
	__asm__ volatile(
    121c:	f04f 0220 	mov.w	r2, #32
    1220:	f3ef 8311 	mrs	r3, BASEPRI
    1224:	f382 8811 	msr	BASEPRI, r2
    1228:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    122c:	4a06      	ldr	r2, [pc, #24]	; (1248 <z_clock_elapsed+0x2c>)
    122e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    1232:	4a06      	ldr	r2, [pc, #24]	; (124c <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    1234:	6812      	ldr	r2, [r2, #0]
    1236:	1a80      	subs	r0, r0, r2
    1238:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    123c:	f383 8811 	msr	BASEPRI, r3
    1240:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    1244:	4770      	bx	lr
    1246:	bf00      	nop
    1248:	40011000 	.word	0x40011000
    124c:	20000180 	.word	0x20000180

00001250 <z_timer_cycle_get_32>:
	__asm__ volatile(
    1250:	f04f 0320 	mov.w	r3, #32
    1254:	f3ef 8211 	mrs	r2, BASEPRI
    1258:	f383 8811 	msr	BASEPRI, r3
    125c:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    1260:	4906      	ldr	r1, [pc, #24]	; (127c <z_timer_cycle_get_32+0x2c>)
    1262:	4b07      	ldr	r3, [pc, #28]	; (1280 <z_timer_cycle_get_32+0x30>)
    1264:	6808      	ldr	r0, [r1, #0]
    1266:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    126a:	f382 8811 	msr	BASEPRI, r2
    126e:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    1272:	1a1b      	subs	r3, r3, r0
    1274:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    1278:	4418      	add	r0, r3
    127a:	4770      	bx	lr
    127c:	20000180 	.word	0x20000180
    1280:	40011000 	.word	0x40011000

00001284 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    1284:	4804      	ldr	r0, [pc, #16]	; (1298 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    1286:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    1288:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    128a:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    128c:	d003      	beq.n	1296 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    128e:	4903      	ldr	r1, [pc, #12]	; (129c <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    1290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    1294:	600a      	str	r2, [r1, #0]

00001296 <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    1296:	4770      	bx	lr
    ldr r0, =_kernel
    1298:	20000284 	.word	0x20000284
    ldr r1, =_SCS_ICSR
    129c:	e000ed04 	.word	0xe000ed04

000012a0 <z_arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    12a0:	4a09      	ldr	r2, [pc, #36]	; (12c8 <z_arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    12a2:	490a      	ldr	r1, [pc, #40]	; (12cc <z_arch_swap+0x2c>)
	_current->arch.basepri = key;
    12a4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    12a6:	6809      	ldr	r1, [r1, #0]
    12a8:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    12aa:	4909      	ldr	r1, [pc, #36]	; (12d0 <z_arch_swap+0x30>)
	_current->arch.basepri = key;
    12ac:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    12ae:	684b      	ldr	r3, [r1, #4]
    12b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    12b4:	604b      	str	r3, [r1, #4]
    12b6:	2300      	movs	r3, #0
    12b8:	f383 8811 	msr	BASEPRI, r3
    12bc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    12c0:	6893      	ldr	r3, [r2, #8]
}
    12c2:	6e98      	ldr	r0, [r3, #104]	; 0x68
    12c4:	4770      	bx	lr
    12c6:	bf00      	nop
    12c8:	20000284 	.word	0x20000284
    12cc:	00005654 	.word	0x00005654
    12d0:	e000ed00 	.word	0xe000ed00

000012d4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    12d4:	4912      	ldr	r1, [pc, #72]	; (1320 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    12d6:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    12d8:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    12dc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    12de:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    12e2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    12e6:	2020      	movs	r0, #32
    msr BASEPRI, r0
    12e8:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    12ec:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    12f0:	4f0c      	ldr	r7, [pc, #48]	; (1324 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    12f2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    12f6:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    12f8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    12fa:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    12fc:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    12fe:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1300:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1302:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1306:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1308:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    130a:	f003 fbcf 	bl	4aac <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    130e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1312:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    1316:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    131a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    131e:	4770      	bx	lr
    ldr r1, =_kernel
    1320:	20000284 	.word	0x20000284
    ldr v4, =_SCS_ICSR
    1324:	e000ed04 	.word	0xe000ed04

00001328 <z_arm_svc>:
 */
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
    tst lr, #0x4    /* did we come from thread mode ? */
    1328:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    132c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    132e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1332:	f3ef 8009 	mrsne	r0, PSP


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1336:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
    ldrb r1, [r1, #-2]
    1338:	f811 1c02 	ldrb.w	r1, [r1, #-2]
    tst r2, #0x1
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    133c:	2902      	cmp	r1, #2
    beq _oops
    133e:	d0ff      	beq.n	1340 <_oops>

00001340 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1340:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1342:	f003 fba8 	bl	4a96 <z_do_kernel_oops>
    pop {r0, pc}
    1346:	bd01      	pop	{r0, pc}

00001348 <z_arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1348:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    134a:	2b00      	cmp	r3, #0
    134c:	db08      	blt.n	1360 <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    134e:	2201      	movs	r2, #1
    1350:	f000 001f 	and.w	r0, r0, #31
    1354:	fa02 f000 	lsl.w	r0, r2, r0
    1358:	095b      	lsrs	r3, r3, #5
    135a:	4a02      	ldr	r2, [pc, #8]	; (1364 <z_arch_irq_enable+0x1c>)
    135c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1360:	4770      	bx	lr
    1362:	bf00      	nop
    1364:	e000e100 	.word	0xe000e100

00001368 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1368:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    136a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    136c:	bfa8      	it	ge
    136e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    1372:	f101 0101 	add.w	r1, r1, #1
    1376:	ea4f 1141 	mov.w	r1, r1, lsl #5
    137a:	bfae      	itee	ge
    137c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1380:	f000 000f 	andlt.w	r0, r0, #15
    1384:	4b03      	ldrlt	r3, [pc, #12]	; (1394 <z_arm_irq_priority_set+0x2c>)
    1386:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1388:	bfac      	ite	ge
    138a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    138e:	5419      	strblt	r1, [r3, r0]
}
    1390:	4770      	bx	lr
    1392:	bf00      	nop
    1394:	e000ed14 	.word	0xe000ed14

00001398 <z_arch_new_thread>:
 */
void z_arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		       size_t stackSize, k_thread_entry_t pEntry,
		       void *parameter1, void *parameter2, void *parameter3,
		       int priority, unsigned int options)
{
    1398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    139c:	188c      	adds	r4, r1, r2
{
    139e:	4688      	mov	r8, r1
    13a0:	4617      	mov	r7, r2
    13a2:	461e      	mov	r6, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    13a4:	2204      	movs	r2, #4
    13a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    13a8:	9909      	ldr	r1, [sp, #36]	; 0x24
    13aa:	4605      	mov	r5, r0
    13ac:	f003 ff3b 	bl	5226 <z_init_thread_base>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    13b0:	f1a4 0320 	sub.w	r3, r4, #32
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    13b4:	490c      	ldr	r1, [pc, #48]	; (13e8 <z_arch_new_thread+0x50>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    13b6:	f023 0307 	bic.w	r3, r3, #7

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    13ba:	2200      	movs	r2, #0
	pInitCtx->basic.pc &= 0xfffffffe;
    13bc:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
    13c0:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    13c4:	e9c5 8716 	strd	r8, r7, [r5, #88]	; 0x58
    13c8:	6199      	str	r1, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    13ca:	9906      	ldr	r1, [sp, #24]
    13cc:	6059      	str	r1, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    13ce:	9907      	ldr	r1, [sp, #28]
    13d0:	6099      	str	r1, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    13d2:	9908      	ldr	r1, [sp, #32]
    13d4:	60d9      	str	r1, [r3, #12]
	pInitCtx->basic.xpsr =
    13d6:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
	pInitCtx->basic.a1 = (u32_t)pEntry;
    13da:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.xpsr =
    13dc:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    13de:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    13e0:	666a      	str	r2, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    13e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    13e6:	bf00      	nop
    13e8:	0000407d 	.word	0x0000407d

000013ec <z_arch_switch_to_main_thread>:

void z_arch_switch_to_main_thread(struct k_thread *main_thread,
				  k_thread_stack_t *main_stack,
				  size_t main_stack_size,
				  k_thread_entry_t _main)
{
    13ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13ee:	4605      	mov	r5, r0
    13f0:	460c      	mov	r4, r1
    13f2:	4617      	mov	r7, r2
    13f4:	461e      	mov	r6, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    13f6:	f000 fb65 	bl	1ac4 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    13fa:	4b0b      	ldr	r3, [pc, #44]	; (1428 <z_arch_switch_to_main_thread+0x3c>)
	start_of_main_stack =
    13fc:	443c      	add	r4, r7
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    13fe:	4628      	mov	r0, r5
	_current = main_thread;
    1400:	609d      	str	r5, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    1402:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1406:	f003 fb51 	bl	4aac <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    140a:	4630      	mov	r0, r6
    140c:	f384 8809 	msr	PSP, r4
    1410:	b663      	cpsie	if
    1412:	f04f 0100 	mov.w	r1, #0
    1416:	f381 8811 	msr	BASEPRI, r1
    141a:	f3bf 8f6f 	isb	sy
    141e:	2100      	movs	r1, #0
    1420:	2200      	movs	r2, #0
    1422:	2300      	movs	r3, #0
    1424:	f002 fe2a 	bl	407c <z_thread_entry>
	"bl z_thread_entry\n\t"	/* z_thread_entry(_main, 0, 0, 0); */
	:
	: "r" (_main), "r" (start_of_main_stack)
	);

	CODE_UNREACHABLE;
    1428:	20000284 	.word	0x20000284

0000142c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    142c:	4901      	ldr	r1, [pc, #4]	; (1434 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    142e:	2210      	movs	r2, #16
	str r2, [r1]
    1430:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    1432:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1434:	e000ed10 	.word	0xe000ed10

00001438 <z_arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1438:	4040      	eors	r0, r0
	msr BASEPRI, r0
    143a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    143e:	bf30      	wfi

	bx lr
    1440:	4770      	bx	lr
    1442:	bf00      	nop

00001444 <z_arm_bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1444:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1446:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE) && \
	!defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    144a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 1468 <z_arm_bus_fault+0x24>
	ldr ip, [ip]
    144e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1452:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    1456:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    1458:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    145c:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
    1460:	b501      	push	{r0, lr}
	bl z_arm_fault
    1462:	f000 fa47 	bl	18f4 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    1466:	bd01      	pop	{r0, pc}
	ldr ip, =_SCS_ICSR
    1468:	e000ed04 	.word	0xe000ed04

0000146c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    146c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    146e:	4606      	mov	r6, r0

	if (esf != NULL) {
    1470:	460c      	mov	r4, r1
    1472:	2900      	cmp	r1, #0
    1474:	d038      	beq.n	14e8 <z_arm_fatal_error+0x7c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    1476:	2201      	movs	r2, #1
    1478:	f04f 0300 	mov.w	r3, #0
    147c:	f362 0307 	bfi	r3, r2, #0, #8
    1480:	4d1d      	ldr	r5, [pc, #116]	; (14f8 <z_arm_fatal_error+0x8c>)
    1482:	4a1e      	ldr	r2, [pc, #120]	; (14fc <z_arm_fatal_error+0x90>)
    1484:	481e      	ldr	r0, [pc, #120]	; (1500 <z_arm_fatal_error+0x94>)
    1486:	1aad      	subs	r5, r5, r2
    1488:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    148c:	f365 138f 	bfi	r3, r5, #6, #10
    1490:	f8ad 3000 	strh.w	r3, [sp]
    1494:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    1498:	6809      	ldr	r1, [r1, #0]
    149a:	f002 ffe5 	bl	4468 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    149e:	2201      	movs	r2, #1
    14a0:	f04f 0300 	mov.w	r3, #0
    14a4:	f362 0307 	bfi	r3, r2, #0, #8
    14a8:	f365 138f 	bfi	r3, r5, #6, #10
    14ac:	f8ad 3000 	strh.w	r3, [sp]
    14b0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    14b4:	68e1      	ldr	r1, [r4, #12]
    14b6:	4813      	ldr	r0, [pc, #76]	; (1504 <z_arm_fatal_error+0x98>)
    14b8:	f002 ffd6 	bl	4468 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    14bc:	2301      	movs	r3, #1
    14be:	f04f 0200 	mov.w	r2, #0
    14c2:	f363 0207 	bfi	r2, r3, #0, #8
    14c6:	f365 128f 	bfi	r2, r5, #6, #10
    14ca:	69e1      	ldr	r1, [r4, #28]
    14cc:	480e      	ldr	r0, [pc, #56]	; (1508 <z_arm_fatal_error+0x9c>)
    14ce:	f002 ff9f 	bl	4410 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    14d2:	f04f 0200 	mov.w	r2, #0
    14d6:	2301      	movs	r3, #1
    14d8:	f363 0207 	bfi	r2, r3, #0, #8
    14dc:	f365 128f 	bfi	r2, r5, #6, #10
    14e0:	69a1      	ldr	r1, [r4, #24]
    14e2:	480a      	ldr	r0, [pc, #40]	; (150c <z_arm_fatal_error+0xa0>)
    14e4:	f002 ff94 	bl	4410 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    14e8:	4621      	mov	r1, r4
    14ea:	4630      	mov	r0, r6
}
    14ec:	b002      	add	sp, #8
    14ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    14f2:	f001 becb 	b.w	328c <z_fatal_error>
    14f6:	bf00      	nop
    14f8:	00005510 	.word	0x00005510
    14fc:	000054f8 	.word	0x000054f8
    1500:	000057e7 	.word	0x000057e7
    1504:	00005816 	.word	0x00005816
    1508:	00005845 	.word	0x00005845
    150c:	00005854 	.word	0x00005854

00001510 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1510:	bf30      	wfi
    b z_SysNmiOnReset
    1512:	f7ff bffd 	b.w	1510 <z_SysNmiOnReset>
    1516:	bf00      	nop

00001518 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1518:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    151a:	4b08      	ldr	r3, [pc, #32]	; (153c <z_arm_prep_c+0x24>)
    151c:	4a08      	ldr	r2, [pc, #32]	; (1540 <z_arm_prep_c+0x28>)
    151e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1522:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1524:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1528:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    152c:	f001 ff18 	bl	3360 <z_bss_zero>
	z_data_copy();
    1530:	f001 ff20 	bl	3374 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    1534:	f000 fa94 	bl	1a60 <z_arm_int_lib_init>
	z_cstart();
    1538:	f001 ff4e 	bl	33d8 <z_cstart>
    153c:	00000000 	.word	0x00000000
    1540:	e000ed00 	.word	0xe000ed00

00001544 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1544:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1546:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1548:	4a0b      	ldr	r2, [pc, #44]	; (1578 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    154a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    154c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    154e:	bf1e      	ittt	ne
	movne	r1, #0
    1550:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1552:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    1554:	f003 fd48 	blne	4fe8 <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1558:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    155a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    155e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1562:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1566:	4905      	ldr	r1, [pc, #20]	; (157c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1568:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    156a:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    156c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    156e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1572:	4903      	ldr	r1, [pc, #12]	; (1580 <_isr_wrapper+0x3c>)
	bx r1
    1574:	4708      	bx	r1
    1576:	0000      	.short	0x0000
	ldr r2, =_kernel
    1578:	20000284 	.word	0x20000284
	ldr r1, =_sw_isr_table
    157c:	00005330 	.word	0x00005330
	ldr r1, =z_arm_int_exit
    1580:	00001285 	.word	0x00001285

00001584 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    1584:	f002 ff12 	bl	43ac <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1588:	2020      	movs	r0, #32
    msr BASEPRI, r0
    158a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    158e:	4808      	ldr	r0, [pc, #32]	; (15b0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1590:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1594:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1596:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    159a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    159e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    15a0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    15a2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    15a6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    15aa:	f7ff ffb5 	bl	1518 <z_arm_prep_c>
    15ae:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    15b0:	20000b10 	.word	0x20000b10

000015b4 <usage_fault.isra.2>:
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    15b4:	2301      	movs	r3, #1
    15b6:	f04f 0100 	mov.w	r1, #0
static u32_t usage_fault(const z_arch_esf_t *esf)
    15ba:	b510      	push	{r4, lr}
	PR_FAULT_INFO("***** USAGE FAULT *****");
    15bc:	f363 0107 	bfi	r1, r3, #0, #8
    15c0:	4c33      	ldr	r4, [pc, #204]	; (1690 <usage_fault.isra.2+0xdc>)
    15c2:	4b34      	ldr	r3, [pc, #208]	; (1694 <usage_fault.isra.2+0xe0>)
    15c4:	4834      	ldr	r0, [pc, #208]	; (1698 <usage_fault.isra.2+0xe4>)
    15c6:	1ae4      	subs	r4, r4, r3
    15c8:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    15cc:	f364 118f 	bfi	r1, r4, #6, #10
    15d0:	f002 ff11 	bl	43f6 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    15d4:	4b31      	ldr	r3, [pc, #196]	; (169c <usage_fault.isra.2+0xe8>)
    15d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    15d8:	019a      	lsls	r2, r3, #6
    15da:	d509      	bpl.n	15f0 <usage_fault.isra.2+0x3c>
		PR_FAULT_INFO("  Division by zero");
    15dc:	f04f 0100 	mov.w	r1, #0
    15e0:	2301      	movs	r3, #1
    15e2:	f363 0107 	bfi	r1, r3, #0, #8
    15e6:	f364 118f 	bfi	r1, r4, #6, #10
    15ea:	482d      	ldr	r0, [pc, #180]	; (16a0 <usage_fault.isra.2+0xec>)
    15ec:	f002 ff03 	bl	43f6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    15f0:	4b2a      	ldr	r3, [pc, #168]	; (169c <usage_fault.isra.2+0xe8>)
    15f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    15f4:	01db      	lsls	r3, r3, #7
    15f6:	d509      	bpl.n	160c <usage_fault.isra.2+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    15f8:	f04f 0100 	mov.w	r1, #0
    15fc:	2301      	movs	r3, #1
    15fe:	f363 0107 	bfi	r1, r3, #0, #8
    1602:	f364 118f 	bfi	r1, r4, #6, #10
    1606:	4827      	ldr	r0, [pc, #156]	; (16a4 <usage_fault.isra.2+0xf0>)
    1608:	f002 fef5 	bl	43f6 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    160c:	4b23      	ldr	r3, [pc, #140]	; (169c <usage_fault.isra.2+0xe8>)
    160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1610:	0318      	lsls	r0, r3, #12
    1612:	d509      	bpl.n	1628 <usage_fault.isra.2+0x74>
		PR_FAULT_INFO("  No coprocessor instructions");
    1614:	f04f 0100 	mov.w	r1, #0
    1618:	2301      	movs	r3, #1
    161a:	f363 0107 	bfi	r1, r3, #0, #8
    161e:	f364 118f 	bfi	r1, r4, #6, #10
    1622:	4821      	ldr	r0, [pc, #132]	; (16a8 <usage_fault.isra.2+0xf4>)
    1624:	f002 fee7 	bl	43f6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1628:	4b1c      	ldr	r3, [pc, #112]	; (169c <usage_fault.isra.2+0xe8>)
    162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    162c:	0359      	lsls	r1, r3, #13
    162e:	d509      	bpl.n	1644 <usage_fault.isra.2+0x90>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    1630:	f04f 0100 	mov.w	r1, #0
    1634:	2301      	movs	r3, #1
    1636:	f363 0107 	bfi	r1, r3, #0, #8
    163a:	f364 118f 	bfi	r1, r4, #6, #10
    163e:	481b      	ldr	r0, [pc, #108]	; (16ac <usage_fault.isra.2+0xf8>)
    1640:	f002 fed9 	bl	43f6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1644:	4b15      	ldr	r3, [pc, #84]	; (169c <usage_fault.isra.2+0xe8>)
    1646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1648:	039a      	lsls	r2, r3, #14
    164a:	d509      	bpl.n	1660 <usage_fault.isra.2+0xac>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    164c:	f04f 0100 	mov.w	r1, #0
    1650:	2301      	movs	r3, #1
    1652:	f363 0107 	bfi	r1, r3, #0, #8
    1656:	f364 118f 	bfi	r1, r4, #6, #10
    165a:	4815      	ldr	r0, [pc, #84]	; (16b0 <usage_fault.isra.2+0xfc>)
    165c:	f002 fecb 	bl	43f6 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1660:	4b0e      	ldr	r3, [pc, #56]	; (169c <usage_fault.isra.2+0xe8>)
    1662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1664:	03db      	lsls	r3, r3, #15
    1666:	d509      	bpl.n	167c <usage_fault.isra.2+0xc8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    1668:	f04f 0100 	mov.w	r1, #0
    166c:	2301      	movs	r3, #1
    166e:	f363 0107 	bfi	r1, r3, #0, #8
    1672:	f364 118f 	bfi	r1, r4, #6, #10
    1676:	480f      	ldr	r0, [pc, #60]	; (16b4 <usage_fault.isra.2+0x100>)
    1678:	f002 febd 	bl	43f6 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    167c:	4a07      	ldr	r2, [pc, #28]	; (169c <usage_fault.isra.2+0xe8>)
    167e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1680:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1684:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1688:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    168a:	2000      	movs	r0, #0
    168c:	bd10      	pop	{r4, pc}
    168e:	bf00      	nop
    1690:	00005510 	.word	0x00005510
    1694:	000054f8 	.word	0x000054f8
    1698:	000059e2 	.word	0x000059e2
    169c:	e000ed00 	.word	0xe000ed00
    16a0:	000059fa 	.word	0x000059fa
    16a4:	00005a0d 	.word	0x00005a0d
    16a8:	00005a27 	.word	0x00005a27
    16ac:	00005a45 	.word	0x00005a45
    16b0:	00005a6a 	.word	0x00005a6a
    16b4:	00005a84 	.word	0x00005a84

000016b8 <mem_manage_fault.isra.4>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    16b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
    16ba:	2301      	movs	r3, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    16bc:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    16be:	f04f 0100 	mov.w	r1, #0
    16c2:	f363 0107 	bfi	r1, r3, #0, #8
    16c6:	4c36      	ldr	r4, [pc, #216]	; (17a0 <mem_manage_fault.isra.4+0xe8>)
    16c8:	4b36      	ldr	r3, [pc, #216]	; (17a4 <mem_manage_fault.isra.4+0xec>)
    16ca:	1ae4      	subs	r4, r4, r3
    16cc:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    16d0:	f364 118f 	bfi	r1, r4, #6, #10
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    16d4:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    16d6:	4834      	ldr	r0, [pc, #208]	; (17a8 <mem_manage_fault.isra.4+0xf0>)
    16d8:	f002 fe8d 	bl	43f6 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    16dc:	4b33      	ldr	r3, [pc, #204]	; (17ac <mem_manage_fault.isra.4+0xf4>)
    16de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16e0:	06d9      	lsls	r1, r3, #27
    16e2:	d509      	bpl.n	16f8 <mem_manage_fault.isra.4+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    16e4:	f04f 0100 	mov.w	r1, #0
    16e8:	2301      	movs	r3, #1
    16ea:	f363 0107 	bfi	r1, r3, #0, #8
    16ee:	f364 118f 	bfi	r1, r4, #6, #10
    16f2:	482f      	ldr	r0, [pc, #188]	; (17b0 <mem_manage_fault.isra.4+0xf8>)
    16f4:	f002 fe7f 	bl	43f6 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    16f8:	4b2c      	ldr	r3, [pc, #176]	; (17ac <mem_manage_fault.isra.4+0xf4>)
    16fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16fc:	071a      	lsls	r2, r3, #28
    16fe:	d509      	bpl.n	1714 <mem_manage_fault.isra.4+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    1700:	f04f 0100 	mov.w	r1, #0
    1704:	2301      	movs	r3, #1
    1706:	f363 0107 	bfi	r1, r3, #0, #8
    170a:	f364 118f 	bfi	r1, r4, #6, #10
    170e:	4829      	ldr	r0, [pc, #164]	; (17b4 <mem_manage_fault.isra.4+0xfc>)
    1710:	f002 fe71 	bl	43f6 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1714:	4d25      	ldr	r5, [pc, #148]	; (17ac <mem_manage_fault.isra.4+0xf4>)
    1716:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1718:	079b      	lsls	r3, r3, #30
    171a:	d51c      	bpl.n	1756 <mem_manage_fault.isra.4+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
    171c:	2301      	movs	r3, #1
    171e:	f04f 0100 	mov.w	r1, #0
    1722:	f363 0107 	bfi	r1, r3, #0, #8
    1726:	f364 118f 	bfi	r1, r4, #6, #10
    172a:	4823      	ldr	r0, [pc, #140]	; (17b8 <mem_manage_fault.isra.4+0x100>)
    172c:	f002 fe63 	bl	43f6 <log_0>
		mmfar = SCB->MMFAR;
    1730:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1732:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1734:	0618      	lsls	r0, r3, #24
    1736:	d50e      	bpl.n	1756 <mem_manage_fault.isra.4+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    1738:	f04f 0200 	mov.w	r2, #0
    173c:	2301      	movs	r3, #1
    173e:	f363 0207 	bfi	r2, r3, #0, #8
    1742:	f364 128f 	bfi	r2, r4, #6, #10
    1746:	481d      	ldr	r0, [pc, #116]	; (17bc <mem_manage_fault.isra.4+0x104>)
    1748:	f002 fe62 	bl	4410 <log_1>
			if (from_hard_fault) {
    174c:	b11f      	cbz	r7, 1756 <mem_manage_fault.isra.4+0x9e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    174e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1750:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1754:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1756:	4b15      	ldr	r3, [pc, #84]	; (17ac <mem_manage_fault.isra.4+0xf4>)
    1758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    175a:	07da      	lsls	r2, r3, #31
    175c:	d509      	bpl.n	1772 <mem_manage_fault.isra.4+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
    175e:	f04f 0100 	mov.w	r1, #0
    1762:	2301      	movs	r3, #1
    1764:	f363 0107 	bfi	r1, r3, #0, #8
    1768:	f364 118f 	bfi	r1, r4, #6, #10
    176c:	4814      	ldr	r0, [pc, #80]	; (17c0 <mem_manage_fault.isra.4+0x108>)
    176e:	f002 fe42 	bl	43f6 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1772:	4b0e      	ldr	r3, [pc, #56]	; (17ac <mem_manage_fault.isra.4+0xf4>)
    1774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1776:	069b      	lsls	r3, r3, #26
    1778:	d509      	bpl.n	178e <mem_manage_fault.isra.4+0xd6>
		PR_FAULT_INFO(
    177a:	f04f 0100 	mov.w	r1, #0
    177e:	2301      	movs	r3, #1
    1780:	f363 0107 	bfi	r1, r3, #0, #8
    1784:	f364 118f 	bfi	r1, r4, #6, #10
    1788:	480e      	ldr	r0, [pc, #56]	; (17c4 <mem_manage_fault.isra.4+0x10c>)
    178a:	f002 fe34 	bl	43f6 <log_0>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    178e:	4b07      	ldr	r3, [pc, #28]	; (17ac <mem_manage_fault.isra.4+0xf4>)
    1790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1792:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1794:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1796:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    179a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    179c:	7030      	strb	r0, [r6, #0]
}
    179e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17a0:	00005510 	.word	0x00005510
    17a4:	000054f8 	.word	0x000054f8
    17a8:	0000590a 	.word	0x0000590a
    17ac:	e000ed00 	.word	0xe000ed00
    17b0:	00005920 	.word	0x00005920
    17b4:	00005953 	.word	0x00005953
    17b8:	00005966 	.word	0x00005966
    17bc:	0000597e 	.word	0x0000597e
    17c0:	00005994 	.word	0x00005994
    17c4:	000059b3 	.word	0x000059b3

000017c8 <bus_fault.isra.5>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    17c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
    17ca:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    17cc:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    17ce:	f04f 0100 	mov.w	r1, #0
    17d2:	f363 0107 	bfi	r1, r3, #0, #8
    17d6:	4c3c      	ldr	r4, [pc, #240]	; (18c8 <bus_fault.isra.5+0x100>)
    17d8:	4b3c      	ldr	r3, [pc, #240]	; (18cc <bus_fault.isra.5+0x104>)
    17da:	1ae4      	subs	r4, r4, r3
    17dc:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    17e0:	f364 118f 	bfi	r1, r4, #6, #10
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    17e4:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    17e6:	483a      	ldr	r0, [pc, #232]	; (18d0 <bus_fault.isra.5+0x108>)
    17e8:	f002 fe05 	bl	43f6 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    17ec:	4b39      	ldr	r3, [pc, #228]	; (18d4 <bus_fault.isra.5+0x10c>)
    17ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17f0:	04d9      	lsls	r1, r3, #19
    17f2:	d509      	bpl.n	1808 <bus_fault.isra.5+0x40>
		PR_FAULT_INFO("  Stacking error");
    17f4:	f04f 0100 	mov.w	r1, #0
    17f8:	2301      	movs	r3, #1
    17fa:	f363 0107 	bfi	r1, r3, #0, #8
    17fe:	f364 118f 	bfi	r1, r4, #6, #10
    1802:	4835      	ldr	r0, [pc, #212]	; (18d8 <bus_fault.isra.5+0x110>)
    1804:	f002 fdf7 	bl	43f6 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1808:	4b32      	ldr	r3, [pc, #200]	; (18d4 <bus_fault.isra.5+0x10c>)
    180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    180c:	051a      	lsls	r2, r3, #20
    180e:	d509      	bpl.n	1824 <bus_fault.isra.5+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    1810:	f04f 0100 	mov.w	r1, #0
    1814:	2301      	movs	r3, #1
    1816:	f363 0107 	bfi	r1, r3, #0, #8
    181a:	f364 118f 	bfi	r1, r4, #6, #10
    181e:	482f      	ldr	r0, [pc, #188]	; (18dc <bus_fault.isra.5+0x114>)
    1820:	f002 fde9 	bl	43f6 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1824:	4d2b      	ldr	r5, [pc, #172]	; (18d4 <bus_fault.isra.5+0x10c>)
    1826:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1828:	059b      	lsls	r3, r3, #22
    182a:	d51c      	bpl.n	1866 <bus_fault.isra.5+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
    182c:	2301      	movs	r3, #1
    182e:	f04f 0100 	mov.w	r1, #0
    1832:	f363 0107 	bfi	r1, r3, #0, #8
    1836:	f364 118f 	bfi	r1, r4, #6, #10
    183a:	4829      	ldr	r0, [pc, #164]	; (18e0 <bus_fault.isra.5+0x118>)
    183c:	f002 fddb 	bl	43f6 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    1840:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1842:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1844:	0418      	lsls	r0, r3, #16
    1846:	d50e      	bpl.n	1866 <bus_fault.isra.5+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    1848:	f04f 0200 	mov.w	r2, #0
    184c:	2301      	movs	r3, #1
    184e:	f363 0207 	bfi	r2, r3, #0, #8
    1852:	f364 128f 	bfi	r2, r4, #6, #10
    1856:	4823      	ldr	r0, [pc, #140]	; (18e4 <bus_fault.isra.5+0x11c>)
    1858:	f002 fdda 	bl	4410 <log_1>
			if (from_hard_fault) {
    185c:	b11f      	cbz	r7, 1866 <bus_fault.isra.5+0x9e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    185e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1860:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1864:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1866:	4b1b      	ldr	r3, [pc, #108]	; (18d4 <bus_fault.isra.5+0x10c>)
    1868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    186a:	0559      	lsls	r1, r3, #21
    186c:	d509      	bpl.n	1882 <bus_fault.isra.5+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
    186e:	f04f 0100 	mov.w	r1, #0
    1872:	2301      	movs	r3, #1
    1874:	f363 0107 	bfi	r1, r3, #0, #8
    1878:	f364 118f 	bfi	r1, r4, #6, #10
    187c:	481a      	ldr	r0, [pc, #104]	; (18e8 <bus_fault.isra.5+0x120>)
    187e:	f002 fdba 	bl	43f6 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1882:	4b14      	ldr	r3, [pc, #80]	; (18d4 <bus_fault.isra.5+0x10c>)
    1884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1886:	05d2      	lsls	r2, r2, #23
    1888:	d511      	bpl.n	18ae <bus_fault.isra.5+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
    188a:	f04f 0100 	mov.w	r1, #0
    188e:	2301      	movs	r3, #1
    1890:	f363 0107 	bfi	r1, r3, #0, #8
    1894:	4815      	ldr	r0, [pc, #84]	; (18ec <bus_fault.isra.5+0x124>)
    1896:	f364 118f 	bfi	r1, r4, #6, #10
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    189a:	f002 fdac 	bl	43f6 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    189e:	4a0d      	ldr	r2, [pc, #52]	; (18d4 <bus_fault.isra.5+0x10c>)
    18a0:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    18a2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    18a4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    18a8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    18aa:	7030      	strb	r0, [r6, #0]
}
    18ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    18ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18b0:	049b      	lsls	r3, r3, #18
    18b2:	d5f4      	bpl.n	189e <bus_fault.isra.5+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    18b4:	f04f 0100 	mov.w	r1, #0
    18b8:	2301      	movs	r3, #1
    18ba:	f363 0107 	bfi	r1, r3, #0, #8
    18be:	f364 118f 	bfi	r1, r4, #6, #10
    18c2:	480b      	ldr	r0, [pc, #44]	; (18f0 <bus_fault.isra.5+0x128>)
    18c4:	e7e9      	b.n	189a <bus_fault.isra.5+0xd2>
    18c6:	bf00      	nop
    18c8:	00005510 	.word	0x00005510
    18cc:	000054f8 	.word	0x000054f8
    18d0:	00005882 	.word	0x00005882
    18d4:	e000ed00 	.word	0xe000ed00
    18d8:	00005898 	.word	0x00005898
    18dc:	00005953 	.word	0x00005953
    18e0:	000058a9 	.word	0x000058a9
    18e4:	000058c2 	.word	0x000058c2
    18e8:	000058d7 	.word	0x000058d7
    18ec:	000058f2 	.word	0x000058f2
    18f0:	000059b3 	.word	0x000059b3

000018f4 <z_arm_fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void z_arm_fault(z_arch_esf_t *esf, u32_t exc_return)
{
    18f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    18f6:	4b49      	ldr	r3, [pc, #292]	; (1a1c <z_arm_fault+0x128>)
{
    18f8:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    18fa:	6858      	ldr	r0, [r3, #4]
	*recoverable = false;
    18fc:	2300      	movs	r3, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    18fe:	f3c0 0208 	ubfx	r2, r0, #0, #9
	*recoverable = false;
    1902:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    1906:	1ed3      	subs	r3, r2, #3
    1908:	2b09      	cmp	r3, #9
    190a:	d86d      	bhi.n	19e8 <z_arm_fault+0xf4>
    190c:	e8df f003 	tbb	[pc, r3]
    1910:	4b5b5705 	.word	0x4b5b5705
    1914:	6c6c6c6c 	.word	0x6c6c6c6c
    1918:	5f6c      	.short	0x5f6c
	PR_FAULT_INFO("***** HARD FAULT *****");
    191a:	2301      	movs	r3, #1
    191c:	f04f 0100 	mov.w	r1, #0
    1920:	f363 0107 	bfi	r1, r3, #0, #8
    1924:	4d3e      	ldr	r5, [pc, #248]	; (1a20 <z_arm_fault+0x12c>)
    1926:	4b3f      	ldr	r3, [pc, #252]	; (1a24 <z_arm_fault+0x130>)
    1928:	483f      	ldr	r0, [pc, #252]	; (1a28 <z_arm_fault+0x134>)
    192a:	1aed      	subs	r5, r5, r3
    192c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    1930:	f365 118f 	bfi	r1, r5, #6, #10
    1934:	f002 fd5f 	bl	43f6 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1938:	4b38      	ldr	r3, [pc, #224]	; (1a1c <z_arm_fault+0x128>)
    193a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    193c:	2700      	movs	r7, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    193e:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    1942:	f88d 7007 	strb.w	r7, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1946:	d00b      	beq.n	1960 <z_arm_fault+0x6c>
		PR_EXC("  Bus fault on vector table read");
    1948:	f04f 0100 	mov.w	r1, #0
    194c:	2301      	movs	r3, #1
    194e:	f363 0107 	bfi	r1, r3, #0, #8
    1952:	4836      	ldr	r0, [pc, #216]	; (1a2c <z_arm_fault+0x138>)
    1954:	f365 118f 	bfi	r1, r5, #6, #10
	PR_FAULT_INFO(
    1958:	f002 fd4d 	bl	43f6 <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    195c:	2400      	movs	r4, #0
    195e:	e025      	b.n	19ac <z_arm_fault+0xb8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1962:	005b      	lsls	r3, r3, #1
    1964:	d522      	bpl.n	19ac <z_arm_fault+0xb8>
		PR_EXC("  Fault escalation (see below)");
    1966:	2301      	movs	r3, #1
    1968:	f04f 0100 	mov.w	r1, #0
    196c:	f363 0107 	bfi	r1, r3, #0, #8
    1970:	f365 118f 	bfi	r1, r5, #6, #10
    1974:	482e      	ldr	r0, [pc, #184]	; (1a30 <z_arm_fault+0x13c>)
    1976:	f002 fd3e 	bl	43f6 <log_0>
		if (SCB_MMFSR != 0) {
    197a:	4b2e      	ldr	r3, [pc, #184]	; (1a34 <z_arm_fault+0x140>)
    197c:	781b      	ldrb	r3, [r3, #0]
    197e:	b12b      	cbz	r3, 198c <z_arm_fault+0x98>
			reason = mem_manage_fault(esf, 1, recoverable);
    1980:	f10d 0107 	add.w	r1, sp, #7
    1984:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1986:	f7ff fe97 	bl	16b8 <mem_manage_fault.isra.4>
    198a:	e00e      	b.n	19aa <z_arm_fault+0xb6>
		} else if (SCB_BFSR != 0) {
    198c:	4b2a      	ldr	r3, [pc, #168]	; (1a38 <z_arm_fault+0x144>)
    198e:	781b      	ldrb	r3, [r3, #0]
    1990:	b12b      	cbz	r3, 199e <z_arm_fault+0xaa>
			reason = bus_fault(esf, 1, recoverable);
    1992:	f10d 0107 	add.w	r1, sp, #7
    1996:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1998:	f7ff ff16 	bl	17c8 <bus_fault.isra.5>
    199c:	e005      	b.n	19aa <z_arm_fault+0xb6>
		} else if (SCB_UFSR != 0) {
    199e:	4b27      	ldr	r3, [pc, #156]	; (1a3c <z_arm_fault+0x148>)
    19a0:	881b      	ldrh	r3, [r3, #0]
    19a2:	b29b      	uxth	r3, r3
    19a4:	b113      	cbz	r3, 19ac <z_arm_fault+0xb8>
			reason = usage_fault(esf);
    19a6:	f7ff fe05 	bl	15b4 <usage_fault.isra.2>
    19aa:	4604      	mov	r4, r0
#else
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    19ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    19b0:	b91b      	cbnz	r3, 19ba <z_arm_fault+0xc6>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_arm_fatal_error(reason, esf);
    19b2:	4631      	mov	r1, r6
    19b4:	4620      	mov	r0, r4
    19b6:	f7ff fd59 	bl	146c <z_arm_fatal_error>
}
    19ba:	b003      	add	sp, #12
    19bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    19be:	f10d 0107 	add.w	r1, sp, #7
    19c2:	2000      	movs	r0, #0
    19c4:	e7df      	b.n	1986 <z_arm_fault+0x92>
		reason = bus_fault(esf, 0, recoverable);
    19c6:	f10d 0107 	add.w	r1, sp, #7
    19ca:	2000      	movs	r0, #0
    19cc:	e7e4      	b.n	1998 <z_arm_fault+0xa4>
	PR_FAULT_INFO(
    19ce:	2301      	movs	r3, #1
    19d0:	f04f 0100 	mov.w	r1, #0
    19d4:	f363 0107 	bfi	r1, r3, #0, #8
    19d8:	4a12      	ldr	r2, [pc, #72]	; (1a24 <z_arm_fault+0x130>)
    19da:	4b11      	ldr	r3, [pc, #68]	; (1a20 <z_arm_fault+0x12c>)
    19dc:	4818      	ldr	r0, [pc, #96]	; (1a40 <z_arm_fault+0x14c>)
    19de:	1a9b      	subs	r3, r3, r2
    19e0:	08db      	lsrs	r3, r3, #3
    19e2:	f363 118f 	bfi	r1, r3, #6, #10
    19e6:	e7b7      	b.n	1958 <z_arm_fault+0x64>
	PR_FAULT_INFO("***** %s %d) *****",
    19e8:	2101      	movs	r1, #1
    19ea:	f04f 0300 	mov.w	r3, #0
    19ee:	f361 0307 	bfi	r3, r1, #0, #8
    19f2:	4c0c      	ldr	r4, [pc, #48]	; (1a24 <z_arm_fault+0x130>)
    19f4:	490a      	ldr	r1, [pc, #40]	; (1a20 <z_arm_fault+0x12c>)
    19f6:	f410 7ff8 	tst.w	r0, #496	; 0x1f0
    19fa:	eba1 0104 	sub.w	r1, r1, r4
    19fe:	4811      	ldr	r0, [pc, #68]	; (1a44 <z_arm_fault+0x150>)
    1a00:	ea4f 01d1 	mov.w	r1, r1, lsr #3
    1a04:	f361 138f 	bfi	r3, r1, #6, #10
    1a08:	f1a2 0210 	sub.w	r2, r2, #16
    1a0c:	490e      	ldr	r1, [pc, #56]	; (1a48 <z_arm_fault+0x154>)
    1a0e:	bf18      	it	ne
    1a10:	4601      	movne	r1, r0
    1a12:	480e      	ldr	r0, [pc, #56]	; (1a4c <z_arm_fault+0x158>)
    1a14:	f002 fd10 	bl	4438 <log_2>
    1a18:	e7a0      	b.n	195c <z_arm_fault+0x68>
    1a1a:	bf00      	nop
    1a1c:	e000ed00 	.word	0xe000ed00
    1a20:	00005510 	.word	0x00005510
    1a24:	000054f8 	.word	0x000054f8
    1a28:	00005aaf 	.word	0x00005aaf
    1a2c:	00005ac6 	.word	0x00005ac6
    1a30:	00005ae7 	.word	0x00005ae7
    1a34:	e000ed28 	.word	0xe000ed28
    1a38:	e000ed29 	.word	0xe000ed29
    1a3c:	e000ed2a 	.word	0xe000ed2a
    1a40:	00005b06 	.word	0x00005b06
    1a44:	00005b51 	.word	0x00005b51
    1a48:	00005b3c 	.word	0x00005b3c
    1a4c:	00005b6a 	.word	0x00005b6a

00001a50 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1a50:	4a02      	ldr	r2, [pc, #8]	; (1a5c <z_arm_fault_init+0xc>)
    1a52:	6953      	ldr	r3, [r2, #20]
    1a54:	f043 0310 	orr.w	r3, r3, #16
    1a58:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1a5a:	4770      	bx	lr
    1a5c:	e000ed00 	.word	0xe000ed00

00001a60 <z_arm_int_lib_init>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a60:	4804      	ldr	r0, [pc, #16]	; (1a74 <z_arm_int_lib_init+0x14>)
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    1a62:	2300      	movs	r3, #0
    1a64:	2120      	movs	r1, #32
    1a66:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1a68:	3301      	adds	r3, #1
    1a6a:	2b27      	cmp	r3, #39	; 0x27
    1a6c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1a70:	d1f9      	bne.n	1a66 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1a72:	4770      	bx	lr
    1a74:	e000e100 	.word	0xe000e100

00001a78 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    1a78:	b538      	push	{r3, r4, r5, lr}
    1a7a:	4605      	mov	r5, r0
	__asm__ volatile(
    1a7c:	f04f 0320 	mov.w	r3, #32
    1a80:	f3ef 8411 	mrs	r4, BASEPRI
    1a84:	f383 8811 	msr	BASEPRI, r3
    1a88:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    1a8c:	f003 fbac 	bl	51e8 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    1a90:	4b0a      	ldr	r3, [pc, #40]	; (1abc <z_impl_k_thread_abort+0x44>)
    1a92:	689b      	ldr	r3, [r3, #8]
    1a94:	42ab      	cmp	r3, r5
    1a96:	d10b      	bne.n	1ab0 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1a98:	4b09      	ldr	r3, [pc, #36]	; (1ac0 <z_impl_k_thread_abort+0x48>)
    1a9a:	685a      	ldr	r2, [r3, #4]
    1a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1aa0:	b912      	cbnz	r2, 1aa8 <z_impl_k_thread_abort+0x30>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = z_arch_swap(key);
    1aa2:	4620      	mov	r0, r4
    1aa4:	f7ff fbfc 	bl	12a0 <z_arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1aa8:	685a      	ldr	r2, [r3, #4]
    1aaa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1aae:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    1ab0:	4620      	mov	r0, r4
}
    1ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    1ab6:	f003 baec 	b.w	5092 <z_reschedule_irqlock>
    1aba:	bf00      	nop
    1abc:	20000284 	.word	0x20000284
    1ac0:	e000ed00 	.word	0xe000ed00

00001ac4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1ac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    1ac6:	4b08      	ldr	r3, [pc, #32]	; (1ae8 <z_arm_configure_static_mpu_regions+0x24>)
    1ac8:	9301      	str	r3, [sp, #4]
    1aca:	4b08      	ldr	r3, [pc, #32]	; (1aec <z_arm_configure_static_mpu_regions+0x28>)
    1acc:	9302      	str	r3, [sp, #8]
    1ace:	4b08      	ldr	r3, [pc, #32]	; (1af0 <z_arm_configure_static_mpu_regions+0x2c>)
    1ad0:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    1ad2:	ab01      	add	r3, sp, #4
    1ad4:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1ad6:	4a07      	ldr	r2, [pc, #28]	; (1af4 <z_arm_configure_static_mpu_regions+0x30>)
    1ad8:	4b07      	ldr	r3, [pc, #28]	; (1af8 <z_arm_configure_static_mpu_regions+0x34>)
    1ada:	2101      	movs	r1, #1
    1adc:	4668      	mov	r0, sp
    1ade:	f000 f8b5 	bl	1c4c <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1ae2:	b005      	add	sp, #20
    1ae4:	f85d fb04 	ldr.w	pc, [sp], #4
    1ae8:	20000000 	.word	0x20000000
    1aec:	00000000 	.word	0x00000000
    1af0:	060b0000 	.word	0x060b0000
    1af4:	20000000 	.word	0x20000000
    1af8:	20010000 	.word	0x20010000

00001afc <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
    1afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MPU->RNR = index;
    1afe:	4f2e      	ldr	r7, [pc, #184]	; (1bb8 <mpu_configure_regions+0xbc>)
{
    1b00:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1b02:	2100      	movs	r1, #0
    1b04:	42b1      	cmp	r1, r6
    1b06:	da22      	bge.n	1b4e <mpu_configure_regions+0x52>
		if (regions[i]->size == 0U) {
    1b08:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
    1b0c:	f8dc 4004 	ldr.w	r4, [ip, #4]
    1b10:	2c00      	cmp	r4, #0
    1b12:	d04f      	beq.n	1bb4 <mpu_configure_regions+0xb8>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    1b14:	b1eb      	cbz	r3, 1b52 <mpu_configure_regions+0x56>
		((part->size & (part->size - 1)) == 0U)
    1b16:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
    1b1a:	ea14 0f0e 	tst.w	r4, lr
    1b1e:	d106      	bne.n	1b2e <mpu_configure_regions+0x32>
		&&
    1b20:	2c1f      	cmp	r4, #31
    1b22:	d904      	bls.n	1b2e <mpu_configure_regions+0x32>
		((part->start & (part->size - 1)) == 0U);
    1b24:	f8dc 5000 	ldr.w	r5, [ip]
		&&
    1b28:	ea1e 0f05 	tst.w	lr, r5
    1b2c:	d011      	beq.n	1b52 <mpu_configure_regions+0x56>
				(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    1b2e:	2301      	movs	r3, #1
    1b30:	f04f 0200 	mov.w	r2, #0
    1b34:	f363 0207 	bfi	r2, r3, #0, #8
    1b38:	4820      	ldr	r0, [pc, #128]	; (1bbc <mpu_configure_regions+0xc0>)
    1b3a:	4b21      	ldr	r3, [pc, #132]	; (1bc0 <mpu_configure_regions+0xc4>)
    1b3c:	1a1b      	subs	r3, r3, r0
    1b3e:	08db      	lsrs	r3, r3, #3
    1b40:	4820      	ldr	r0, [pc, #128]	; (1bc4 <mpu_configure_regions+0xc8>)
    1b42:	f363 128f 	bfi	r2, r3, #6, #10
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    1b46:	f002 fc63 	bl	4410 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, regions[i]);
    1b4a:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    1b4e:	4610      	mov	r0, r2
    1b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (size <= 32U) {
    1b52:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    1b54:	b2d5      	uxtb	r5, r2
	struct arm_mpu_region region_conf;

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
    1b56:	f8dc 2000 	ldr.w	r2, [ip]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    1b5a:	f8dc c008 	ldr.w	ip, [ip, #8]
	if (size <= 32U) {
    1b5e:	d91a      	bls.n	1b96 <mpu_configure_regions+0x9a>
	if (size > (1UL << 31)) {
    1b60:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1b64:	d819      	bhi.n	1b9a <mpu_configure_regions+0x9e>
	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1b66:	3c01      	subs	r4, #1
    1b68:	fab4 f484 	clz	r4, r4
    1b6c:	f1c4 041f 	rsb	r4, r4, #31
    1b70:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    1b72:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1b74:	ea4c 0404 	orr.w	r4, ip, r4
    1b78:	d911      	bls.n	1b9e <mpu_configure_regions+0xa2>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    1b7a:	2301      	movs	r3, #1
    1b7c:	f04f 0200 	mov.w	r2, #0
    1b80:	f363 0207 	bfi	r2, r3, #0, #8
    1b84:	490d      	ldr	r1, [pc, #52]	; (1bbc <mpu_configure_regions+0xc0>)
    1b86:	4b0e      	ldr	r3, [pc, #56]	; (1bc0 <mpu_configure_regions+0xc4>)
    1b88:	480f      	ldr	r0, [pc, #60]	; (1bc8 <mpu_configure_regions+0xcc>)
    1b8a:	1a5b      	subs	r3, r3, r1
    1b8c:	08db      	lsrs	r3, r3, #3
    1b8e:	f363 128f 	bfi	r2, r3, #6, #10
    1b92:	4629      	mov	r1, r5
    1b94:	e7d7      	b.n	1b46 <mpu_configure_regions+0x4a>
		return REGION_32B;
    1b96:	2408      	movs	r4, #8
    1b98:	e7eb      	b.n	1b72 <mpu_configure_regions+0x76>
		return REGION_4G;
    1b9a:	243e      	movs	r4, #62	; 0x3e
    1b9c:	e7e9      	b.n	1b72 <mpu_configure_regions+0x76>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1b9e:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    1ba2:	432a      	orrs	r2, r5
    1ba4:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1ba8:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    1bac:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1bae:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1bb0:	613c      	str	r4, [r7, #16]
		reg_index++;
    1bb2:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    1bb4:	3101      	adds	r1, #1
    1bb6:	e7a5      	b.n	1b04 <mpu_configure_regions+0x8>
    1bb8:	e000ed90 	.word	0xe000ed90
    1bbc:	000054f8 	.word	0x000054f8
    1bc0:	00005508 	.word	0x00005508
    1bc4:	00005b81 	.word	0x00005b81
    1bc8:	00005ba4 	.word	0x00005ba4

00001bcc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1bcc:	4b03      	ldr	r3, [pc, #12]	; (1bdc <arm_core_mpu_enable+0x10>)
    1bce:	2205      	movs	r2, #5
    1bd0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1bd2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1bd6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1bda:	4770      	bx	lr
    1bdc:	e000ed90 	.word	0xe000ed90

00001be0 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1be0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1be4:	4b01      	ldr	r3, [pc, #4]	; (1bec <arm_core_mpu_disable+0xc>)
    1be6:	2200      	movs	r2, #0
    1be8:	605a      	str	r2, [r3, #4]
}
    1bea:	4770      	bx	lr
    1bec:	e000ed90 	.word	0xe000ed90

00001bf0 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1bf0:	4913      	ldr	r1, [pc, #76]	; (1c40 <arm_mpu_init+0x50>)
    1bf2:	6808      	ldr	r0, [r1, #0]
    1bf4:	2808      	cmp	r0, #8
{
    1bf6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    1bf8:	d81e      	bhi.n	1c38 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1bfa:	f7ff fff1 	bl	1be0 <arm_core_mpu_disable>
	MPU->RNR = index;
    1bfe:	4c11      	ldr	r4, [pc, #68]	; (1c44 <arm_mpu_init+0x54>)
    1c00:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1c02:	2200      	movs	r2, #0
    1c04:	4290      	cmp	r0, r2
    1c06:	f101 010c 	add.w	r1, r1, #12
    1c0a:	d105      	bne.n	1c18 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1c0c:	4b0e      	ldr	r3, [pc, #56]	; (1c48 <arm_mpu_init+0x58>)
    1c0e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    1c10:	f7ff ffdc 	bl	1bcc <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    1c14:	2000      	movs	r0, #0
}
    1c16:	bd10      	pop	{r4, pc}
    1c18:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1c1a:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    1c1e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1c22:	4313      	orrs	r3, r2
    1c24:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1c28:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1c2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1c2e:	f043 0301 	orr.w	r3, r3, #1
    1c32:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1c34:	3201      	adds	r2, #1
    1c36:	e7e5      	b.n	1c04 <arm_mpu_init+0x14>
		return -1;
    1c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1c3c:	e7eb      	b.n	1c16 <arm_mpu_init+0x26>
    1c3e:	bf00      	nop
    1c40:	00005540 	.word	0x00005540
    1c44:	e000ed90 	.word	0xe000ed90
    1c48:	200002c7 	.word	0x200002c7

00001c4c <arm_core_mpu_configure_static_mpu_regions>:
{
    1c4c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1c4e:	4c03      	ldr	r4, [pc, #12]	; (1c5c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1c50:	2301      	movs	r3, #1
    1c52:	7822      	ldrb	r2, [r4, #0]
    1c54:	f7ff ff52 	bl	1afc <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1c58:	7020      	strb	r0, [r4, #0]
}
    1c5a:	bd10      	pop	{r4, pc}
    1c5c:	200002c7 	.word	0x200002c7

00001c60 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    1c60:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1c62:	4a08      	ldr	r2, [pc, #32]	; (1c84 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    1c64:	2300      	movs	r3, #0
    1c66:	7812      	ldrb	r2, [r2, #0]
    1c68:	f7ff ff48 	bl	1afc <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1c6c:	f110 0f16 	cmn.w	r0, #22
    1c70:	d003      	beq.n	1c7a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    1c72:	4b05      	ldr	r3, [pc, #20]	; (1c88 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    1c74:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1c76:	2807      	cmp	r0, #7
    1c78:	dd00      	ble.n	1c7c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    1c7a:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    1c7c:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    1c7e:	611a      	str	r2, [r3, #16]
    1c80:	3001      	adds	r0, #1
    1c82:	e7f8      	b.n	1c76 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    1c84:	200002c7 	.word	0x200002c7
    1c88:	e000ed90 	.word	0xe000ed90

00001c8c <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    1c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c90:	b09f      	sub	sp, #124	; 0x7c
    1c92:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    1c94:	2300      	movs	r3, #0
{
    1c96:	9001      	str	r0, [sp, #4]
    1c98:	9104      	str	r1, [sp, #16]
	count = 0;
    1c9a:	9300      	str	r3, [sp, #0]

	while ((c = *format++)) {
    1c9c:	4613      	mov	r3, r2
    1c9e:	f813 0b01 	ldrb.w	r0, [r3], #1
    1ca2:	9305      	str	r3, [sp, #20]
    1ca4:	b158      	cbz	r0, 1cbe <z_prf+0x32>
		if (c != '%') {
    1ca6:	2825      	cmp	r0, #37	; 0x25
    1ca8:	f000 8085 	beq.w	1db6 <z_prf+0x12a>
			PUTC(c);
    1cac:	9904      	ldr	r1, [sp, #16]
    1cae:	9b01      	ldr	r3, [sp, #4]
    1cb0:	4798      	blx	r3
    1cb2:	3001      	adds	r0, #1
    1cb4:	f040 840d 	bne.w	24d2 <z_prf+0x846>
    1cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1cbc:	9300      	str	r3, [sp, #0]
		}
	}
	return count;

#undef PUTC
}
    1cbe:	9800      	ldr	r0, [sp, #0]
    1cc0:	b01f      	add	sp, #124	; 0x7c
    1cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    1cc6:	2c23      	cmp	r4, #35	; 0x23
    1cc8:	d06c      	beq.n	1da4 <z_prf+0x118>
    1cca:	d861      	bhi.n	1d90 <z_prf+0x104>
    1ccc:	2c00      	cmp	r4, #0
    1cce:	d0f6      	beq.n	1cbe <z_prf+0x32>
					fspace = true;
    1cd0:	2c20      	cmp	r4, #32
    1cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1cd4:	bf08      	it	eq
    1cd6:	2301      	moveq	r3, #1
    1cd8:	930a      	str	r3, [sp, #40]	; 0x28
					fminus = true;
    1cda:	f8cd 8014 	str.w	r8, [sp, #20]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    1cde:	f8dd 8014 	ldr.w	r8, [sp, #20]
    1ce2:	48b9      	ldr	r0, [pc, #740]	; (1fc8 <z_prf+0x33c>)
    1ce4:	f818 4b01 	ldrb.w	r4, [r8], #1
    1ce8:	4621      	mov	r1, r4
    1cea:	f002 fefa 	bl	4ae2 <strchr>
    1cee:	2800      	cmp	r0, #0
    1cf0:	d1e9      	bne.n	1cc6 <z_prf+0x3a>
			if (c == '*') {
    1cf2:	2c2a      	cmp	r4, #42	; 0x2a
    1cf4:	d166      	bne.n	1dc4 <z_prf+0x138>
				width = va_arg(vargs, int);
    1cf6:	f856 3b04 	ldr.w	r3, [r6], #4
    1cfa:	9307      	str	r3, [sp, #28]
				if (width < 0) {
    1cfc:	2b00      	cmp	r3, #0
					width = -width;
    1cfe:	bfbf      	itttt	lt
    1d00:	425b      	neglt	r3, r3
    1d02:	9307      	strlt	r3, [sp, #28]
					fminus = true;
    1d04:	2301      	movlt	r3, #1
    1d06:	930b      	strlt	r3, [sp, #44]	; 0x2c
				c = *format++;
    1d08:	9b05      	ldr	r3, [sp, #20]
    1d0a:	f898 4000 	ldrb.w	r4, [r8]
    1d0e:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
    1d12:	2c2e      	cmp	r4, #46	; 0x2e
    1d14:	d17c      	bne.n	1e10 <z_prf+0x184>
				if (c == '*') {
    1d16:	f898 3000 	ldrb.w	r3, [r8]
    1d1a:	2b2a      	cmp	r3, #42	; 0x2a
    1d1c:	d175      	bne.n	1e0a <z_prf+0x17e>
					precision = va_arg(vargs, int);
    1d1e:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
    1d22:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
    1d26:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
    1d2a:	48a8      	ldr	r0, [pc, #672]	; (1fcc <z_prf+0x340>)
    1d2c:	4621      	mov	r1, r4
    1d2e:	4627      	mov	r7, r4
    1d30:	f002 fed7 	bl	4ae2 <strchr>
    1d34:	2800      	cmp	r0, #0
    1d36:	d06e      	beq.n	1e16 <z_prf+0x18a>
				c = *format++;
    1d38:	4643      	mov	r3, r8
				} else if (i == 'h' && c == 'h') {
    1d3a:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    1d3c:	f813 4b01 	ldrb.w	r4, [r3], #1
    1d40:	9305      	str	r3, [sp, #20]
				} else if (i == 'h' && c == 'h') {
    1d42:	d107      	bne.n	1d54 <z_prf+0xc8>
    1d44:	2c68      	cmp	r4, #104	; 0x68
    1d46:	d105      	bne.n	1d54 <z_prf+0xc8>
					c = *format++;
    1d48:	f108 0302 	add.w	r3, r8, #2
    1d4c:	f898 4001 	ldrb.w	r4, [r8, #1]
    1d50:	9305      	str	r3, [sp, #20]
					i = 'H';
    1d52:	2748      	movs	r7, #72	; 0x48
			switch (c) {
    1d54:	2c67      	cmp	r4, #103	; 0x67
    1d56:	d87c      	bhi.n	1e52 <z_prf+0x1c6>
    1d58:	2c65      	cmp	r4, #101	; 0x65
    1d5a:	f080 8139 	bcs.w	1fd0 <z_prf+0x344>
    1d5e:	2c47      	cmp	r4, #71	; 0x47
    1d60:	d85d      	bhi.n	1e1e <z_prf+0x192>
    1d62:	2c45      	cmp	r4, #69	; 0x45
    1d64:	f080 8134 	bcs.w	1fd0 <z_prf+0x344>
    1d68:	2c00      	cmp	r4, #0
    1d6a:	d0a8      	beq.n	1cbe <z_prf+0x32>
    1d6c:	2c25      	cmp	r4, #37	; 0x25
    1d6e:	f000 83ac 	beq.w	24ca <z_prf+0x83e>
				PUTC('%');
    1d72:	9904      	ldr	r1, [sp, #16]
    1d74:	9b01      	ldr	r3, [sp, #4]
    1d76:	2025      	movs	r0, #37	; 0x25
    1d78:	4798      	blx	r3
    1d7a:	3001      	adds	r0, #1
    1d7c:	d09c      	beq.n	1cb8 <z_prf+0x2c>
				PUTC(c);
    1d7e:	9904      	ldr	r1, [sp, #16]
    1d80:	9b01      	ldr	r3, [sp, #4]
    1d82:	4620      	mov	r0, r4
    1d84:	4798      	blx	r3
    1d86:	3001      	adds	r0, #1
    1d88:	d096      	beq.n	1cb8 <z_prf+0x2c>
				count += 2;
    1d8a:	9b00      	ldr	r3, [sp, #0]
    1d8c:	3302      	adds	r3, #2
    1d8e:	e3a2      	b.n	24d6 <z_prf+0x84a>
				switch (c) {
    1d90:	2c2d      	cmp	r4, #45	; 0x2d
    1d92:	d00a      	beq.n	1daa <z_prf+0x11e>
    1d94:	2c30      	cmp	r4, #48	; 0x30
    1d96:	d00b      	beq.n	1db0 <z_prf+0x124>
					fplus = true;
    1d98:	2c2b      	cmp	r4, #43	; 0x2b
    1d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d9c:	bf08      	it	eq
    1d9e:	2301      	moveq	r3, #1
    1da0:	9309      	str	r3, [sp, #36]	; 0x24
    1da2:	e79a      	b.n	1cda <z_prf+0x4e>
					falt = true;
    1da4:	2301      	movs	r3, #1
    1da6:	9306      	str	r3, [sp, #24]
    1da8:	e797      	b.n	1cda <z_prf+0x4e>
					fminus = true;
    1daa:	2301      	movs	r3, #1
    1dac:	930b      	str	r3, [sp, #44]	; 0x2c
    1dae:	e794      	b.n	1cda <z_prf+0x4e>
					fzero = true;
    1db0:	2301      	movs	r3, #1
    1db2:	9308      	str	r3, [sp, #32]
    1db4:	e791      	b.n	1cda <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
    1db6:	2300      	movs	r3, #0
    1db8:	9308      	str	r3, [sp, #32]
    1dba:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    1dbe:	930b      	str	r3, [sp, #44]	; 0x2c
    1dc0:	9306      	str	r3, [sp, #24]
    1dc2:	e78c      	b.n	1cde <z_prf+0x52>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1dc4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
    1dc8:	2b09      	cmp	r3, #9
				width = 0;
    1dca:	9007      	str	r0, [sp, #28]
			} else if (!isdigit(c)) {
    1dcc:	d8a1      	bhi.n	1d12 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    1dce:	220a      	movs	r2, #10
	while (isdigit(*p)) {
    1dd0:	f8dd 8014 	ldr.w	r8, [sp, #20]
    1dd4:	f818 4b01 	ldrb.w	r4, [r8], #1
    1dd8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    1ddc:	2b09      	cmp	r3, #9
    1dde:	d898      	bhi.n	1d12 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    1de0:	9b07      	ldr	r3, [sp, #28]
    1de2:	f8cd 8014 	str.w	r8, [sp, #20]
    1de6:	fb02 4403 	mla	r4, r2, r3, r4
    1dea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    1dee:	9307      	str	r3, [sp, #28]
    1df0:	e7ee      	b.n	1dd0 <z_prf+0x144>
    1df2:	fb01 3505 	mla	r5, r1, r5, r3
    1df6:	3d30      	subs	r5, #48	; 0x30
    1df8:	4690      	mov	r8, r2
	while (isdigit(*p)) {
    1dfa:	4642      	mov	r2, r8
    1dfc:	f812 3b01 	ldrb.w	r3, [r2], #1
    1e00:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    1e04:	2809      	cmp	r0, #9
    1e06:	d9f4      	bls.n	1df2 <z_prf+0x166>
    1e08:	e78d      	b.n	1d26 <z_prf+0x9a>
	int i = 0;
    1e0a:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    1e0c:	210a      	movs	r1, #10
    1e0e:	e7f4      	b.n	1dfa <z_prf+0x16e>
			precision = -1;
    1e10:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    1e14:	e789      	b.n	1d2a <z_prf+0x9e>
    1e16:	f8cd 8014 	str.w	r8, [sp, #20]
			i = 0;
    1e1a:	4607      	mov	r7, r0
    1e1c:	e79a      	b.n	1d54 <z_prf+0xc8>
			switch (c) {
    1e1e:	2c63      	cmp	r4, #99	; 0x63
    1e20:	d05a      	beq.n	1ed8 <z_prf+0x24c>
    1e22:	d820      	bhi.n	1e66 <z_prf+0x1da>
    1e24:	2c58      	cmp	r4, #88	; 0x58
    1e26:	d1a4      	bne.n	1d72 <z_prf+0xe6>
				if (c == 'o') {
    1e28:	2c6f      	cmp	r4, #111	; 0x6f
    1e2a:	f106 0904 	add.w	r9, r6, #4
    1e2e:	6831      	ldr	r1, [r6, #0]
    1e30:	f040 831c 	bne.w	246c <z_prf+0x7e0>
	if (alt_form) {
    1e34:	9b06      	ldr	r3, [sp, #24]
    1e36:	2b00      	cmp	r3, #0
    1e38:	f000 830a 	beq.w	2450 <z_prf+0x7c4>
		*buf++ = '0';
    1e3c:	2330      	movs	r3, #48	; 0x30
    1e3e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		if (!value) {
    1e42:	2900      	cmp	r1, #0
    1e44:	f040 830f 	bne.w	2466 <z_prf+0x7da>
			*buf++ = 0;
    1e48:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
			prefix = 0;
    1e4c:	4688      	mov	r8, r1
			return 1;
    1e4e:	2601      	movs	r6, #1
    1e50:	e026      	b.n	1ea0 <z_prf+0x214>
			switch (c) {
    1e52:	2c70      	cmp	r4, #112	; 0x70
    1e54:	f000 82e7 	beq.w	2426 <z_prf+0x79a>
    1e58:	d828      	bhi.n	1eac <z_prf+0x220>
    1e5a:	2c6e      	cmp	r4, #110	; 0x6e
    1e5c:	f000 82d0 	beq.w	2400 <z_prf+0x774>
    1e60:	d8e2      	bhi.n	1e28 <z_prf+0x19c>
    1e62:	2c69      	cmp	r4, #105	; 0x69
    1e64:	d185      	bne.n	1d72 <z_prf+0xe6>
				switch (i) {
    1e66:	6834      	ldr	r4, [r6, #0]
	if (value < 0) {
    1e68:	2c00      	cmp	r4, #0
    1e6a:	f106 0904 	add.w	r9, r6, #4
    1e6e:	f280 809c 	bge.w	1faa <z_prf+0x31e>
		*buf++ = '-';
    1e72:	232d      	movs	r3, #45	; 0x2d
    1e74:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		value = -value;
    1e78:	4261      	negs	r1, r4
		*buf++ = ' ';
    1e7a:	f10d 065d 	add.w	r6, sp, #93	; 0x5d
	return _to_x(buf, value, 10);
    1e7e:	4630      	mov	r0, r6
    1e80:	220a      	movs	r2, #10
    1e82:	f002 fe94 	bl	4bae <_to_x>
				if (fplus || fspace || val < 0) {
    1e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
    1e88:	4406      	add	r6, r0
    1e8a:	a817      	add	r0, sp, #92	; 0x5c
    1e8c:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
    1e8e:	2b00      	cmp	r3, #0
    1e90:	f040 8324 	bne.w	24dc <z_prf+0x850>
    1e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e96:	2b00      	cmp	r3, #0
    1e98:	f040 8320 	bne.w	24dc <z_prf+0x850>
    1e9c:	ea4f 78d4 	mov.w	r8, r4, lsr #31
			if (precision >= 0) {
    1ea0:	2d00      	cmp	r5, #0
    1ea2:	da22      	bge.n	1eea <z_prf+0x25e>
			zero.predot = zero.postdot = zero.trail = 0;
    1ea4:	2500      	movs	r5, #0
    1ea6:	462f      	mov	r7, r5
    1ea8:	46aa      	mov	sl, r5
    1eaa:	e0e5      	b.n	2078 <z_prf+0x3ec>
			switch (c) {
    1eac:	2c75      	cmp	r4, #117	; 0x75
    1eae:	d0bb      	beq.n	1e28 <z_prf+0x19c>
    1eb0:	2c78      	cmp	r4, #120	; 0x78
    1eb2:	d0b9      	beq.n	1e28 <z_prf+0x19c>
    1eb4:	2c73      	cmp	r4, #115	; 0x73
    1eb6:	f47f af5c 	bne.w	1d72 <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
    1eba:	46b1      	mov	r9, r6
					precision = INT_MAX;
    1ebc:	2d00      	cmp	r5, #0
				cptr = va_arg(vargs, char *);
    1ebe:	f859 3b04 	ldr.w	r3, [r9], #4
					precision = INT_MAX;
    1ec2:	bfb8      	it	lt
    1ec4:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    1ec8:	2600      	movs	r6, #0
    1eca:	42b5      	cmp	r5, r6
    1ecc:	f040 82bb 	bne.w	2446 <z_prf+0x7ba>
    1ed0:	462e      	mov	r6, r5
    1ed2:	2500      	movs	r5, #0
    1ed4:	46a8      	mov	r8, r5
    1ed6:	e009      	b.n	1eec <z_prf+0x260>
				buf[0] = va_arg(vargs, int);
    1ed8:	46b1      	mov	r9, r6
				break;
    1eda:	f04f 0800 	mov.w	r8, #0
				buf[0] = va_arg(vargs, int);
    1ede:	f859 3b04 	ldr.w	r3, [r9], #4
    1ee2:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
				clen = 1;
    1ee6:	2601      	movs	r6, #1
				break;
    1ee8:	4645      	mov	r5, r8
    1eea:	ab17      	add	r3, sp, #92	; 0x5c
				zero_head = precision - clen + prefix;
    1eec:	eb05 0208 	add.w	r2, r5, r8
			zero.predot = zero.postdot = zero.trail = 0;
    1ef0:	2500      	movs	r5, #0
				zero_head = precision - clen + prefix;
    1ef2:	1b92      	subs	r2, r2, r6
			zero.predot = zero.postdot = zero.trail = 0;
    1ef4:	462f      	mov	r7, r5
    1ef6:	46aa      	mov	sl, r5
			if (zero_head < 0) {
    1ef8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
    1efc:	1991      	adds	r1, r2, r6
    1efe:	9106      	str	r1, [sp, #24]
    1f00:	9907      	ldr	r1, [sp, #28]
    1f02:	1990      	adds	r0, r2, r6
    1f04:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
    1f06:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1f08:	b911      	cbnz	r1, 1f10 <z_prf+0x284>
    1f0a:	2c00      	cmp	r4, #0
    1f0c:	f300 8304 	bgt.w	2518 <z_prf+0x88c>
			while (prefix-- > 0) {
    1f10:	eb03 0b08 	add.w	fp, r3, r8
    1f14:	455b      	cmp	r3, fp
    1f16:	f040 8301 	bne.w	251c <z_prf+0x890>
			while (zero_head-- > 0) {
    1f1a:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    1f1e:	f080 830d 	bcs.w	253c <z_prf+0x8b0>
			clen -= prefix;
    1f22:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.predot) {
    1f26:	f1ba 0f00 	cmp.w	sl, #0
    1f2a:	d011      	beq.n	1f50 <z_prf+0x2c4>
				c = *cptr;
    1f2c:	f89b 0000 	ldrb.w	r0, [fp]
				while (isdigit(c)) {
    1f30:	eb0b 0806 	add.w	r8, fp, r6
    1f34:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    1f38:	2b09      	cmp	r3, #9
    1f3a:	eba8 060b 	sub.w	r6, r8, fp
    1f3e:	f240 8308 	bls.w	2552 <z_prf+0x8c6>
    1f42:	46d0      	mov	r8, sl
				while (zero.predot-- > 0) {
    1f44:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
    1f48:	f080 830c 	bcs.w	2564 <z_prf+0x8d8>
				clen -= zero.predot;
    1f4c:	eba6 060a 	sub.w	r6, r6, sl
			if (zero.postdot) {
    1f50:	b1af      	cbz	r7, 1f7e <z_prf+0x2f2>
    1f52:	eb0b 0806 	add.w	r8, fp, r6
					c = *cptr++;
    1f56:	f81b ab01 	ldrb.w	sl, [fp], #1
					PUTC(c);
    1f5a:	9904      	ldr	r1, [sp, #16]
    1f5c:	9b01      	ldr	r3, [sp, #4]
    1f5e:	4650      	mov	r0, sl
    1f60:	4798      	blx	r3
    1f62:	3001      	adds	r0, #1
    1f64:	f43f aea8 	beq.w	1cb8 <z_prf+0x2c>
				} while (c != '.');
    1f68:	f1ba 0f2e 	cmp.w	sl, #46	; 0x2e
    1f6c:	eba8 060b 	sub.w	r6, r8, fp
    1f70:	d1f1      	bne.n	1f56 <z_prf+0x2ca>
				while (zero.postdot-- > 0) {
    1f72:	46b8      	mov	r8, r7
    1f74:	f1b8 0f00 	cmp.w	r8, #0
    1f78:	f300 82fd 	bgt.w	2576 <z_prf+0x8ea>
				clen -= zero.postdot;
    1f7c:	1bf6      	subs	r6, r6, r7
			if (zero.trail) {
    1f7e:	b195      	cbz	r5, 1fa6 <z_prf+0x31a>
				c = *cptr;
    1f80:	f89b 0000 	ldrb.w	r0, [fp]
				while (isdigit(c) || c == '.') {
    1f84:	eb0b 0806 	add.w	r8, fp, r6
    1f88:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    1f8c:	2b09      	cmp	r3, #9
    1f8e:	eba8 060b 	sub.w	r6, r8, fp
    1f92:	f240 82fb 	bls.w	258c <z_prf+0x900>
    1f96:	282e      	cmp	r0, #46	; 0x2e
    1f98:	f000 82f8 	beq.w	258c <z_prf+0x900>
				while (zero.trail-- > 0) {
    1f9c:	462f      	mov	r7, r5
    1f9e:	2f00      	cmp	r7, #0
    1fa0:	f300 82fd 	bgt.w	259e <z_prf+0x912>
				clen -= zero.trail;
    1fa4:	1b76      	subs	r6, r6, r5
    1fa6:	445e      	add	r6, fp
    1fa8:	e30c      	b.n	25c4 <z_prf+0x938>
	} else if (fplus) {
    1faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1fac:	b123      	cbz	r3, 1fb8 <z_prf+0x32c>
		*buf++ = '+';
    1fae:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    1fb0:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    1fb4:	4621      	mov	r1, r4
    1fb6:	e760      	b.n	1e7a <z_prf+0x1ee>
	} else if (fspace) {
    1fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1fba:	b10b      	cbz	r3, 1fc0 <z_prf+0x334>
		*buf++ = ' ';
    1fbc:	2320      	movs	r3, #32
    1fbe:	e7f7      	b.n	1fb0 <z_prf+0x324>
	} else if (fspace) {
    1fc0:	4621      	mov	r1, r4
    1fc2:	ae17      	add	r6, sp, #92	; 0x5c
    1fc4:	e75b      	b.n	1e7e <z_prf+0x1f2>
    1fc6:	bf00      	nop
    1fc8:	00005bca 	.word	0x00005bca
    1fcc:	00005bd0 	.word	0x00005bd0
				u.d = va_arg(vargs, double);
    1fd0:	f106 0907 	add.w	r9, r6, #7
    1fd4:	f029 0907 	bic.w	r9, r9, #7
    1fd8:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    1fdc:	02d8      	lsls	r0, r3, #11
    1fde:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
    1fe2:	02d6      	lsls	r6, r2, #11
    1fe4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    1fe8:	9602      	str	r6, [sp, #8]
    1fea:	9003      	str	r0, [sp, #12]
    1fec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
	if (sign) {
    1ff0:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
    1ff2:	f3c3 510a 	ubfx	r1, r3, #20, #11
	if (sign) {
    1ff6:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    1ffa:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
	if (sign) {
    1ffe:	da43      	bge.n	2088 <z_prf+0x3fc>
		*buf++ = '-';
    2000:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    2002:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    2006:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
	if (exp == 0x7ff) {
    200a:	f240 73ff 	movw	r3, #2047	; 0x7ff
    200e:	4299      	cmp	r1, r3
    2010:	d155      	bne.n	20be <z_prf+0x432>
		if (!fract) {
    2012:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2016:	4313      	orrs	r3, r2
    2018:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    201c:	f107 0b03 	add.w	fp, r7, #3
    2020:	d142      	bne.n	20a8 <z_prf+0x41c>
			if (isupper(c)) {
    2022:	2c19      	cmp	r4, #25
    2024:	d83a      	bhi.n	209c <z_prf+0x410>
				*buf++ = 'I';
    2026:	2349      	movs	r3, #73	; 0x49
    2028:	703b      	strb	r3, [r7, #0]
				*buf++ = 'N';
    202a:	234e      	movs	r3, #78	; 0x4e
    202c:	707b      	strb	r3, [r7, #1]
				*buf++ = 'F';
    202e:	2346      	movs	r3, #70	; 0x46
		*buf = 0;
    2030:	2500      	movs	r5, #0
		return buf - start;
    2032:	ae17      	add	r6, sp, #92	; 0x5c
				*buf++ = 'n';
    2034:	70bb      	strb	r3, [r7, #2]
		*buf = 0;
    2036:	70fd      	strb	r5, [r7, #3]
		return buf - start;
    2038:	ebab 0b06 	sub.w	fp, fp, r6
			zero.predot = zero.postdot = zero.trail = 0;
    203c:	462f      	mov	r7, r5
    203e:	46aa      	mov	sl, r5
				if (fplus || fspace || (buf[0] == '-')) {
    2040:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2042:	2b00      	cmp	r3, #0
    2044:	f040 81d9 	bne.w	23fa <z_prf+0x76e>
    2048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    204a:	2b00      	cmp	r3, #0
    204c:	f040 81d5 	bne.w	23fa <z_prf+0x76e>
    2050:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    2054:	f1a8 032d 	sub.w	r3, r8, #45	; 0x2d
    2058:	f1d3 0800 	rsbs	r8, r3, #0
    205c:	eb48 0803 	adc.w	r8, r8, r3
				if (!isdigit(buf[prefix])) {
    2060:	ab1e      	add	r3, sp, #120	; 0x78
    2062:	4443      	add	r3, r8
				clen += zero.predot + zero.postdot + zero.trail;
    2064:	44bb      	add	fp, r7
    2066:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    206a:	3b30      	subs	r3, #48	; 0x30
    206c:	eb0b 060a 	add.w	r6, fp, sl
				if (!isdigit(buf[prefix])) {
    2070:	2b09      	cmp	r3, #9
				clen += zero.predot + zero.postdot + zero.trail;
    2072:	442e      	add	r6, r5
				if (!isdigit(buf[prefix])) {
    2074:	f200 8237 	bhi.w	24e6 <z_prf+0x85a>
			} else if (fzero) {
    2078:	9b08      	ldr	r3, [sp, #32]
    207a:	2b00      	cmp	r3, #0
    207c:	f000 8236 	beq.w	24ec <z_prf+0x860>
    2080:	9b07      	ldr	r3, [sp, #28]
    2082:	1b9a      	subs	r2, r3, r6
    2084:	ab17      	add	r3, sp, #92	; 0x5c
    2086:	e737      	b.n	1ef8 <z_prf+0x26c>
	} else if (fplus) {
    2088:	9b09      	ldr	r3, [sp, #36]	; 0x24
    208a:	b10b      	cbz	r3, 2090 <z_prf+0x404>
		*buf++ = '+';
    208c:	232b      	movs	r3, #43	; 0x2b
    208e:	e7b8      	b.n	2002 <z_prf+0x376>
	} else if (fspace) {
    2090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2092:	b10b      	cbz	r3, 2098 <z_prf+0x40c>
		*buf++ = ' ';
    2094:	2320      	movs	r3, #32
    2096:	e7b4      	b.n	2002 <z_prf+0x376>
	} else if (fspace) {
    2098:	af17      	add	r7, sp, #92	; 0x5c
    209a:	e7b6      	b.n	200a <z_prf+0x37e>
				*buf++ = 'i';
    209c:	2369      	movs	r3, #105	; 0x69
    209e:	703b      	strb	r3, [r7, #0]
				*buf++ = 'n';
    20a0:	236e      	movs	r3, #110	; 0x6e
    20a2:	707b      	strb	r3, [r7, #1]
				*buf++ = 'f';
    20a4:	2366      	movs	r3, #102	; 0x66
    20a6:	e7c3      	b.n	2030 <z_prf+0x3a4>
			if (isupper(c)) {
    20a8:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    20aa:	bf99      	ittee	ls
    20ac:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    20ae:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    20b0:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    20b2:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    20b4:	bf94      	ite	ls
    20b6:	703b      	strbls	r3, [r7, #0]
				*buf++ = 'n';
    20b8:	703b      	strbhi	r3, [r7, #0]
				*buf++ = 'a';
    20ba:	707a      	strb	r2, [r7, #1]
    20bc:	e7b8      	b.n	2030 <z_prf+0x3a4>
	if ((exp | fract) != 0) {
    20be:	9b02      	ldr	r3, [sp, #8]
    20c0:	9803      	ldr	r0, [sp, #12]
    20c2:	430b      	orrs	r3, r1
    20c4:	930c      	str	r3, [sp, #48]	; 0x30
    20c6:	17cb      	asrs	r3, r1, #31
    20c8:	4303      	orrs	r3, r0
    20ca:	930d      	str	r3, [sp, #52]	; 0x34
    20cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
		c = 'f';
    20d0:	2c46      	cmp	r4, #70	; 0x46
    20d2:	bf08      	it	eq
    20d4:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    20d6:	4313      	orrs	r3, r2
    20d8:	f000 80ff 	beq.w	22da <z_prf+0x64e>
		if (exp == 0) {
    20dc:	2900      	cmp	r1, #0
    20de:	f000 809f 	beq.w	2220 <z_prf+0x594>
		fract |= HIGHBIT64;
    20e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    20e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    20e8:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    20ec:	9313      	str	r3, [sp, #76]	; 0x4c
    20ee:	2600      	movs	r6, #0
	while (exp <= -3) {
    20f0:	f118 0f02 	cmn.w	r8, #2
    20f4:	f2c0 80a8 	blt.w	2248 <z_prf+0x5bc>
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    20f8:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    20fc:	f04f 0b00 	mov.w	fp, #0
	while (exp > 0) {
    2100:	f1b8 0f00 	cmp.w	r8, #0
    2104:	f300 80cc 	bgt.w	22a0 <z_prf+0x614>
		_rlrshift(&fract);
    2108:	a812      	add	r0, sp, #72	; 0x48
		exp++;
    210a:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    210e:	f002 fd70 	bl	4bf2 <_rlrshift>
	while (exp < (0 + 4)) {
    2112:	f1b8 0f04 	cmp.w	r8, #4
    2116:	d1f7      	bne.n	2108 <z_prf+0x47c>
		precision = 6;		/* Default precision if none given */
    2118:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    211a:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    211e:	bfb8      	it	lt
    2120:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    2122:	2b47      	cmp	r3, #71	; 0x47
    2124:	f040 80e1 	bne.w	22ea <z_prf+0x65e>
		if (decexp < (-4 + 1) || decexp > precision) {
    2128:	1cf2      	adds	r2, r6, #3
    212a:	db02      	blt.n	2132 <z_prf+0x4a6>
    212c:	42ae      	cmp	r6, r5
    212e:	f340 80d7 	ble.w	22e0 <z_prf+0x654>
			c += 'e' - 'g';
    2132:	3c02      	subs	r4, #2
    2134:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
    2136:	2d00      	cmp	r5, #0
    2138:	f000 80dd 	beq.w	22f6 <z_prf+0x66a>
		if (!falt && (precision > 0)) {
    213c:	9b06      	ldr	r3, [sp, #24]
				precision--;
    213e:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
    2140:	2b00      	cmp	r3, #0
    2142:	f040 80d8 	bne.w	22f6 <z_prf+0x66a>
    2146:	2d00      	cmp	r5, #0
    2148:	bfd4      	ite	le
    214a:	f04f 0800 	movle.w	r8, #0
    214e:	f04f 0801 	movgt.w	r8, #1
	if (c == 'f') {
    2152:	2c66      	cmp	r4, #102	; 0x66
    2154:	f040 80d1 	bne.w	22fa <z_prf+0x66e>
		if (exp < 0) {
    2158:	eb16 0a05 	adds.w	sl, r6, r5
    215c:	f140 80d5 	bpl.w	230a <z_prf+0x67e>
	digit_count = 16;
    2160:	2310      	movs	r3, #16
    2162:	9311      	str	r3, [sp, #68]	; 0x44
    2164:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    2166:	f04f 0a00 	mov.w	sl, #0
	ltemp = 0x0800000000000000;
    216a:	2200      	movs	r2, #0
    216c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    2170:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	while (exp--) {
    2174:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
    2178:	f080 80c9 	bcs.w	230e <z_prf+0x682>
	fract += ltemp;
    217c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    217e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    2180:	9915      	ldr	r1, [sp, #84]	; 0x54
    2182:	189b      	adds	r3, r3, r2
    2184:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    2186:	eb41 0202 	adc.w	r2, r1, r2
    218a:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
	if ((fract >> 32) & 0xF0000000) {
    218e:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    2192:	930e      	str	r3, [sp, #56]	; 0x38
    2194:	2300      	movs	r3, #0
    2196:	930f      	str	r3, [sp, #60]	; 0x3c
    2198:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    219c:	4313      	orrs	r3, r2
    219e:	d006      	beq.n	21ae <z_prf+0x522>
		_ldiv5(&fract);
    21a0:	a812      	add	r0, sp, #72	; 0x48
    21a2:	f002 fd38 	bl	4c16 <_ldiv5>
		_rlrshift(&fract);
    21a6:	a812      	add	r0, sp, #72	; 0x48
    21a8:	f002 fd23 	bl	4bf2 <_rlrshift>
		decexp++;
    21ac:	3601      	adds	r6, #1
	if (c == 'f') {
    21ae:	2c66      	cmp	r4, #102	; 0x66
    21b0:	f040 80c7 	bne.w	2342 <z_prf+0x6b6>
		if (decexp > 0) {
    21b4:	2e00      	cmp	r6, #0
    21b6:	f340 80b1 	ble.w	231c <z_prf+0x690>
			while (decexp > 0 && digit_count > 0) {
    21ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    21bc:	2b00      	cmp	r3, #0
    21be:	dd07      	ble.n	21d0 <z_prf+0x544>
				*buf++ = _get_digit(&fract, &digit_count);
    21c0:	a911      	add	r1, sp, #68	; 0x44
    21c2:	a812      	add	r0, sp, #72	; 0x48
    21c4:	f002 fd53 	bl	4c6e <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    21c8:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    21ca:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    21ce:	d1f4      	bne.n	21ba <z_prf+0x52e>
			zp->predot = decexp;
    21d0:	46b2      	mov	sl, r6
    21d2:	46bb      	mov	fp, r7
			decexp = 0;
    21d4:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    21d6:	9b06      	ldr	r3, [sp, #24]
    21d8:	b913      	cbnz	r3, 21e0 <z_prf+0x554>
    21da:	2d00      	cmp	r5, #0
    21dc:	f340 80af 	ble.w	233e <z_prf+0x6b2>
			*buf++ = '.';
    21e0:	232e      	movs	r3, #46	; 0x2e
    21e2:	f80b 3b01 	strb.w	r3, [fp], #1
		if (decexp < 0 && precision > 0) {
    21e6:	2e00      	cmp	r6, #0
    21e8:	f000 80a7 	beq.w	233a <z_prf+0x6ae>
    21ec:	2d00      	cmp	r5, #0
    21ee:	f340 80a6 	ble.w	233e <z_prf+0x6b2>
			zp->postdot = -decexp;
    21f2:	4277      	negs	r7, r6
    21f4:	42af      	cmp	r7, r5
    21f6:	bfa8      	it	ge
    21f8:	462f      	movge	r7, r5
			precision -= zp->postdot;
    21fa:	1bed      	subs	r5, r5, r7
		while (precision > 0 && digit_count > 0) {
    21fc:	2d00      	cmp	r5, #0
    21fe:	dd03      	ble.n	2208 <z_prf+0x57c>
    2200:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2202:	2b00      	cmp	r3, #0
    2204:	f300 8091 	bgt.w	232a <z_prf+0x69e>
	if (prune_zero) {
    2208:	f1b8 0f00 	cmp.w	r8, #0
    220c:	f040 80af 	bne.w	236e <z_prf+0x6e2>
	*buf = 0;
    2210:	2300      	movs	r3, #0
	return buf - start;
    2212:	ae17      	add	r6, sp, #92	; 0x5c
	*buf = 0;
    2214:	f88b 3000 	strb.w	r3, [fp]
	return buf - start;
    2218:	ebab 0b06 	sub.w	fp, fp, r6
    221c:	e710      	b.n	2040 <z_prf+0x3b4>
				exp--;
    221e:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    2220:	9b02      	ldr	r3, [sp, #8]
    2222:	18db      	adds	r3, r3, r3
    2224:	9302      	str	r3, [sp, #8]
    2226:	9b03      	ldr	r3, [sp, #12]
    2228:	415b      	adcs	r3, r3
    222a:	9303      	str	r3, [sp, #12]
    222c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2230:	2a00      	cmp	r2, #0
    2232:	f173 0300 	sbcs.w	r3, r3, #0
    2236:	daf2      	bge.n	221e <z_prf+0x592>
    2238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    223c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    2240:	e74f      	b.n	20e2 <z_prf+0x456>
			_rlrshift(&fract);
    2242:	a812      	add	r0, sp, #72	; 0x48
    2244:	f002 fcd5 	bl	4bf2 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    2248:	e9dd 2c12 	ldrd	r2, ip, [sp, #72]	; 0x48
    224c:	f04f 0b00 	mov.w	fp, #0
    2250:	48b9      	ldr	r0, [pc, #740]	; (2538 <z_prf+0x8ac>)
    2252:	2100      	movs	r1, #0
    2254:	4559      	cmp	r1, fp
    2256:	bf08      	it	eq
    2258:	4560      	cmpeq	r0, ip
    225a:	f108 0801 	add.w	r8, r8, #1
    225e:	d3f0      	bcc.n	2242 <z_prf+0x5b6>
		fract *= 5U;
    2260:	2005      	movs	r0, #5
    2262:	fba2 2300 	umull	r2, r3, r2, r0
    2266:	fb00 330c 	mla	r3, r0, ip, r3
    226a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
		decexp--;
    226e:	46dc      	mov	ip, fp
    2270:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    2272:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    2276:	f04f 0b00 	mov.w	fp, #0
    227a:	2100      	movs	r1, #0
    227c:	458b      	cmp	fp, r1
    227e:	bf08      	it	eq
    2280:	459a      	cmpeq	sl, r3
    2282:	d206      	bcs.n	2292 <z_prf+0x606>
    2284:	f1bc 0f00 	cmp.w	ip, #0
    2288:	f43f af32 	beq.w	20f0 <z_prf+0x464>
    228c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    2290:	e72e      	b.n	20f0 <z_prf+0x464>
			fract <<= 1;
    2292:	1892      	adds	r2, r2, r2
    2294:	415b      	adcs	r3, r3
			exp--;
    2296:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    229a:	f04f 0c01 	mov.w	ip, #1
    229e:	e7ec      	b.n	227a <z_prf+0x5ee>
		_ldiv5(&fract);
    22a0:	a812      	add	r0, sp, #72	; 0x48
    22a2:	f002 fcb8 	bl	4c16 <_ldiv5>
		exp--;
    22a6:	e9dd 1012 	ldrd	r1, r0, [sp, #72]	; 0x48
    22aa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    22ae:	3601      	adds	r6, #1
    22b0:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    22b4:	2300      	movs	r3, #0
    22b6:	459b      	cmp	fp, r3
    22b8:	bf08      	it	eq
    22ba:	4582      	cmpeq	sl, r0
    22bc:	d206      	bcs.n	22cc <z_prf+0x640>
    22be:	f1bc 0f00 	cmp.w	ip, #0
    22c2:	f43f af1d 	beq.w	2100 <z_prf+0x474>
    22c6:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
    22ca:	e719      	b.n	2100 <z_prf+0x474>
			fract <<= 1;
    22cc:	1849      	adds	r1, r1, r1
    22ce:	4140      	adcs	r0, r0
			exp--;
    22d0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    22d4:	f04f 0c01 	mov.w	ip, #1
    22d8:	e7ec      	b.n	22b4 <z_prf+0x628>
	if ((exp | fract) != 0) {
    22da:	2600      	movs	r6, #0
    22dc:	46b0      	mov	r8, r6
    22de:	e713      	b.n	2108 <z_prf+0x47c>
		if (!falt && (precision > 0)) {
    22e0:	9b06      	ldr	r3, [sp, #24]
			precision -= decexp;
    22e2:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
    22e4:	b923      	cbnz	r3, 22f0 <z_prf+0x664>
			c = 'f';
    22e6:	2466      	movs	r4, #102	; 0x66
    22e8:	e72d      	b.n	2146 <z_prf+0x4ba>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    22ea:	f04f 0800 	mov.w	r8, #0
    22ee:	e730      	b.n	2152 <z_prf+0x4c6>
    22f0:	f04f 0800 	mov.w	r8, #0
    22f4:	e730      	b.n	2158 <z_prf+0x4cc>
    22f6:	f04f 0800 	mov.w	r8, #0
		exp = precision + 1;
    22fa:	f105 0a01 	add.w	sl, r5, #1
	digit_count = 16;
    22fe:	2310      	movs	r3, #16
    2300:	459a      	cmp	sl, r3
    2302:	9311      	str	r3, [sp, #68]	; 0x44
	if (exp > 16) {
    2304:	bfa8      	it	ge
    2306:	469a      	movge	sl, r3
    2308:	e72f      	b.n	216a <z_prf+0x4de>
		if (exp < 0) {
    230a:	2466      	movs	r4, #102	; 0x66
    230c:	e7f7      	b.n	22fe <z_prf+0x672>
		_ldiv5(&ltemp);
    230e:	a814      	add	r0, sp, #80	; 0x50
    2310:	f002 fc81 	bl	4c16 <_ldiv5>
		_rlrshift(&ltemp);
    2314:	a814      	add	r0, sp, #80	; 0x50
    2316:	f002 fc6c 	bl	4bf2 <_rlrshift>
    231a:	e72b      	b.n	2174 <z_prf+0x4e8>
			*buf++ = '0';
    231c:	46bb      	mov	fp, r7
    231e:	2330      	movs	r3, #48	; 0x30
    2320:	f80b 3b01 	strb.w	r3, [fp], #1
			zero.predot = zero.postdot = zero.trail = 0;
    2324:	f04f 0a00 	mov.w	sl, #0
    2328:	e755      	b.n	21d6 <z_prf+0x54a>
			*buf++ = _get_digit(&fract, &digit_count);
    232a:	a911      	add	r1, sp, #68	; 0x44
    232c:	a812      	add	r0, sp, #72	; 0x48
    232e:	f002 fc9e 	bl	4c6e <_get_digit>
			precision--;
    2332:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    2334:	f80b 0b01 	strb.w	r0, [fp], #1
			precision--;
    2338:	e760      	b.n	21fc <z_prf+0x570>
			zero.predot = zero.postdot = zero.trail = 0;
    233a:	4637      	mov	r7, r6
    233c:	e75e      	b.n	21fc <z_prf+0x570>
    233e:	2700      	movs	r7, #0
    2340:	e762      	b.n	2208 <z_prf+0x57c>
		*buf = _get_digit(&fract, &digit_count);
    2342:	a911      	add	r1, sp, #68	; 0x44
    2344:	a812      	add	r0, sp, #72	; 0x48
    2346:	f002 fc92 	bl	4c6e <_get_digit>
		if (falt || (precision > 0)) {
    234a:	9b06      	ldr	r3, [sp, #24]
		*buf = _get_digit(&fract, &digit_count);
    234c:	7038      	strb	r0, [r7, #0]
		if (*buf++ != '0') {
    234e:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    2350:	bf18      	it	ne
    2352:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
    2356:	2b00      	cmp	r3, #0
    2358:	d13b      	bne.n	23d2 <z_prf+0x746>
    235a:	2d00      	cmp	r5, #0
    235c:	dc39      	bgt.n	23d2 <z_prf+0x746>
		if (*buf++ != '0') {
    235e:	f107 0b01 	add.w	fp, r7, #1
	if (prune_zero) {
    2362:	f1b8 0f00 	cmp.w	r8, #0
    2366:	d045      	beq.n	23f4 <z_prf+0x768>
			zero.predot = zero.postdot = zero.trail = 0;
    2368:	f04f 0a00 	mov.w	sl, #0
    236c:	4657      	mov	r7, sl
		while (*--buf == '0')
    236e:	465b      	mov	r3, fp
    2370:	f81b 2d01 	ldrb.w	r2, [fp, #-1]!
    2374:	2a30      	cmp	r2, #48	; 0x30
    2376:	d0fa      	beq.n	236e <z_prf+0x6e2>
		if (*buf != '.') {
    2378:	2a2e      	cmp	r2, #46	; 0x2e
    237a:	bf18      	it	ne
    237c:	469b      	movne	fp, r3
    237e:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
    2380:	f004 03df 	and.w	r3, r4, #223	; 0xdf
    2384:	2b45      	cmp	r3, #69	; 0x45
    2386:	f47f af43 	bne.w	2210 <z_prf+0x584>
		if (decexp < 0) {
    238a:	2e00      	cmp	r6, #0
		*buf++ = c;
    238c:	465a      	mov	r2, fp
			decexp = -decexp;
    238e:	bfba      	itte	lt
    2390:	4276      	neglt	r6, r6
			*buf++ = '-';
    2392:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    2394:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
    2396:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    2398:	f802 4b02 	strb.w	r4, [r2], #2
			*buf++ = '-';
    239c:	f88b 3001 	strb.w	r3, [fp, #1]
		if (decexp >= 100) {
    23a0:	dd0a      	ble.n	23b8 <z_prf+0x72c>
			*buf++ = (decexp / 100) + '0';
    23a2:	2164      	movs	r1, #100	; 0x64
    23a4:	fb96 f3f1 	sdiv	r3, r6, r1
    23a8:	f103 0030 	add.w	r0, r3, #48	; 0x30
    23ac:	f10b 0203 	add.w	r2, fp, #3
    23b0:	f88b 0002 	strb.w	r0, [fp, #2]
			decexp %= 100;
    23b4:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    23b8:	210a      	movs	r1, #10
    23ba:	4693      	mov	fp, r2
    23bc:	fb96 f3f1 	sdiv	r3, r6, r1
		decexp %= 10;
    23c0:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    23c4:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = decexp + '0';
    23c8:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    23ca:	f80b 0b02 	strb.w	r0, [fp], #2
		*buf++ = decexp + '0';
    23ce:	7056      	strb	r6, [r2, #1]
    23d0:	e71e      	b.n	2210 <z_prf+0x584>
			*buf++ = '.';
    23d2:	232e      	movs	r3, #46	; 0x2e
    23d4:	f107 0b02 	add.w	fp, r7, #2
    23d8:	707b      	strb	r3, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    23da:	2d00      	cmp	r5, #0
    23dc:	ddc1      	ble.n	2362 <z_prf+0x6d6>
    23de:	9b11      	ldr	r3, [sp, #68]	; 0x44
    23e0:	2b00      	cmp	r3, #0
    23e2:	ddbe      	ble.n	2362 <z_prf+0x6d6>
			*buf++ = _get_digit(&fract, &digit_count);
    23e4:	a911      	add	r1, sp, #68	; 0x44
    23e6:	a812      	add	r0, sp, #72	; 0x48
    23e8:	f002 fc41 	bl	4c6e <_get_digit>
			precision--;
    23ec:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    23ee:	f80b 0b01 	strb.w	r0, [fp], #1
			precision--;
    23f2:	e7f2      	b.n	23da <z_prf+0x74e>
			zero.predot = zero.postdot = zero.trail = 0;
    23f4:	46c2      	mov	sl, r8
    23f6:	4647      	mov	r7, r8
    23f8:	e7c2      	b.n	2380 <z_prf+0x6f4>
					prefix = 1;
    23fa:	f04f 0801 	mov.w	r8, #1
    23fe:	e62f      	b.n	2060 <z_prf+0x3d4>
				switch (i) {
    2400:	46b1      	mov	r9, r6
    2402:	2f68      	cmp	r7, #104	; 0x68
    2404:	f859 3b04 	ldr.w	r3, [r9], #4
    2408:	d005      	beq.n	2416 <z_prf+0x78a>
    240a:	dc01      	bgt.n	2410 <z_prf+0x784>
    240c:	2f48      	cmp	r7, #72	; 0x48
    240e:	d007      	beq.n	2420 <z_prf+0x794>
					*va_arg(vargs, int *) = count;
    2410:	9a00      	ldr	r2, [sp, #0]
    2412:	601a      	str	r2, [r3, #0]
					break;
    2414:	e001      	b.n	241a <z_prf+0x78e>
					*va_arg(vargs, short *) = count;
    2416:	9a00      	ldr	r2, [sp, #0]
    2418:	801a      	strh	r2, [r3, #0]
				continue;
    241a:	464e      	mov	r6, r9
    241c:	9a05      	ldr	r2, [sp, #20]
    241e:	e43d      	b.n	1c9c <z_prf+0x10>
					*va_arg(vargs, char *) = count;
    2420:	9a00      	ldr	r2, [sp, #0]
    2422:	701a      	strb	r2, [r3, #0]
					break;
    2424:	e7f9      	b.n	241a <z_prf+0x78e>
				val = (uintptr_t) va_arg(vargs, void *);
    2426:	46b1      	mov	r9, r6
		*buf++ = '0';
    2428:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
    242c:	2210      	movs	r2, #16
    242e:	f859 1b04 	ldr.w	r1, [r9], #4
		*buf++ = '0';
    2432:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
	len = _to_x(buf, value, 16);
    2436:	f10d 005e 	add.w	r0, sp, #94	; 0x5e
    243a:	f002 fbb8 	bl	4bae <_to_x>
				prefix = 2;
    243e:	f04f 0802 	mov.w	r8, #2
	return len + (buf - buf0);
    2442:	1c86      	adds	r6, r0, #2
				break;
    2444:	e52c      	b.n	1ea0 <z_prf+0x214>
					if (cptr[clen] == '\0') {
    2446:	5d9a      	ldrb	r2, [r3, r6]
    2448:	2a00      	cmp	r2, #0
    244a:	d04a      	beq.n	24e2 <z_prf+0x856>
				for (clen = 0; clen < precision; clen++) {
    244c:	3601      	adds	r6, #1
    244e:	e53c      	b.n	1eca <z_prf+0x23e>
	if (alt_form) {
    2450:	ac17      	add	r4, sp, #92	; 0x5c
	return (buf - buf0) + _to_x(buf, value, 8);
    2452:	2208      	movs	r2, #8
    2454:	4620      	mov	r0, r4
    2456:	f002 fbaa 	bl	4bae <_to_x>
    245a:	ae17      	add	r6, sp, #92	; 0x5c
    245c:	1ba6      	subs	r6, r4, r6
    245e:	4406      	add	r6, r0
			prefix = 0;
    2460:	f04f 0800 	mov.w	r8, #0
    2464:	e51c      	b.n	1ea0 <z_prf+0x214>
		*buf++ = '0';
    2466:	f10d 045d 	add.w	r4, sp, #93	; 0x5d
    246a:	e7f2      	b.n	2452 <z_prf+0x7c6>
				} else if (c == 'u') {
    246c:	2c75      	cmp	r4, #117	; 0x75
    246e:	d105      	bne.n	247c <z_prf+0x7f0>
	return _to_x(buf, value, 10);
    2470:	220a      	movs	r2, #10
    2472:	a817      	add	r0, sp, #92	; 0x5c
    2474:	f002 fb9b 	bl	4bae <_to_x>
    2478:	4606      	mov	r6, r0
    247a:	e7f1      	b.n	2460 <z_prf+0x7d4>
	if (alt_form) {
    247c:	9b06      	ldr	r3, [sp, #24]
    247e:	b193      	cbz	r3, 24a6 <z_prf+0x81a>
		*buf++ = '0';
    2480:	f647 0330 	movw	r3, #30768	; 0x7830
    2484:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
		*buf++ = 'x';
    2488:	f10d 075e 	add.w	r7, sp, #94	; 0x5e
	len = _to_x(buf, value, 16);
    248c:	2210      	movs	r2, #16
    248e:	4638      	mov	r0, r7
    2490:	f002 fb8d 	bl	4bae <_to_x>
	if (prefix == 'X') {
    2494:	2c58      	cmp	r4, #88	; 0x58
    2496:	d008      	beq.n	24aa <z_prf+0x81e>
	return len + (buf - buf0);
    2498:	ae17      	add	r6, sp, #92	; 0x5c
						prefix = 2;
    249a:	9b06      	ldr	r3, [sp, #24]
	return len + (buf - buf0);
    249c:	1bbe      	subs	r6, r7, r6
    249e:	4406      	add	r6, r0
						prefix = 2;
    24a0:	ea4f 0843 	mov.w	r8, r3, lsl #1
    24a4:	e4fc      	b.n	1ea0 <z_prf+0x214>
	if (alt_form) {
    24a6:	af17      	add	r7, sp, #92	; 0x5c
    24a8:	e7f0      	b.n	248c <z_prf+0x800>
    24aa:	aa17      	add	r2, sp, #92	; 0x5c
		if (*buf >= 'a' && *buf <= 'z') {
    24ac:	f812 3b01 	ldrb.w	r3, [r2], #1
    24b0:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    24b4:	2919      	cmp	r1, #25
    24b6:	d803      	bhi.n	24c0 <z_prf+0x834>
			*buf += 'A' - 'a';
    24b8:	3b20      	subs	r3, #32
    24ba:	f802 3c01 	strb.w	r3, [r2, #-1]
    24be:	e7f5      	b.n	24ac <z_prf+0x820>
	} while (*buf++);
    24c0:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    24c4:	2b00      	cmp	r3, #0
    24c6:	d1f1      	bne.n	24ac <z_prf+0x820>
    24c8:	e7e6      	b.n	2498 <z_prf+0x80c>
				PUTC('%');
    24ca:	9904      	ldr	r1, [sp, #16]
    24cc:	4620      	mov	r0, r4
    24ce:	f7ff bbee 	b.w	1cae <z_prf+0x22>
				count++;
    24d2:	9b00      	ldr	r3, [sp, #0]
    24d4:	3301      	adds	r3, #1
				count += 2;
    24d6:	9300      	str	r3, [sp, #0]
				continue;
    24d8:	46b1      	mov	r9, r6
    24da:	e79e      	b.n	241a <z_prf+0x78e>
					prefix = 1;
    24dc:	f04f 0801 	mov.w	r8, #1
    24e0:	e4de      	b.n	1ea0 <z_prf+0x214>
    24e2:	4615      	mov	r5, r2
    24e4:	e4f6      	b.n	1ed4 <z_prf+0x248>
			cptr = buf;
    24e6:	ab17      	add	r3, sp, #92	; 0x5c
				zero_head = 0;
    24e8:	2200      	movs	r2, #0
    24ea:	e507      	b.n	1efc <z_prf+0x270>
    24ec:	ab17      	add	r3, sp, #92	; 0x5c
    24ee:	9a08      	ldr	r2, [sp, #32]
    24f0:	e504      	b.n	1efc <z_prf+0x270>
    24f2:	e9cd 3207 	strd	r3, r2, [sp, #28]
					PUTC(' ');
    24f6:	9904      	ldr	r1, [sp, #16]
    24f8:	9b01      	ldr	r3, [sp, #4]
    24fa:	2020      	movs	r0, #32
    24fc:	4798      	blx	r3
    24fe:	3001      	adds	r0, #1
    2500:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    2504:	f43f abd8 	beq.w	1cb8 <z_prf+0x2c>
				while (width-- > 0) {
    2508:	f11b 3bff 	adds.w	fp, fp, #4294967295	; 0xffffffff
    250c:	d2f1      	bcs.n	24f2 <z_prf+0x866>
				count += width;
    250e:	9900      	ldr	r1, [sp, #0]
    2510:	4421      	add	r1, r4
    2512:	9100      	str	r1, [sp, #0]
				while (width-- > 0) {
    2514:	465c      	mov	r4, fp
    2516:	e4fb      	b.n	1f10 <z_prf+0x284>
    2518:	46a3      	mov	fp, r4
    251a:	e7f5      	b.n	2508 <z_prf+0x87c>
				PUTC(*cptr++);
    251c:	f813 0b01 	ldrb.w	r0, [r3], #1
    2520:	9307      	str	r3, [sp, #28]
    2522:	9904      	ldr	r1, [sp, #16]
    2524:	9b01      	ldr	r3, [sp, #4]
    2526:	9208      	str	r2, [sp, #32]
    2528:	4798      	blx	r3
    252a:	3001      	adds	r0, #1
    252c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    2530:	f47f acf0 	bne.w	1f14 <z_prf+0x288>
    2534:	f7ff bbc0 	b.w	1cb8 <z_prf+0x2c>
    2538:	33333332 	.word	0x33333332
				PUTC('0');
    253c:	9904      	ldr	r1, [sp, #16]
    253e:	9b01      	ldr	r3, [sp, #4]
    2540:	9207      	str	r2, [sp, #28]
    2542:	2030      	movs	r0, #48	; 0x30
    2544:	4798      	blx	r3
    2546:	3001      	adds	r0, #1
    2548:	9a07      	ldr	r2, [sp, #28]
    254a:	f47f ace6 	bne.w	1f1a <z_prf+0x28e>
    254e:	f7ff bbb3 	b.w	1cb8 <z_prf+0x2c>
					PUTC(c);
    2552:	9904      	ldr	r1, [sp, #16]
    2554:	9b01      	ldr	r3, [sp, #4]
    2556:	4798      	blx	r3
    2558:	3001      	adds	r0, #1
    255a:	f43f abad 	beq.w	1cb8 <z_prf+0x2c>
					c = *++cptr;
    255e:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
    2562:	e4e7      	b.n	1f34 <z_prf+0x2a8>
					PUTC('0');
    2564:	9904      	ldr	r1, [sp, #16]
    2566:	9b01      	ldr	r3, [sp, #4]
    2568:	2030      	movs	r0, #48	; 0x30
    256a:	4798      	blx	r3
    256c:	3001      	adds	r0, #1
    256e:	f47f ace9 	bne.w	1f44 <z_prf+0x2b8>
    2572:	f7ff bba1 	b.w	1cb8 <z_prf+0x2c>
					PUTC('0');
    2576:	9904      	ldr	r1, [sp, #16]
    2578:	9b01      	ldr	r3, [sp, #4]
    257a:	2030      	movs	r0, #48	; 0x30
    257c:	4798      	blx	r3
    257e:	3001      	adds	r0, #1
    2580:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    2584:	f47f acf6 	bne.w	1f74 <z_prf+0x2e8>
    2588:	f7ff bb96 	b.w	1cb8 <z_prf+0x2c>
					PUTC(c);
    258c:	9904      	ldr	r1, [sp, #16]
    258e:	9b01      	ldr	r3, [sp, #4]
    2590:	4798      	blx	r3
    2592:	3001      	adds	r0, #1
    2594:	f43f ab90 	beq.w	1cb8 <z_prf+0x2c>
					c = *++cptr;
    2598:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
    259c:	e4f4      	b.n	1f88 <z_prf+0x2fc>
					PUTC('0');
    259e:	9904      	ldr	r1, [sp, #16]
    25a0:	9b01      	ldr	r3, [sp, #4]
    25a2:	2030      	movs	r0, #48	; 0x30
    25a4:	4798      	blx	r3
    25a6:	3001      	adds	r0, #1
    25a8:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    25ac:	f47f acf7 	bne.w	1f9e <z_prf+0x312>
    25b0:	f7ff bb82 	b.w	1cb8 <z_prf+0x2c>
				PUTC(*cptr++);
    25b4:	9904      	ldr	r1, [sp, #16]
    25b6:	f81b 0b01 	ldrb.w	r0, [fp], #1
    25ba:	9b01      	ldr	r3, [sp, #4]
    25bc:	4798      	blx	r3
    25be:	3001      	adds	r0, #1
    25c0:	f43f ab7a 	beq.w	1cb8 <z_prf+0x2c>
    25c4:	eba6 030b 	sub.w	r3, r6, fp
			while (clen-- > 0) {
    25c8:	2b00      	cmp	r3, #0
    25ca:	dcf3      	bgt.n	25b4 <z_prf+0x928>
			count += clen;
    25cc:	9b00      	ldr	r3, [sp, #0]
    25ce:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
    25d0:	2c00      	cmp	r4, #0
			count += clen;
    25d2:	4413      	add	r3, r2
    25d4:	9300      	str	r3, [sp, #0]
			if (width > 0) {
    25d6:	f77f af20 	ble.w	241a <z_prf+0x78e>
    25da:	4625      	mov	r5, r4
    25dc:	e006      	b.n	25ec <z_prf+0x960>
					PUTC(' ');
    25de:	9904      	ldr	r1, [sp, #16]
    25e0:	9b01      	ldr	r3, [sp, #4]
    25e2:	2020      	movs	r0, #32
    25e4:	4798      	blx	r3
    25e6:	3001      	adds	r0, #1
    25e8:	f43f ab66 	beq.w	1cb8 <z_prf+0x2c>
				while (width-- > 0) {
    25ec:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    25f0:	d2f5      	bcs.n	25de <z_prf+0x952>
				count += width;
    25f2:	9b00      	ldr	r3, [sp, #0]
    25f4:	4423      	add	r3, r4
    25f6:	9300      	str	r3, [sp, #0]
    25f8:	e70f      	b.n	241a <z_prf+0x78e>
    25fa:	bf00      	nop

000025fc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    25fc:	4b01      	ldr	r3, [pc, #4]	; (2604 <__stdout_hook_install+0x8>)
    25fe:	6018      	str	r0, [r3, #0]
}
    2600:	4770      	bx	lr
    2602:	bf00      	nop
    2604:	200017b8 	.word	0x200017b8

00002608 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    2608:	b40c      	push	{r2, r3}
    260a:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    260c:	b909      	cbnz	r1, 2612 <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    260e:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
    2612:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    2616:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    2618:	9a06      	ldr	r2, [sp, #24]
    261a:	4806      	ldr	r0, [pc, #24]	; (2634 <snprintf+0x2c>)
	va_start(vargs, format);
    261c:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    261e:	a902      	add	r1, sp, #8
    2620:	f7ff fb34 	bl	1c8c <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    2624:	9b02      	ldr	r3, [sp, #8]
    2626:	2200      	movs	r2, #0
    2628:	701a      	strb	r2, [r3, #0]
	return r;
}
    262a:	b005      	add	sp, #20
    262c:	f85d eb04 	ldr.w	lr, [sp], #4
    2630:	b002      	add	sp, #8
    2632:	4770      	bx	lr
    2634:	00004ca3 	.word	0x00004ca3

00002638 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    2638:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    263a:	4b09      	ldr	r3, [pc, #36]	; (2660 <gpio_nrfx_init+0x28>)
    263c:	781a      	ldrb	r2, [r3, #0]
    263e:	b96a      	cbnz	r2, 265c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    2640:	2101      	movs	r1, #1
    2642:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    2644:	2006      	movs	r0, #6
    2646:	2105      	movs	r1, #5
    2648:	f7fe fe8e 	bl	1368 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
    264c:	2006      	movs	r0, #6
    264e:	f7fe fe7b 	bl	1348 <z_arch_irq_enable>
    return ((uint32_t)NRF_GPIOTE + event);
}

__STATIC_INLINE void nrf_gpiote_int_enable(uint32_t mask)
{
    NRF_GPIOTE->INTENSET = mask;
    2652:	4b04      	ldr	r3, [pc, #16]	; (2664 <gpio_nrfx_init+0x2c>)
    2654:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2658:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    265c:	2000      	movs	r0, #0
    265e:	bd08      	pop	{r3, pc}
    2660:	200002c8 	.word	0x200002c8
    2664:	40006000 	.word	0x40006000

00002668 <gpiote_event_handler>:
{
    2668:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
    266c:	4f4d      	ldr	r7, [pc, #308]	; (27a4 <gpiote_event_handler+0x13c>)
    266e:	683d      	ldr	r5, [r7, #0]
	if (port_event) {
    2670:	2d01      	cmp	r5, #1
    2672:	d166      	bne.n	2742 <gpiote_event_handler+0xda>
	struct gpio_nrfx_data *data = get_port_data(port);
    2674:	4a4c      	ldr	r2, [pc, #304]	; (27a8 <gpiote_event_handler+0x140>)
    2676:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
    2678:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    267a:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
    267c:	f8d2 8008 	ldr.w	r8, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
    2680:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
    2684:	400a      	ands	r2, r1
	out &= ~data->trig_edge & ~data->double_edge;
    2686:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
    268a:	4301      	orrs	r1, r0
    268c:	ea22 0201 	bic.w	r2, r2, r1
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    2690:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    2694:	691b      	ldr	r3, [r3, #16]
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
    2696:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
    269a:	405c      	eors	r4, r3
    269c:	404c      	eors	r4, r1
	u32_t out = pin_states & level_pins;
    269e:	ea22 0404 	bic.w	r4, r2, r4
	u32_t bit = 1U << pin;
    26a2:	462e      	mov	r6, r5
	u32_t pin = 0U;
    26a4:	f04f 0900 	mov.w	r9, #0
	while (level_pins) {
    26a8:	2a00      	cmp	r2, #0
    26aa:	d139      	bne.n	2720 <gpiote_event_handler+0xb8>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    26ac:	603a      	str	r2, [r7, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    26ae:	683b      	ldr	r3, [r7, #0]
    26b0:	9300      	str	r3, [sp, #0]
    (void)dummy;
    26b2:	9b00      	ldr	r3, [sp, #0]
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
    26b4:	4e3d      	ldr	r6, [pc, #244]	; (27ac <gpiote_event_handler+0x144>)
	u32_t fired_triggers[GPIO_COUNT] = {0};
    26b6:	2300      	movs	r3, #0
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
    26b8:	2701      	movs	r7, #1
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    26ba:	469c      	mov	ip, r3
    return (NRF_GPIOTE->INTENSET & mask);
    26bc:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
    26c0:	fa07 f103 	lsl.w	r1, r7, r3
    26c4:	4211      	tst	r1, r2
    26c6:	d014      	beq.n	26f2 <gpiote_event_handler+0x8a>
    return ((uint32_t)NRF_GPIOTE + event);
    26c8:	009a      	lsls	r2, r3, #2
    26ca:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    26ce:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
    26d2:	6811      	ldr	r1, [r2, #0]
    26d4:	2901      	cmp	r1, #1
    26d6:	d10c      	bne.n	26f2 <gpiote_event_handler+0x8a>
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    26d8:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    26dc:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    26e0:	f8c2 c000 	str.w	ip, [r2]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    26e4:	6812      	ldr	r2, [r2, #0]
    26e6:	9201      	str	r2, [sp, #4]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    26e8:	f3c0 2004 	ubfx	r0, r0, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    26ec:	4081      	lsls	r1, r0
    (void)dummy;
    26ee:	9a01      	ldr	r2, [sp, #4]
    26f0:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    26f2:	3301      	adds	r3, #1
    26f4:	2b08      	cmp	r3, #8
    26f6:	d1e1      	bne.n	26bc <gpiote_event_handler+0x54>
	if (fired_triggers[0]) {
    26f8:	bb2c      	cbnz	r4, 2746 <gpiote_event_handler+0xde>
	if (port_event) {
    26fa:	2d01      	cmp	r5, #1
    26fc:	d10d      	bne.n	271a <gpiote_event_handler+0xb2>
	const struct gpio_nrfx_data *data = get_port_data(port);
    26fe:	4b2a      	ldr	r3, [pc, #168]	; (27a8 <gpiote_event_handler+0x140>)
    2700:	689c      	ldr	r4, [r3, #8]
	return port->config->config_info;
    2702:	681b      	ldr	r3, [r3, #0]
    2704:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    2706:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    270a:	401a      	ands	r2, r3
	out &= ~data->trig_edge & ~data->double_edge;
    270c:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
    2710:	430b      	orrs	r3, r1
    2712:	ea22 0203 	bic.w	r2, r2, r3
	u32_t pin = 0U;
    2716:	2700      	movs	r7, #0
	while (level_pins) {
    2718:	bb62      	cbnz	r2, 2774 <gpiote_event_handler+0x10c>
}
    271a:	b003      	add	sp, #12
    271c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
    2720:	4232      	tst	r2, r6
    2722:	d00a      	beq.n	273a <gpiote_event_handler+0xd2>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2724:	f898 3004 	ldrb.w	r3, [r8, #4]
    2728:	f009 001f 	and.w	r0, r9, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    272c:	2100      	movs	r1, #0
    272e:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    2732:	f002 fac3 	bl	4cbc <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    2736:	ea22 0206 	bic.w	r2, r2, r6
		++pin;
    273a:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    273e:	0076      	lsls	r6, r6, #1
    2740:	e7b2      	b.n	26a8 <gpiote_event_handler+0x40>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    2742:	2400      	movs	r4, #0
    2744:	e7b6      	b.n	26b4 <gpiote_event_handler+0x4c>
	struct gpio_nrfx_data *data = get_port_data(port);
    2746:	4f18      	ldr	r7, [pc, #96]	; (27a8 <gpiote_event_handler+0x140>)
    2748:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    274c:	f8d8 1000 	ldr.w	r1, [r8]
    2750:	2900      	cmp	r1, #0
    2752:	d0d2      	beq.n	26fa <gpiote_event_handler+0x92>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2754:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
    2756:	f8d8 300c 	ldr.w	r3, [r8, #12]
    275a:	688a      	ldr	r2, [r1, #8]
    275c:	4023      	ands	r3, r4
    275e:	4213      	tst	r3, r2
    2760:	d003      	beq.n	276a <gpiote_event_handler+0x102>
			cb->handler(port, cb, pins);
    2762:	684b      	ldr	r3, [r1, #4]
    2764:	4622      	mov	r2, r4
    2766:	4638      	mov	r0, r7
    2768:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    276a:	2e00      	cmp	r6, #0
    276c:	d0c5      	beq.n	26fa <gpiote_event_handler+0x92>
    276e:	4631      	mov	r1, r6
    2770:	6836      	ldr	r6, [r6, #0]
    2772:	e7f0      	b.n	2756 <gpiote_event_handler+0xee>
		if (level_pins & bit) {
    2774:	4215      	tst	r5, r2
    2776:	d012      	beq.n	279e <gpiote_event_handler+0x136>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    2778:	69e1      	ldr	r1, [r4, #28]
    277a:	6923      	ldr	r3, [r4, #16]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    277c:	f896 c004 	ldrb.w	ip, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    2780:	404b      	eors	r3, r1
    2782:	40fb      	lsrs	r3, r7
		return NRF_GPIO_PIN_SENSE_HIGH;
    2784:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2788:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    278c:	bf0c      	ite	eq
    278e:	2103      	moveq	r1, #3
    2790:	2102      	movne	r1, #2
    2792:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
    2796:	f002 fa91 	bl	4cbc <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    279a:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
    279e:	3701      	adds	r7, #1
		bit <<= 1;
    27a0:	006d      	lsls	r5, r5, #1
    27a2:	e7b9      	b.n	2718 <gpiote_event_handler+0xb0>
    27a4:	4000617c 	.word	0x4000617c
    27a8:	20001858 	.word	0x20001858
    27ac:	40006000 	.word	0x40006000

000027b0 <gpiote_pin_int_cfg>:
{
    27b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return port->config->config_info;
    27b2:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
    27b4:	6886      	ldr	r6, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    27b6:	689b      	ldr	r3, [r3, #8]
    27b8:	f001 041f 	and.w	r4, r1, #31
{
    27bc:	460d      	mov	r5, r1
    return (NRF_GPIOTE->INTENSET & mask);
    27be:	494e      	ldr	r1, [pc, #312]	; (28f8 <gpiote_pin_int_cfg+0x148>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    27c0:	791b      	ldrb	r3, [r3, #4]
    27c2:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
    27c6:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
    27ca:	b2d2      	uxtb	r2, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    27cc:	2300      	movs	r3, #0
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    27ce:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    27d2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    27d6:	f3c0 2004 	ubfx	r0, r0, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
    27da:	4284      	cmp	r4, r0
    27dc:	d170      	bne.n	28c0 <gpiote_pin_int_cfg+0x110>
		    && (intenset & BIT(i))) {
    27de:	fa22 f003 	lsr.w	r0, r2, r3
    27e2:	07c0      	lsls	r0, r0, #31
    27e4:	d56c      	bpl.n	28c0 <gpiote_pin_int_cfg+0x110>
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    27e6:	009a      	lsls	r2, r3, #2
    27e8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    27ec:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    27f0:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    27f4:	f020 0001 	bic.w	r0, r0, #1
    27f8:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
    27fc:	2201      	movs	r2, #1
    27fe:	fa02 f303 	lsl.w	r3, r2, r3
    NRF_GPIOTE->INTENCLR = mask;
    2802:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    2806:	4620      	mov	r0, r4
    2808:	2100      	movs	r1, #0
    280a:	f002 fa57 	bl	4cbc <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    280e:	68b0      	ldr	r0, [r6, #8]
    2810:	40e8      	lsrs	r0, r5
    2812:	f010 0001 	ands.w	r0, r0, #1
    2816:	d051      	beq.n	28bc <gpiote_pin_int_cfg+0x10c>
    2818:	68f0      	ldr	r0, [r6, #12]
    281a:	40e8      	lsrs	r0, r5
    281c:	f010 0001 	ands.w	r0, r0, #1
    2820:	d04c      	beq.n	28bc <gpiote_pin_int_cfg+0x10c>
		if (data->trig_edge & BIT(pin)) {
    2822:	6970      	ldr	r0, [r6, #20]
    2824:	40e8      	lsrs	r0, r5
    2826:	f010 0201 	ands.w	r2, r0, #1
    282a:	d055      	beq.n	28d8 <gpiote_pin_int_cfg+0x128>
			if (data->double_edge & BIT(pin)) {
    282c:	69b3      	ldr	r3, [r6, #24]
    282e:	40eb      	lsrs	r3, r5
    2830:	07db      	lsls	r3, r3, #31
    2832:	d449      	bmi.n	28c8 <gpiote_pin_int_cfg+0x118>
			} else if (((data->active_level & BIT(pin)) != 0U)
    2834:	6933      	ldr	r3, [r6, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    2836:	69f2      	ldr	r2, [r6, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
    2838:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    283a:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
    283e:	f003 0301 	and.w	r3, r3, #1
    2842:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    2846:	42ab      	cmp	r3, r5
    2848:	bf14      	ite	ne
    284a:	2501      	movne	r5, #1
    284c:	2502      	moveq	r5, #2
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    284e:	4e2a      	ldr	r6, [pc, #168]	; (28f8 <gpiote_pin_int_cfg+0x148>)
    2850:	2100      	movs	r1, #0
    2852:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    2856:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
    285a:	f010 0003 	ands.w	r0, r0, #3
    285e:	d135      	bne.n	28cc <gpiote_pin_int_cfg+0x11c>
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2860:	008b      	lsls	r3, r1, #2
    2862:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2866:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    286a:	0224      	lsls	r4, r4, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    286c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    2870:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
    2874:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    2878:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    287c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    2880:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    2884:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    2888:	4315      	orrs	r5, r2
			nrf_gpiote_events_t evt =
    288a:	f101 0240 	add.w	r2, r1, #64	; 0x40
    288e:	0092      	lsls	r2, r2, #2
    return ((uint32_t)NRF_GPIOTE + event);
    2890:	b292      	uxth	r2, r2
    2892:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2896:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    289a:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    289e:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    28a0:	6812      	ldr	r2, [r2, #0]
    28a2:	9201      	str	r2, [sp, #4]
    (void)dummy;
    28a4:	9a01      	ldr	r2, [sp, #4]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    28a6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    28aa:	f042 0201 	orr.w	r2, r2, #1
    28ae:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
    28b2:	2301      	movs	r3, #1
    28b4:	fa03 f101 	lsl.w	r1, r3, r1
    NRF_GPIOTE->INTENSET = mask;
    28b8:	f8c6 1304 	str.w	r1, [r6, #772]	; 0x304
}
    28bc:	b002      	add	sp, #8
    28be:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    28c0:	3301      	adds	r3, #1
    28c2:	2b08      	cmp	r3, #8
    28c4:	d183      	bne.n	27ce <gpiote_pin_int_cfg+0x1e>
    28c6:	e79e      	b.n	2806 <gpiote_pin_int_cfg+0x56>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    28c8:	2503      	movs	r5, #3
    28ca:	e7c0      	b.n	284e <gpiote_pin_int_cfg+0x9e>
    28cc:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    28ce:	2908      	cmp	r1, #8
    28d0:	d1bf      	bne.n	2852 <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
    28d2:	f06f 0012 	mvn.w	r0, #18
    28d6:	e7f1      	b.n	28bc <gpiote_pin_int_cfg+0x10c>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    28d8:	69f1      	ldr	r1, [r6, #28]
    28da:	6933      	ldr	r3, [r6, #16]
    28dc:	404b      	eors	r3, r1
    28de:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
    28e2:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    28e6:	4620      	mov	r0, r4
    28e8:	bf0c      	ite	eq
    28ea:	2103      	moveq	r1, #3
    28ec:	2102      	movne	r1, #2
    28ee:	f002 f9e5 	bl	4cbc <nrf_gpio_cfg_sense_set>
	int res = 0;
    28f2:	4610      	mov	r0, r2
    28f4:	e7e2      	b.n	28bc <gpiote_pin_int_cfg+0x10c>
    28f6:	bf00      	nop
    28f8:	40006000 	.word	0x40006000

000028fc <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    28fc:	4802      	ldr	r0, [pc, #8]	; (2908 <pwm_nrfx_get_cycles_per_sec+0xc>)
    28fe:	2100      	movs	r1, #0
    2900:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    2904:	2000      	movs	r0, #0
    2906:	4770      	bx	lr
    2908:	00f42400 	.word	0x00f42400

0000290c <pwm_nrfx_init>:
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(struct device *dev)
{
	const struct pwm_nrfx_config *config = dev->config->config_info;
    290c:	6803      	ldr	r3, [r0, #0]
{
    290e:	b510      	push	{r4, lr}
    2910:	4604      	mov	r4, r0
	const struct pwm_nrfx_config *config = dev->config->config_info;
    2912:	6898      	ldr	r0, [r3, #8]

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    2914:	2200      	movs	r2, #0
    2916:	f100 0108 	add.w	r1, r0, #8
    291a:	f000 fb91 	bl	3040 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL);
	if (result != NRFX_SUCCESS) {
    291e:	4b0c      	ldr	r3, [pc, #48]	; (2950 <pwm_nrfx_init+0x44>)
    2920:	4298      	cmp	r0, r3
    2922:	d012      	beq.n	294a <pwm_nrfx_init+0x3e>
		LOG_ERR("Failed to initialize device: %s", dev->config->name);
    2924:	2301      	movs	r3, #1
    2926:	f04f 0200 	mov.w	r2, #0
    292a:	f363 0207 	bfi	r2, r3, #0, #8
    292e:	4909      	ldr	r1, [pc, #36]	; (2954 <pwm_nrfx_init+0x48>)
    2930:	4b09      	ldr	r3, [pc, #36]	; (2958 <pwm_nrfx_init+0x4c>)
    2932:	480a      	ldr	r0, [pc, #40]	; (295c <pwm_nrfx_init+0x50>)
    2934:	1a5b      	subs	r3, r3, r1
    2936:	08db      	lsrs	r3, r3, #3
    2938:	f363 128f 	bfi	r2, r3, #6, #10
    293c:	6823      	ldr	r3, [r4, #0]
    293e:	6819      	ldr	r1, [r3, #0]
    2940:	f001 fd66 	bl	4410 <log_1>
		return -EBUSY;
    2944:	f06f 000f 	mvn.w	r0, #15
	}

	return 0;
}
    2948:	bd10      	pop	{r4, pc}
	return 0;
    294a:	2000      	movs	r0, #0
    294c:	e7fc      	b.n	2948 <pwm_nrfx_init+0x3c>
    294e:	bf00      	nop
    2950:	0bad0000 	.word	0x0bad0000
    2954:	000054f8 	.word	0x000054f8
    2958:	00005520 	.word	0x00005520
    295c:	00005bd4 	.word	0x00005bd4

00002960 <pwm_nrfx_pin_set>:
{
    2960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2964:	461f      	mov	r7, r3
	const struct pwm_nrfx_config *config = dev->config->config_info;
    2966:	6803      	ldr	r3, [r0, #0]
	struct pwm_nrfx_data *data = dev->driver_data;
    2968:	6885      	ldr	r5, [r0, #8]
	const struct pwm_nrfx_config *config = dev->config->config_info;
    296a:	689e      	ldr	r6, [r3, #8]
{
    296c:	4614      	mov	r4, r2
    296e:	4689      	mov	r9, r1
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    2970:	1df2      	adds	r2, r6, #7
    2972:	f04f 0800 	mov.w	r8, #0
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
    2976:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    297a:	2bff      	cmp	r3, #255	; 0xff
    297c:	d004      	beq.n	2988 <pwm_nrfx_pin_set+0x28>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
    297e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2982:	4599      	cmp	r9, r3
    2984:	f000 808e 	beq.w	2aa4 <pwm_nrfx_pin_set+0x144>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    2988:	f108 0801 	add.w	r8, r8, #1
    298c:	fa5f f888 	uxtb.w	r8, r8
    2990:	f1b8 0f04 	cmp.w	r8, #4
    2994:	d1ef      	bne.n	2976 <pwm_nrfx_pin_set+0x16>
		LOG_ERR("PWM pin %d not enabled through DTS configuration.",
    2996:	2301      	movs	r3, #1
    2998:	f04f 0200 	mov.w	r2, #0
    299c:	f363 0207 	bfi	r2, r3, #0, #8
    29a0:	495f      	ldr	r1, [pc, #380]	; (2b20 <pwm_nrfx_pin_set+0x1c0>)
    29a2:	4b60      	ldr	r3, [pc, #384]	; (2b24 <pwm_nrfx_pin_set+0x1c4>)
    29a4:	4860      	ldr	r0, [pc, #384]	; (2b28 <pwm_nrfx_pin_set+0x1c8>)
    29a6:	1a5b      	subs	r3, r3, r1
    29a8:	08db      	lsrs	r3, r3, #3
    29aa:	f363 128f 	bfi	r2, r3, #6, #10
    29ae:	4649      	mov	r1, r9
    29b0:	e0a4      	b.n	2afc <pwm_nrfx_pin_set+0x19c>
	if (period_cycles > PWM_COUNTERTOP_COUNTERTOP_Msk) {
    29b2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    29b6:	d33a      	bcc.n	2a2e <pwm_nrfx_pin_set+0xce>
    29b8:	2301      	movs	r3, #1
			u32_t new_countertop = period_cycles >> prescaler;
    29ba:	fa24 f203 	lsr.w	r2, r4, r3
			if (new_countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
    29be:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    29c2:	b2d9      	uxtb	r1, r3
    29c4:	d220      	bcs.n	2a08 <pwm_nrfx_pin_set+0xa8>
				data->prescaler = prescaler;
    29c6:	73a9      	strb	r1, [r5, #14]
				data->countertop = new_countertop;
    29c8:	81aa      	strh	r2, [r5, #12]
	nrf_pwm_configure(pwm_instance,
    29ca:	7bb2      	ldrb	r2, [r6, #14]
    29cc:	89ab      	ldrh	r3, [r5, #12]
                                       nrf_pwm_mode_t mode,
                                       uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
    29ce:	7ba9      	ldrb	r1, [r5, #14]
		data->period_cycles = period_cycles;
    29d0:	602c      	str	r4, [r5, #0]
    29d2:	f8ca 150c 	str.w	r1, [sl, #1292]	; 0x50c
    p_reg->MODE       = mode;
    29d6:	f8ca 2504 	str.w	r2, [sl, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    29da:	f8ca 3508 	str.w	r3, [sl, #1288]	; 0x508
	if (pulse_cycles > period_cycles) {
    29de:	42a7      	cmp	r7, r4
    29e0:	d929      	bls.n	2a36 <pwm_nrfx_pin_set+0xd6>
		LOG_ERR("Invalid pulse_cycles %d, > period_cycles %d.",
    29e2:	2201      	movs	r2, #1
    29e4:	f04f 0300 	mov.w	r3, #0
    29e8:	f362 0307 	bfi	r3, r2, #0, #8
    29ec:	494c      	ldr	r1, [pc, #304]	; (2b20 <pwm_nrfx_pin_set+0x1c0>)
    29ee:	4a4d      	ldr	r2, [pc, #308]	; (2b24 <pwm_nrfx_pin_set+0x1c4>)
    29f0:	484e      	ldr	r0, [pc, #312]	; (2b2c <pwm_nrfx_pin_set+0x1cc>)
    29f2:	1a52      	subs	r2, r2, r1
    29f4:	08d2      	lsrs	r2, r2, #3
    29f6:	f362 138f 	bfi	r3, r2, #6, #10
    29fa:	4639      	mov	r1, r7
    29fc:	4622      	mov	r2, r4
    29fe:	f001 fd1b 	bl	4438 <log_2>
		return -EINVAL;
    2a02:	f06f 0015 	mvn.w	r0, #21
    2a06:	e043      	b.n	2a90 <pwm_nrfx_pin_set+0x130>
    2a08:	3301      	adds	r3, #1
		for (u8_t prescaler = 1;
    2a0a:	2b08      	cmp	r3, #8
    2a0c:	d1d5      	bne.n	29ba <pwm_nrfx_pin_set+0x5a>
			LOG_ERR("Prescaler for period_cycles %d not found.\n",
    2a0e:	2301      	movs	r3, #1
    2a10:	f04f 0200 	mov.w	r2, #0
    2a14:	f363 0207 	bfi	r2, r3, #0, #8
    2a18:	4941      	ldr	r1, [pc, #260]	; (2b20 <pwm_nrfx_pin_set+0x1c0>)
    2a1a:	4b42      	ldr	r3, [pc, #264]	; (2b24 <pwm_nrfx_pin_set+0x1c4>)
    2a1c:	4844      	ldr	r0, [pc, #272]	; (2b30 <pwm_nrfx_pin_set+0x1d0>)
    2a1e:	1a5b      	subs	r3, r3, r1
    2a20:	08db      	lsrs	r3, r3, #3
    2a22:	f363 128f 	bfi	r2, r3, #6, #10
    2a26:	4621      	mov	r1, r4
    2a28:	f001 fcf2 	bl	4410 <log_1>
	if (ret) {
    2a2c:	e059      	b.n	2ae2 <pwm_nrfx_pin_set+0x182>
		data->prescaler = 0U;
    2a2e:	2300      	movs	r3, #0
    2a30:	73ab      	strb	r3, [r5, #14]
		data->countertop = period_cycles;
    2a32:	81ac      	strh	r4, [r5, #12]
    2a34:	e7c9      	b.n	29ca <pwm_nrfx_pin_set+0x6a>
	data->current[channel] = (
    2a36:	eb05 0148 	add.w	r1, r5, r8, lsl #1
		| (pulse_cycles >> data->prescaler));
    2a3a:	7baa      	ldrb	r2, [r5, #14]
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
    2a3c:	888b      	ldrh	r3, [r1, #4]
		| (pulse_cycles >> data->prescaler));
    2a3e:	fa27 f202 	lsr.w	r2, r7, r2
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
    2a42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
    2a46:	4313      	orrs	r3, r2
	data->current[channel] = (
    2a48:	808b      	strh	r3, [r1, #4]
	if (pulse_cycles == 0U || pulse_cycles == period_cycles) {
    2a4a:	b10f      	cbz	r7, 2a50 <pwm_nrfx_pin_set+0xf0>
    2a4c:	42a7      	cmp	r7, r4
    2a4e:	d10d      	bne.n	2a6c <pwm_nrfx_pin_set+0x10c>
			config->initial_config.output_pins[channel]
    2a50:	44b0      	add	r8, r6
    2a52:	f998 3008 	ldrsb.w	r3, [r8, #8]
			&& !channel_inverted_state;
    2a56:	2f00      	cmp	r7, #0
    2a58:	d15d      	bne.n	2b16 <pwm_nrfx_pin_set+0x1b6>
			&& channel_inverted_state;
    2a5a:	2c00      	cmp	r4, #0
    2a5c:	d151      	bne.n	2b02 <pwm_nrfx_pin_set+0x1a2>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2a5e:	2101      	movs	r1, #1
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    2a60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2a64:	fa01 f109 	lsl.w	r1, r1, r9
    p_reg->OUTCLR = clr_mask;
    2a68:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	for (channel = 0U; channel < NRF_PWM_CHANNEL_COUNT; channel++) {
    2a6c:	1d2a      	adds	r2, r5, #4
    2a6e:	f105 010c 	add.w	r1, r5, #12
			data->current[channel]
    2a72:	f832 3b02 	ldrh.w	r3, [r2], #2
		u16_t channel_pulse_cycle =
    2a76:	f3c3 030e 	ubfx	r3, r3, #0, #15
		if (channel_pulse_cycle > 0
    2a7a:	b113      	cbz	r3, 2a82 <pwm_nrfx_pin_set+0x122>
		    && channel_pulse_cycle < data->countertop) {
    2a7c:	89a8      	ldrh	r0, [r5, #12]
    2a7e:	4298      	cmp	r0, r3
    2a80:	d808      	bhi.n	2a94 <pwm_nrfx_pin_set+0x134>
	for (channel = 0U; channel < NRF_PWM_CHANNEL_COUNT; channel++) {
    2a82:	4291      	cmp	r1, r2
    2a84:	d1f5      	bne.n	2a72 <pwm_nrfx_pin_set+0x112>
		nrfx_pwm_stop(&config->pwm, false);
    2a86:	2100      	movs	r1, #0
    2a88:	4630      	mov	r0, r6
    2a8a:	f002 fa91 	bl	4fb0 <nrfx_pwm_stop>
	return 0;
    2a8e:	2000      	movs	r0, #0
}
    2a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrfx_pwm_simple_playback(&config->pwm,
    2a94:	2302      	movs	r3, #2
    2a96:	2201      	movs	r2, #1
    2a98:	f106 0114 	add.w	r1, r6, #20
    2a9c:	4630      	mov	r0, r6
    2a9e:	f000 fb4f 	bl	3140 <nrfx_pwm_simple_playback>
    2aa2:	e7f4      	b.n	2a8e <pwm_nrfx_pin_set+0x12e>
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    2aa4:	7bb3      	ldrb	r3, [r6, #14]
    2aa6:	2b01      	cmp	r3, #1
    2aa8:	d101      	bne.n	2aae <pwm_nrfx_pin_set+0x14e>
		period_cycles /= 2;
    2aaa:	0864      	lsrs	r4, r4, #1
		pulse_cycles /= 2;
    2aac:	087f      	lsrs	r7, r7, #1
	if (!nrfx_pwm_is_stopped(&config->pwm)) {
    2aae:	4630      	mov	r0, r6
	NRF_PWM_Type *pwm_instance = config->pwm.p_registers;
    2ab0:	f8d6 a000 	ldr.w	sl, [r6]
	if (!nrfx_pwm_is_stopped(&config->pwm)) {
    2ab4:	f000 fb7e 	bl	31b4 <nrfx_pwm_is_stopped>
    2ab8:	2800      	cmp	r0, #0
    2aba:	f47f af7a 	bne.w	29b2 <pwm_nrfx_pin_set+0x52>
		if (period_cycles == data->period_cycles) {
    2abe:	682a      	ldr	r2, [r5, #0]
    2ac0:	4294      	cmp	r4, r2
    2ac2:	d08c      	beq.n	29de <pwm_nrfx_pin_set+0x7e>
		LOG_ERR("Fail:requested period cycles:%d, != used %d\n",
    2ac4:	2101      	movs	r1, #1
    2ac6:	f04f 0300 	mov.w	r3, #0
    2aca:	f361 0307 	bfi	r3, r1, #0, #8
    2ace:	4814      	ldr	r0, [pc, #80]	; (2b20 <pwm_nrfx_pin_set+0x1c0>)
    2ad0:	4914      	ldr	r1, [pc, #80]	; (2b24 <pwm_nrfx_pin_set+0x1c4>)
    2ad2:	1a09      	subs	r1, r1, r0
    2ad4:	08c9      	lsrs	r1, r1, #3
    2ad6:	f361 138f 	bfi	r3, r1, #6, #10
    2ada:	4816      	ldr	r0, [pc, #88]	; (2b34 <pwm_nrfx_pin_set+0x1d4>)
    2adc:	4621      	mov	r1, r4
    2ade:	f001 fcab 	bl	4438 <log_2>
		LOG_ERR("Incompatible period %d", period_cycles);
    2ae2:	2301      	movs	r3, #1
    2ae4:	f04f 0200 	mov.w	r2, #0
    2ae8:	f363 0207 	bfi	r2, r3, #0, #8
    2aec:	490c      	ldr	r1, [pc, #48]	; (2b20 <pwm_nrfx_pin_set+0x1c0>)
    2aee:	4b0d      	ldr	r3, [pc, #52]	; (2b24 <pwm_nrfx_pin_set+0x1c4>)
    2af0:	4811      	ldr	r0, [pc, #68]	; (2b38 <pwm_nrfx_pin_set+0x1d8>)
    2af2:	1a5b      	subs	r3, r3, r1
    2af4:	08db      	lsrs	r3, r3, #3
    2af6:	f363 128f 	bfi	r2, r3, #6, #10
    2afa:	4621      	mov	r1, r4
		LOG_ERR("PWM pin %d not enabled through DTS configuration.",
    2afc:	f001 fc88 	bl	4410 <log_1>
    2b00:	e77f      	b.n	2a02 <pwm_nrfx_pin_set+0xa2>
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
    2b02:	2b00      	cmp	r3, #0
    2b04:	daab      	bge.n	2a5e <pwm_nrfx_pin_set+0xfe>
    p_reg->OUTSET = set_mask;
    2b06:	2101      	movs	r1, #1
    2b08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    2b0c:	fa01 f109 	lsl.w	r1, r1, r9
    2b10:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    2b14:	e7aa      	b.n	2a6c <pwm_nrfx_pin_set+0x10c>
			&& channel_inverted_state;
    2b16:	42a7      	cmp	r7, r4
    2b18:	d1f5      	bne.n	2b06 <pwm_nrfx_pin_set+0x1a6>
    2b1a:	2b00      	cmp	r3, #0
    2b1c:	db9f      	blt.n	2a5e <pwm_nrfx_pin_set+0xfe>
    2b1e:	e7f2      	b.n	2b06 <pwm_nrfx_pin_set+0x1a6>
    2b20:	000054f8 	.word	0x000054f8
    2b24:	00005520 	.word	0x00005520
    2b28:	00005c90 	.word	0x00005c90
    2b2c:	00005c63 	.word	0x00005c63
    2b30:	00005c21 	.word	0x00005c21
    2b34:	00005bf4 	.word	0x00005bf4
    2b38:	00005c4c 	.word	0x00005c4c

00002b3c <uart_nrfx_err_check>:
#endif
}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2b3c:	4b03      	ldr	r3, [pc, #12]	; (2b4c <uart_nrfx_err_check+0x10>)
    2b3e:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0U;

	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
    2b40:	b118      	cbz	r0, 2b4a <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    2b42:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
    2b46:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(uart0_addr);
	}

	return error;
}
    2b4a:	4770      	bx	lr
    2b4c:	40002124 	.word	0x40002124

00002b50 <uart_nrfx_configure>:

static int uart_nrfx_configure(struct device *dev,
			       const struct uart_config *cfg)
{
    2b50:	b530      	push	{r4, r5, lr}
	nrf_uart_hwfc_t hwfc;
#ifdef UART_CONFIG_STOP_Two
	bool two_stop_bits = false;
#endif

	switch (cfg->stop_bits) {
    2b52:	794b      	ldrb	r3, [r1, #5]
    2b54:	2b01      	cmp	r3, #1
    2b56:	d120      	bne.n	2b9a <uart_nrfx_configure+0x4a>
#endif
	default:
		return -ENOTSUP;
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2b58:	798b      	ldrb	r3, [r1, #6]
    2b5a:	2b03      	cmp	r3, #3
    2b5c:	d11d      	bne.n	2b9a <uart_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2b5e:	79cc      	ldrb	r4, [r1, #7]
    2b60:	b12c      	cbz	r4, 2b6e <uart_nrfx_configure+0x1e>
    2b62:	2c01      	cmp	r4, #1
    2b64:	d119      	bne.n	2b9a <uart_nrfx_configure+0x4a>
	return dev->config->config_info;
    2b66:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UART_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    2b68:	689b      	ldr	r3, [r3, #8]
    2b6a:	781b      	ldrb	r3, [r3, #0]
    2b6c:	b1ab      	cbz	r3, 2b9a <uart_nrfx_configure+0x4a>
		break;
	default:
		return -ENOTSUP;
	}

	switch (cfg->parity) {
    2b6e:	790a      	ldrb	r2, [r1, #4]
    2b70:	b112      	cbz	r2, 2b78 <uart_nrfx_configure+0x28>
    2b72:	2a02      	cmp	r2, #2
    2b74:	d111      	bne.n	2b9a <uart_nrfx_configure+0x4a>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UART_PARITY_INCLUDED;
    2b76:	220e      	movs	r2, #14
		break;
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2b78:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    2b7a:	f647 2512 	movw	r5, #31250	; 0x7a12
    2b7e:	42ab      	cmp	r3, r5
    2b80:	d05f      	beq.n	2c42 <uart_nrfx_configure+0xf2>
    2b82:	d827      	bhi.n	2bd4 <uart_nrfx_configure+0x84>
    2b84:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2b88:	d05e      	beq.n	2c48 <uart_nrfx_configure+0xf8>
    2b8a:	d812      	bhi.n	2bb2 <uart_nrfx_configure+0x62>
    2b8c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2b90:	d05c      	beq.n	2c4c <uart_nrfx_configure+0xfc>
    2b92:	d805      	bhi.n	2ba0 <uart_nrfx_configure+0x50>
    2b94:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2b98:	d05b      	beq.n	2c52 <uart_nrfx_configure+0x102>
		return -ENOTSUP;
    2b9a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    2b9e:	e04f      	b.n	2c40 <uart_nrfx_configure+0xf0>
	switch (baudrate) {
    2ba0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2ba4:	d058      	beq.n	2c58 <uart_nrfx_configure+0x108>
    2ba6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2baa:	d1f6      	bne.n	2b9a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    2bac:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2bb0:	e03b      	b.n	2c2a <uart_nrfx_configure+0xda>
	switch (baudrate) {
    2bb2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2bb6:	d052      	beq.n	2c5e <uart_nrfx_configure+0x10e>
    2bb8:	d804      	bhi.n	2bc4 <uart_nrfx_configure+0x74>
    2bba:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2bbe:	d1ec      	bne.n	2b9a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    2bc0:	4b30      	ldr	r3, [pc, #192]	; (2c84 <uart_nrfx_configure+0x134>)
    2bc2:	e032      	b.n	2c2a <uart_nrfx_configure+0xda>
	switch (baudrate) {
    2bc4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2bc8:	d04c      	beq.n	2c64 <uart_nrfx_configure+0x114>
    2bca:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2bce:	d1e4      	bne.n	2b9a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    2bd0:	4b2d      	ldr	r3, [pc, #180]	; (2c88 <uart_nrfx_configure+0x138>)
    2bd2:	e02a      	b.n	2c2a <uart_nrfx_configure+0xda>
	switch (baudrate) {
    2bd4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2bd8:	d046      	beq.n	2c68 <uart_nrfx_configure+0x118>
    2bda:	d811      	bhi.n	2c00 <uart_nrfx_configure+0xb0>
    2bdc:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    2be0:	42ab      	cmp	r3, r5
    2be2:	d043      	beq.n	2c6c <uart_nrfx_configure+0x11c>
    2be4:	d804      	bhi.n	2bf0 <uart_nrfx_configure+0xa0>
    2be6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    2bea:	d1d6      	bne.n	2b9a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    2bec:	4b27      	ldr	r3, [pc, #156]	; (2c8c <uart_nrfx_configure+0x13c>)
    2bee:	e01c      	b.n	2c2a <uart_nrfx_configure+0xda>
	switch (baudrate) {
    2bf0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2bf4:	d03d      	beq.n	2c72 <uart_nrfx_configure+0x122>
    2bf6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2bfa:	d1ce      	bne.n	2b9a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    2bfc:	4b24      	ldr	r3, [pc, #144]	; (2c90 <uart_nrfx_configure+0x140>)
    2bfe:	e014      	b.n	2c2a <uart_nrfx_configure+0xda>
	switch (baudrate) {
    2c00:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2c04:	d037      	beq.n	2c76 <uart_nrfx_configure+0x126>
    2c06:	d808      	bhi.n	2c1a <uart_nrfx_configure+0xca>
    2c08:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2c0c:	d035      	beq.n	2c7a <uart_nrfx_configure+0x12a>
    2c0e:	4d21      	ldr	r5, [pc, #132]	; (2c94 <uart_nrfx_configure+0x144>)
    2c10:	42ab      	cmp	r3, r5
    2c12:	d1c2      	bne.n	2b9a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    2c14:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2c18:	e007      	b.n	2c2a <uart_nrfx_configure+0xda>
	switch (baudrate) {
    2c1a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2c1e:	d02e      	beq.n	2c7e <uart_nrfx_configure+0x12e>
    2c20:	4d1d      	ldr	r5, [pc, #116]	; (2c98 <uart_nrfx_configure+0x148>)
    2c22:	42ab      	cmp	r3, r5
    2c24:	d1b9      	bne.n	2b9a <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    2c26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2c2a:	4d1c      	ldr	r5, [pc, #112]	; (2c9c <uart_nrfx_configure+0x14c>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    2c2c:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
    2c2e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    2c32:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		/* TODO Change this to nrfx HAL function when available */
		uart0_addr->CONFIG |=
			UART_CONFIG_STOP_Two << UART_CONFIG_STOP_Pos;
	}
#endif
	get_dev_data(dev)->uart_config = *cfg;
    2c36:	6883      	ldr	r3, [r0, #8]
    2c38:	c903      	ldmia	r1, {r0, r1}
    2c3a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2c3e:	2000      	movs	r0, #0
}
    2c40:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    2c42:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2c46:	e7f0      	b.n	2c2a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    2c48:	4b15      	ldr	r3, [pc, #84]	; (2ca0 <uart_nrfx_configure+0x150>)
    2c4a:	e7ee      	b.n	2c2a <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00027000;
    2c4c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2c50:	e7eb      	b.n	2c2a <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
    2c52:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2c56:	e7e8      	b.n	2c2a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    2c58:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2c5c:	e7e5      	b.n	2c2a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    2c5e:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    2c62:	e7e2      	b.n	2c2a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    2c64:	4b0f      	ldr	r3, [pc, #60]	; (2ca4 <uart_nrfx_configure+0x154>)
    2c66:	e7e0      	b.n	2c2a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    2c68:	4b0f      	ldr	r3, [pc, #60]	; (2ca8 <uart_nrfx_configure+0x158>)
    2c6a:	e7de      	b.n	2c2a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    2c6c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2c70:	e7db      	b.n	2c2a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    2c72:	4b0e      	ldr	r3, [pc, #56]	; (2cac <uart_nrfx_configure+0x15c>)
    2c74:	e7d9      	b.n	2c2a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    2c76:	4b0e      	ldr	r3, [pc, #56]	; (2cb0 <uart_nrfx_configure+0x160>)
    2c78:	e7d7      	b.n	2c2a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    2c7a:	4b0e      	ldr	r3, [pc, #56]	; (2cb4 <uart_nrfx_configure+0x164>)
    2c7c:	e7d5      	b.n	2c2a <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    2c7e:	4b0e      	ldr	r3, [pc, #56]	; (2cb8 <uart_nrfx_configure+0x168>)
    2c80:	e7d3      	b.n	2c2a <uart_nrfx_configure+0xda>
    2c82:	bf00      	nop
    2c84:	00275000 	.word	0x00275000
    2c88:	0075f000 	.word	0x0075f000
    2c8c:	009d5000 	.word	0x009d5000
    2c90:	013a9000 	.word	0x013a9000
    2c94:	0003d090 	.word	0x0003d090
    2c98:	000f4240 	.word	0x000f4240
    2c9c:	40002000 	.word	0x40002000
    2ca0:	0013b000 	.word	0x0013b000
    2ca4:	004ea000 	.word	0x004ea000
    2ca8:	01d7e000 	.word	0x01d7e000
    2cac:	00ebf000 	.word	0x00ebf000
    2cb0:	075f7000 	.word	0x075f7000
    2cb4:	03afb000 	.word	0x03afb000
    2cb8:	0ebed000 	.word	0x0ebed000

00002cbc <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2cbc:	4b08      	ldr	r3, [pc, #32]	; (2ce0 <uart_nrfx_poll_in+0x24>)
    2cbe:	681a      	ldr	r2, [r3, #0]
{
    2cc0:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    2cc2:	b152      	cbz	r2, 2cda <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2cc4:	2000      	movs	r0, #0
    2cc6:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    2cc8:	681b      	ldr	r3, [r3, #0]
    2cca:	9301      	str	r3, [sp, #4]
    (void)dummy;
    2ccc:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
    2cce:	4b05      	ldr	r3, [pc, #20]	; (2ce4 <uart_nrfx_poll_in+0x28>)
    2cd0:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    2cd4:	700b      	strb	r3, [r1, #0]
}
    2cd6:	b002      	add	sp, #8
    2cd8:	4770      	bx	lr
		return -1;
    2cda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2cde:	e7fa      	b.n	2cd6 <uart_nrfx_poll_in+0x1a>
    2ce0:	40002108 	.word	0x40002108
    2ce4:	40002000 	.word	0x40002000

00002ce8 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2ce8:	4b09      	ldr	r3, [pc, #36]	; (2d10 <uart_nrfx_poll_out+0x28>)
    2cea:	2200      	movs	r2, #0
    2cec:	601a      	str	r2, [r3, #0]
{
    2cee:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    2cf0:	681a      	ldr	r2, [r3, #0]
    2cf2:	9201      	str	r2, [sp, #4]
    (void)dummy;
    2cf4:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2cf6:	4a07      	ldr	r2, [pc, #28]	; (2d14 <uart_nrfx_poll_out+0x2c>)
    2cf8:	2001      	movs	r0, #1
    2cfa:	6010      	str	r0, [r2, #0]
    p_reg->TXD = txd;
    2cfc:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2d00:	681a      	ldr	r2, [r3, #0]
	while (!event_txdrdy_check()) {
    2d02:	2a00      	cmp	r2, #0
    2d04:	d0fc      	beq.n	2d00 <uart_nrfx_poll_out+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2d06:	4b04      	ldr	r3, [pc, #16]	; (2d18 <uart_nrfx_poll_out+0x30>)
    2d08:	2201      	movs	r2, #1
    2d0a:	601a      	str	r2, [r3, #0]
}
    2d0c:	b002      	add	sp, #8
    2d0e:	4770      	bx	lr
    2d10:	4000211c 	.word	0x4000211c
    2d14:	40002008 	.word	0x40002008
    2d18:	4000200c 	.word	0x4000200c

00002d1c <uart_nrfx_init>:
    2d1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
    2d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSELRXD = pselrxd;
    2d22:	4c16      	ldr	r4, [pc, #88]	; (2d7c <uart_nrfx_init+0x60>)
    2d24:	2240      	movs	r2, #64	; 0x40
    2d26:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2d2a:	2103      	movs	r1, #3
    2d2c:	2200      	movs	r2, #0
    2d2e:	2508      	movs	r5, #8
    2d30:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
    2d34:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    2d38:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
    2d3c:	2506      	movs	r5, #6
    2d3e:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    2d42:	2520      	movs	r5, #32
    2d44:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2d48:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
    2d4c:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSELRTS = pselrts;
    2d50:	2305      	movs	r3, #5
    2d52:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSELCTS = pselcts;
    2d56:	2307      	movs	r3, #7
    2d58:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
			       DT_NORDIC_NRF_UART_UART_0_RTS_PIN,
			       DT_NORDIC_NRF_UART_UART_0_CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    2d5c:	6881      	ldr	r1, [r0, #8]
    2d5e:	f7ff fef7 	bl	2b50 <uart_nrfx_configure>
	if (err) {
    2d62:	b948      	cbnz	r0, 2d78 <uart_nrfx_init+0x5c>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    2d64:	2304      	movs	r3, #4
    2d66:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2d6a:	4b05      	ldr	r3, [pc, #20]	; (2d80 <uart_nrfx_init+0x64>)
    2d6c:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    2d6e:	681b      	ldr	r3, [r3, #0]
    2d70:	9301      	str	r3, [sp, #4]
    (void)dummy;
    2d72:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2d74:	2301      	movs	r3, #1
    2d76:	6023      	str	r3, [r4, #0]
	defined(DT_NORDIC_NRF_UART_UART_0_CTS_PIN)
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
    2d78:	b003      	add	sp, #12
    2d7a:	bd30      	pop	{r4, r5, pc}
    2d7c:	40002000 	.word	0x40002000
    2d80:	40002108 	.word	0x40002108

00002d84 <errata_108>:
}


static bool errata_12(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    2d84:	4b0c      	ldr	r3, [pc, #48]	; (2db8 <errata_108+0x34>)
    2d86:	781b      	ldrb	r3, [r3, #0]
    2d88:	2b06      	cmp	r3, #6
    2d8a:	d110      	bne.n	2dae <errata_108+0x2a>
    2d8c:	4b0b      	ldr	r3, [pc, #44]	; (2dbc <errata_108+0x38>)
    2d8e:	681b      	ldr	r3, [r3, #0]
    2d90:	071a      	lsls	r2, r3, #28
    2d92:	d10c      	bne.n	2dae <errata_108+0x2a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    2d94:	4b0a      	ldr	r3, [pc, #40]	; (2dc0 <errata_108+0x3c>)
    2d96:	6818      	ldr	r0, [r3, #0]
    2d98:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    2d9c:	2b30      	cmp	r3, #48	; 0x30
    2d9e:	d008      	beq.n	2db2 <errata_108+0x2e>
            return true;
        }
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    2da0:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    2da4:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
    2da8:	4258      	negs	r0, r3
    2daa:	4158      	adcs	r0, r3
    2dac:	4770      	bx	lr
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    2dae:	2000      	movs	r0, #0
    2db0:	4770      	bx	lr
            return true;
    2db2:	2001      	movs	r0, #1
}
    2db4:	4770      	bx	lr
    2db6:	bf00      	nop
    2db8:	f0000fe0 	.word	0xf0000fe0
    2dbc:	f0000fe4 	.word	0xf0000fe4
    2dc0:	f0000fe8 	.word	0xf0000fe8

00002dc4 <errata_16>:

static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    2dc4:	4b09      	ldr	r3, [pc, #36]	; (2dec <errata_16+0x28>)
    2dc6:	781b      	ldrb	r3, [r3, #0]
    2dc8:	2b06      	cmp	r3, #6
    2dca:	d10c      	bne.n	2de6 <errata_16+0x22>
    2dcc:	4b08      	ldr	r3, [pc, #32]	; (2df0 <errata_16+0x2c>)
    2dce:	681b      	ldr	r3, [r3, #0]
    2dd0:	071a      	lsls	r2, r3, #28
    2dd2:	d108      	bne.n	2de6 <errata_16+0x22>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    2dd4:	4b07      	ldr	r3, [pc, #28]	; (2df4 <errata_16+0x30>)
    2dd6:	6818      	ldr	r0, [r3, #0]
    2dd8:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    2ddc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    2de0:	4258      	negs	r0, r3
    2de2:	4158      	adcs	r0, r3
    2de4:	4770      	bx	lr
            return true;
        }
    }

    return false;
    2de6:	2000      	movs	r0, #0
}
    2de8:	4770      	bx	lr
    2dea:	bf00      	nop
    2dec:	f0000fe0 	.word	0xf0000fe0
    2df0:	f0000fe4 	.word	0xf0000fe4
    2df4:	f0000fe8 	.word	0xf0000fe8

00002df8 <SystemInit>:
{
    2df8:	b508      	push	{r3, lr}
    if (errata_12()){
    2dfa:	f7ff ffc3 	bl	2d84 <errata_108>
    2dfe:	b128      	cbz	r0, 2e0c <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    2e00:	4b78      	ldr	r3, [pc, #480]	; (2fe4 <SystemInit+0x1ec>)
    2e02:	4a79      	ldr	r2, [pc, #484]	; (2fe8 <SystemInit+0x1f0>)
    2e04:	681b      	ldr	r3, [r3, #0]
    2e06:	f3c3 2304 	ubfx	r3, r3, #8, #5
    2e0a:	6013      	str	r3, [r2, #0]
    if (errata_16()){
    2e0c:	f7ff ffda 	bl	2dc4 <errata_16>
    2e10:	b110      	cbz	r0, 2e18 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    2e12:	4b76      	ldr	r3, [pc, #472]	; (2fec <SystemInit+0x1f4>)
    2e14:	4a76      	ldr	r2, [pc, #472]	; (2ff0 <SystemInit+0x1f8>)
    2e16:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    2e18:	f7ff ffb4 	bl	2d84 <errata_108>
    2e1c:	b128      	cbz	r0, 2e2a <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    2e1e:	4b75      	ldr	r3, [pc, #468]	; (2ff4 <SystemInit+0x1fc>)
    2e20:	4a75      	ldr	r2, [pc, #468]	; (2ff8 <SystemInit+0x200>)
    2e22:	681b      	ldr	r3, [r3, #0]
    2e24:	f3c3 3342 	ubfx	r3, r3, #13, #3
    2e28:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    2e2a:	f7ff ffcb 	bl	2dc4 <errata_16>
    2e2e:	b120      	cbz	r0, 2e3a <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    2e30:	4a72      	ldr	r2, [pc, #456]	; (2ffc <SystemInit+0x204>)
    2e32:	68d3      	ldr	r3, [r2, #12]
    2e34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    2e38:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    2e3a:	f7ff ffa3 	bl	2d84 <errata_108>
    2e3e:	b140      	cbz	r0, 2e52 <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
    2e40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e44:	2200      	movs	r2, #0
    2e46:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    2e4a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    2e4e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    2e52:	f7ff ffb7 	bl	2dc4 <errata_16>
    2e56:	b110      	cbz	r0, 2e5e <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    2e58:	4b69      	ldr	r3, [pc, #420]	; (3000 <SystemInit+0x208>)
    2e5a:	2203      	movs	r2, #3
    2e5c:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    2e5e:	f7ff ffb1 	bl	2dc4 <errata_16>
    2e62:	b140      	cbz	r0, 2e76 <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    2e64:	4b67      	ldr	r3, [pc, #412]	; (3004 <SystemInit+0x20c>)
    2e66:	2205      	movs	r2, #5
    2e68:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    2e6a:	2201      	movs	r2, #1
    2e6c:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    2e6e:	2200      	movs	r2, #0
    2e70:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    2e72:	223f      	movs	r2, #63	; 0x3f
    2e74:	605a      	str	r2, [r3, #4]
    return false;
}

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    2e76:	4b64      	ldr	r3, [pc, #400]	; (3008 <SystemInit+0x210>)
    2e78:	781b      	ldrb	r3, [r3, #0]
    2e7a:	2b06      	cmp	r3, #6
    2e7c:	d150      	bne.n	2f20 <SystemInit+0x128>
    2e7e:	4b63      	ldr	r3, [pc, #396]	; (300c <SystemInit+0x214>)
    2e80:	681b      	ldr	r3, [r3, #0]
    2e82:	0719      	lsls	r1, r3, #28
    2e84:	d14c      	bne.n	2f20 <SystemInit+0x128>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    2e86:	4b62      	ldr	r3, [pc, #392]	; (3010 <SystemInit+0x218>)
    2e88:	681b      	ldr	r3, [r3, #0]
    2e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    2e8e:	2b50      	cmp	r3, #80	; 0x50
    2e90:	d146      	bne.n	2f20 <SystemInit+0x128>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    2e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2e96:	4b5f      	ldr	r3, [pc, #380]	; (3014 <SystemInit+0x21c>)
    2e98:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    2e9c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    2ea0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    2ea4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    2ea8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    2eac:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    2eb0:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    2eb4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    2eb8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    2ebc:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    2ec0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2ec4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    2ec8:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    2ecc:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    2ed0:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    2ed4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2ed8:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    2edc:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    2ee0:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    2ee4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2ee8:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2eec:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    2ef0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    2ef4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2ef8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2efc:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    2f00:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    2f04:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2f08:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2f0c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    2f10:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    2f14:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2f18:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2f1c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    2f20:	f7ff ff30 	bl	2d84 <errata_108>
    2f24:	b128      	cbz	r0, 2f32 <SystemInit+0x13a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    2f26:	4b3c      	ldr	r3, [pc, #240]	; (3018 <SystemInit+0x220>)
    2f28:	4a3c      	ldr	r2, [pc, #240]	; (301c <SystemInit+0x224>)
    2f2a:	681b      	ldr	r3, [r3, #0]
    2f2c:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    2f30:	6013      	str	r3, [r2, #0]
    if (errata_136()){
    2f32:	f7ff ff27 	bl	2d84 <errata_108>
    2f36:	b148      	cbz	r0, 2f4c <SystemInit+0x154>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    2f38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f3c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2f40:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    2f42:	bf44      	itt	mi
    2f44:	f06f 0201 	mvnmi.w	r2, #1
    2f48:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
}


static bool errata_182(void)
{
    if (*(uint32_t *)0x10000130ul == 0x6ul){
    2f4c:	4b34      	ldr	r3, [pc, #208]	; (3020 <SystemInit+0x228>)
    2f4e:	681b      	ldr	r3, [r3, #0]
    2f50:	2b06      	cmp	r3, #6
    2f52:	d108      	bne.n	2f66 <SystemInit+0x16e>
        if (*(uint32_t *)0x10000134ul == 0x6ul){
    2f54:	4b33      	ldr	r3, [pc, #204]	; (3024 <SystemInit+0x22c>)
    2f56:	681b      	ldr	r3, [r3, #0]
    2f58:	2b06      	cmp	r3, #6
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    2f5a:	bf01      	itttt	eq
    2f5c:	4a32      	ldreq	r2, [pc, #200]	; (3028 <SystemInit+0x230>)
    2f5e:	6813      	ldreq	r3, [r2, #0]
    2f60:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
    2f64:	6013      	streq	r3, [r2, #0]
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2f66:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2f6a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2f6e:	2a00      	cmp	r2, #0
    2f70:	db03      	blt.n	2f7a <SystemInit+0x182>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    2f72:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2f76:	2b00      	cmp	r3, #0
    2f78:	da2f      	bge.n	2fda <SystemInit+0x1e2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    2f7a:	4b2c      	ldr	r3, [pc, #176]	; (302c <SystemInit+0x234>)
    2f7c:	2201      	movs	r2, #1
    2f7e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    2f82:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2f86:	2a00      	cmp	r2, #0
    2f88:	d0fb      	beq.n	2f82 <SystemInit+0x18a>
            NRF_UICR->PSELRESET[0] = 21;
    2f8a:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    2f8e:	2115      	movs	r1, #21
    2f90:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    2f94:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2f98:	2a00      	cmp	r2, #0
    2f9a:	d0fb      	beq.n	2f94 <SystemInit+0x19c>
            NRF_UICR->PSELRESET[1] = 21;
    2f9c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2fa0:	2215      	movs	r2, #21
    2fa2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    2fa6:	4b21      	ldr	r3, [pc, #132]	; (302c <SystemInit+0x234>)
    2fa8:	461a      	mov	r2, r3
    2faa:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    2fae:	2900      	cmp	r1, #0
    2fb0:	d0fb      	beq.n	2faa <SystemInit+0x1b2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    2fb2:	2100      	movs	r1, #0
    2fb4:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    2fb8:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    2fbc:	2b00      	cmp	r3, #0
    2fbe:	d0fb      	beq.n	2fb8 <SystemInit+0x1c0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2fc0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2fc4:	491a      	ldr	r1, [pc, #104]	; (3030 <SystemInit+0x238>)
    2fc6:	4b1b      	ldr	r3, [pc, #108]	; (3034 <SystemInit+0x23c>)
    2fc8:	68ca      	ldr	r2, [r1, #12]
    2fca:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2fce:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2fd0:	60cb      	str	r3, [r1, #12]
    2fd2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2fd6:	bf00      	nop
    2fd8:	e7fd      	b.n	2fd6 <SystemInit+0x1de>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    2fda:	4b17      	ldr	r3, [pc, #92]	; (3038 <SystemInit+0x240>)
    2fdc:	4a17      	ldr	r2, [pc, #92]	; (303c <SystemInit+0x244>)
    2fde:	601a      	str	r2, [r3, #0]
}
    2fe0:	bd08      	pop	{r3, pc}
    2fe2:	bf00      	nop
    2fe4:	10000324 	.word	0x10000324
    2fe8:	40013540 	.word	0x40013540
    2fec:	4007c074 	.word	0x4007c074
    2ff0:	baadf00d 	.word	0xbaadf00d
    2ff4:	10000244 	.word	0x10000244
    2ff8:	4000053c 	.word	0x4000053c
    2ffc:	e000edf0 	.word	0xe000edf0
    3000:	400005a0 	.word	0x400005a0
    3004:	40005610 	.word	0x40005610
    3008:	f0000fe0 	.word	0xf0000fe0
    300c:	f0000fe4 	.word	0xf0000fe4
    3010:	f0000fe8 	.word	0xf0000fe8
    3014:	4000c000 	.word	0x4000c000
    3018:	10000258 	.word	0x10000258
    301c:	40000ee4 	.word	0x40000ee4
    3020:	10000130 	.word	0x10000130
    3024:	10000134 	.word	0x10000134
    3028:	4000173c 	.word	0x4000173c
    302c:	4001e000 	.word	0x4001e000
    3030:	e000ed00 	.word	0xe000ed00
    3034:	05fa0004 	.word	0x05fa0004
    3038:	200017d4 	.word	0x200017d4
    303c:	03d09000 	.word	0x03d09000

00003040 <nrfx_pwm_init>:


nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const * const p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler)
{
    3040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    NRFX_ASSERT(p_config);

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    3044:	7906      	ldrb	r6, [r0, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    3046:	4c3b      	ldr	r4, [pc, #236]	; (3134 <nrfx_pwm_init+0xf4>)
    3048:	00f7      	lsls	r7, r6, #3
    304a:	19e3      	adds	r3, r4, r7
{
    304c:	b085      	sub	sp, #20
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    304e:	791b      	ldrb	r3, [r3, #4]
{
    3050:	4605      	mov	r5, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    3052:	2b00      	cmp	r3, #0
    3054:	d16c      	bne.n	3130 <nrfx_pwm_init+0xf0>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    p_cb->handler = handler;
    3056:	f844 2036 	str.w	r2, [r4, r6, lsl #3]
static void configure_pins(nrfx_pwm_t const * const p_instance,
    305a:	1e48      	subs	r0, r1, #1
    305c:	466a      	mov	r2, sp
    305e:	f101 0903 	add.w	r9, r1, #3
    3062:	f04f 0a01 	mov.w	sl, #1
    3066:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    306a:	f04f 0b03 	mov.w	fp, #3
        uint8_t output_pin = p_config->output_pins[i];
    306e:	f810 ef01 	ldrb.w	lr, [r0, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    3072:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    3076:	d057      	beq.n	3128 <nrfx_pwm_init+0xe8>
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    3078:	f02e 0380 	bic.w	r3, lr, #128	; 0x80
    307c:	6013      	str	r3, [r2, #0]
            if (inverted)
    307e:	fa0a f803 	lsl.w	r8, sl, r3
    3082:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3086:	f01e 0f80 	tst.w	lr, #128	; 0x80
    p_reg->OUTSET = set_mask;
    308a:	bf14      	ite	ne
    308c:	f8cc 8508 	strne.w	r8, [ip, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    3090:	f8cc 850c 	streq.w	r8, [ip, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3094:	f84c b023 	str.w	fp, [ip, r3, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    3098:	4548      	cmp	r0, r9
    309a:	f102 0204 	add.w	r2, r2, #4
    309e:	d1e6      	bne.n	306e <nrfx_pwm_init+0x2e>
    nrf_pwm_pins_set(p_instance->p_registers, out_pins);
    30a0:	6828      	ldr	r0, [r5, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
    30a2:	9b00      	ldr	r3, [sp, #0]
    30a4:	f8c0 3560 	str.w	r3, [r0, #1376]	; 0x560
    30a8:	9b01      	ldr	r3, [sp, #4]
    30aa:	f8c0 3564 	str.w	r3, [r0, #1380]	; 0x564
    30ae:	9b02      	ldr	r3, [sp, #8]
    30b0:	f8c0 3568 	str.w	r3, [r0, #1384]	; 0x568
    30b4:	9b03      	ldr	r3, [sp, #12]
    30b6:	f8c0 356c 	str.w	r3, [r0, #1388]	; 0x56c
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    30ba:	2301      	movs	r3, #1

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    nrf_pwm_configure(p_instance->p_registers,
    30bc:	798a      	ldrb	r2, [r1, #6]
    p_reg->PRESCALER  = base_clock;
    30be:	f891 c005 	ldrb.w	ip, [r1, #5]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    30c2:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    30c6:	890b      	ldrh	r3, [r1, #8]
    p_reg->PRESCALER  = base_clock;
    30c8:	f8c0 c50c 	str.w	ip, [r0, #1292]	; 0x50c
    p_reg->MODE       = mode;
    30cc:	f8c0 2504 	str.w	r2, [r0, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    30d0:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508

__STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type * p_reg,
                                         nrf_pwm_dec_load_t dec_load,
                                         nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    30d4:	894b      	ldrh	r3, [r1, #10]
    30d6:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
    30da:	2300      	movs	r3, #0
    30dc:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_pwm_decoder_set(p_instance->p_registers,
        p_config->load_mode, p_config->step_mode);

    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    nrf_pwm_int_set(p_instance->p_registers, 0);
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_LOOPSDONE);
    30e0:	f44f 718e 	mov.w	r1, #284	; 0x11c
    p_reg->INTEN = mask;
    30e4:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    30e8:	f001 ff34 	bl	4f54 <nrf_pwm_event_clear>
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND0);
    30ec:	f44f 7188 	mov.w	r1, #272	; 0x110
    30f0:	6828      	ldr	r0, [r5, #0]
    30f2:	f001 ff2f 	bl	4f54 <nrf_pwm_event_clear>
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND1);
    30f6:	f44f 718a 	mov.w	r1, #276	; 0x114
    30fa:	6828      	ldr	r0, [r5, #0]
    30fc:	f001 ff2a 	bl	4f54 <nrf_pwm_event_clear>
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
    3100:	f44f 7182 	mov.w	r1, #260	; 0x104
    3104:	6828      	ldr	r0, [r5, #0]
    3106:	f001 ff25 	bl	4f54 <nrf_pwm_event_clear>
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
    310a:	f854 3036 	ldr.w	r3, [r4, r6, lsl #3]
    310e:	b123      	cbz	r3, 311a <nrfx_pwm_init+0xda>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

__STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    3110:	6828      	ldr	r0, [r5, #0]
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    3112:	f340 3007 	sbfx	r0, r0, #12, #8
    3116:	f7fe f917 	bl	1348 <z_arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    311a:	443c      	add	r4, r7
    311c:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    311e:	4806      	ldr	r0, [pc, #24]	; (3138 <nrfx_pwm_init+0xf8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3120:	7123      	strb	r3, [r4, #4]
}
    3122:	b005      	add	sp, #20
    3124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    3128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    312c:	6013      	str	r3, [r2, #0]
    312e:	e7b3      	b.n	3098 <nrfx_pwm_init+0x58>
        return err_code;
    3130:	4802      	ldr	r0, [pc, #8]	; (313c <nrfx_pwm_init+0xfc>)
    3132:	e7f6      	b.n	3122 <nrfx_pwm_init+0xe2>
    3134:	200001a4 	.word	0x200001a4
    3138:	0bad0000 	.word	0x0bad0000
    313c:	0bad0005 	.word	0x0bad0005

00003140 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const * const p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    3140:	b4f0      	push	{r4, r5, r6, r7}
    3142:	460d      	mov	r5, r1
    3144:	461c      	mov	r4, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    3146:	491a      	ldr	r1, [pc, #104]	; (31b0 <nrfx_pwm_simple_playback+0x70>)
    3148:	7903      	ldrb	r3, [r0, #4]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    314a:	f8d5 c000 	ldr.w	ip, [r5]
    p_reg->SEQ[seq_id].CNT = length;
    314e:	88af      	ldrh	r7, [r5, #4]
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    3150:	68ae      	ldr	r6, [r5, #8]
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    3152:	68ed      	ldr	r5, [r5, #12]
    3154:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    NRFX_ASSERT(playback_count > 0);
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    3158:	6803      	ldr	r3, [r0, #0]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    315a:	f8c3 c520 	str.w	ip, [r3, #1312]	; 0x520
    p_reg->SEQ[seq_id].CNT = length;
    315e:	f8c3 7524 	str.w	r7, [r3, #1316]	; 0x524
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    3162:	f8c3 6528 	str.w	r6, [r3, #1320]	; 0x528
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    3166:	f8c3 552c 	str.w	r5, [r3, #1324]	; 0x52c
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    316a:	f8c3 c540 	str.w	ip, [r3, #1344]	; 0x540
    p_reg->SEQ[seq_id].CNT = length;
    316e:	f8c3 7544 	str.w	r7, [r3, #1348]	; 0x544
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    3172:	f8c3 6548 	str.w	r6, [r3, #1352]	; 0x548
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    3176:	f8c3 554c 	str.w	r5, [r3, #1356]	; 0x54c
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    bool odd = (playback_count & 1);
    317a:	f002 0501 	and.w	r5, r2, #1
}

__STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                      uint16_t loop_count)
{
    p_reg->LOOP = loop_count;
    317e:	eb05 0252 	add.w	r2, r5, r2, lsr #1
    3182:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    nrf_pwm_loop_set(p_instance->p_registers,
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    3186:	07e2      	lsls	r2, r4, #31
    3188:	d410      	bmi.n	31ac <nrfx_pwm_simple_playback+0x6c>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
    318a:	f014 0202 	ands.w	r2, r4, #2
    318e:	d003      	beq.n	3198 <nrfx_pwm_simple_playback+0x58>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    3190:	2d00      	cmp	r5, #0
    3192:	bf14      	ite	ne
    3194:	2208      	movne	r2, #8
    3196:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    3198:	2d00      	cmp	r5, #0
    p_reg->SHORTS = mask;
    319a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    319e:	b2e2      	uxtb	r2, r4
    31a0:	bf14      	ite	ne
    31a2:	230c      	movne	r3, #12
    31a4:	2308      	moveq	r3, #8
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    31a6:	bcf0      	pop	{r4, r5, r6, r7}
    return start_playback(p_instance, p_cb, flags,
    31a8:	f001 bedc 	b.w	4f64 <start_playback.isra.2>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    31ac:	2210      	movs	r2, #16
    31ae:	e7f3      	b.n	3198 <nrfx_pwm_simple_playback+0x58>
    31b0:	200001a4 	.word	0x200001a4

000031b4 <nrfx_pwm_is_stopped>:
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * const p_instance)
{
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    31b4:	7903      	ldrb	r3, [r0, #4]

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    31b6:	4a08      	ldr	r2, [pc, #32]	; (31d8 <nrfx_pwm_is_stopped+0x24>)
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    31b8:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    31ba:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    31be:	7913      	ldrb	r3, [r2, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    31c0:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    31c4:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    31c6:	b919      	cbnz	r1, 31d0 <nrfx_pwm_is_stopped+0x1c>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    31c8:	1e98      	subs	r0, r3, #2
    31ca:	bf18      	it	ne
    31cc:	2001      	movne	r0, #1
    31ce:	4770      	bx	lr
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    31d0:	2001      	movs	r0, #1
    31d2:	7110      	strb	r0, [r2, #4]
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    31d4:	4770      	bx	lr
    31d6:	bf00      	nop
    31d8:	200001a4 	.word	0x200001a4

000031dc <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
    31dc:	4b09      	ldr	r3, [pc, #36]	; (3204 <z_sys_device_do_config_level+0x28>)
{
    31de:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
    31e0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    31e4:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    31e6:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    31e8:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    31ec:	42a5      	cmp	r5, r4
    31ee:	d800      	bhi.n	31f2 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
    31f0:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    31f2:	6823      	ldr	r3, [r4, #0]
    31f4:	4620      	mov	r0, r4
    31f6:	685b      	ldr	r3, [r3, #4]
    31f8:	4798      	blx	r3
		if (retval != 0) {
    31fa:	b100      	cbz	r0, 31fe <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
    31fc:	6066      	str	r6, [r4, #4]
								info++) {
    31fe:	340c      	adds	r4, #12
    3200:	e7f4      	b.n	31ec <z_sys_device_do_config_level+0x10>
    3202:	bf00      	nop
    3204:	00005640 	.word	0x00005640

00003208 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    3208:	4b10      	ldr	r3, [pc, #64]	; (324c <z_impl_device_get_binding+0x44>)
{
    320a:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    320c:	4c10      	ldr	r4, [pc, #64]	; (3250 <z_impl_device_get_binding+0x48>)
{
    320e:	4605      	mov	r5, r0
    3210:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    3212:	429c      	cmp	r4, r3
    3214:	d104      	bne.n	3220 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    3216:	4c0e      	ldr	r4, [pc, #56]	; (3250 <z_impl_device_get_binding+0x48>)
    3218:	42b4      	cmp	r4, r6
    321a:	d109      	bne.n	3230 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    321c:	2400      	movs	r4, #0
    321e:	e012      	b.n	3246 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    3220:	6862      	ldr	r2, [r4, #4]
    3222:	b11a      	cbz	r2, 322c <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    3224:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    3226:	6812      	ldr	r2, [r2, #0]
    3228:	42aa      	cmp	r2, r5
    322a:	d00c      	beq.n	3246 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    322c:	340c      	adds	r4, #12
    322e:	e7f0      	b.n	3212 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    3230:	6863      	ldr	r3, [r4, #4]
    3232:	b90b      	cbnz	r3, 3238 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    3234:	340c      	adds	r4, #12
    3236:	e7ef      	b.n	3218 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    3238:	6823      	ldr	r3, [r4, #0]
    323a:	4628      	mov	r0, r5
    323c:	6819      	ldr	r1, [r3, #0]
    323e:	f001 fc5e 	bl	4afe <strcmp>
    3242:	2800      	cmp	r0, #0
    3244:	d1f6      	bne.n	3234 <z_impl_device_get_binding+0x2c>
}
    3246:	4620      	mov	r0, r4
    3248:	bd70      	pop	{r4, r5, r6, pc}
    324a:	bf00      	nop
    324c:	20001870 	.word	0x20001870
    3250:	200017e0 	.word	0x200017e0

00003254 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    3254:	b510      	push	{r4, lr}
    3256:	4604      	mov	r4, r0
	z_impl_log_panic();
    3258:	f7fd fc1e 	bl	a98 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
    325c:	2301      	movs	r3, #1
    325e:	f04f 0100 	mov.w	r1, #0
    3262:	f363 0107 	bfi	r1, r3, #0, #8
    3266:	4a06      	ldr	r2, [pc, #24]	; (3280 <k_sys_fatal_error_handler+0x2c>)
    3268:	4b06      	ldr	r3, [pc, #24]	; (3284 <k_sys_fatal_error_handler+0x30>)
    326a:	4807      	ldr	r0, [pc, #28]	; (3288 <k_sys_fatal_error_handler+0x34>)
    326c:	1a9b      	subs	r3, r3, r2
    326e:	08db      	lsrs	r3, r3, #3
    3270:	f363 118f 	bfi	r1, r3, #6, #10
    3274:	f001 f8bf 	bl	43f6 <log_0>
	z_arch_system_halt(reason);
    3278:	4620      	mov	r0, r4
    327a:	f001 feac 	bl	4fd6 <z_arch_system_halt>
    327e:	bf00      	nop
    3280:	000054f8 	.word	0x000054f8
    3284:	00005510 	.word	0x00005510
    3288:	00005cd2 	.word	0x00005cd2

0000328c <z_fatal_error>:
	z_arch_system_halt(reason);
}
/* LCOV_EXCL_STOP */

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    328c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3290:	4606      	mov	r6, r0
    3292:	4688      	mov	r8, r1
	return z_impl_k_current_get();
    3294:	f000 fc06 	bl	3aa4 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s", reason, reason_to_str(reason));
    3298:	2201      	movs	r2, #1
    329a:	f04f 0300 	mov.w	r3, #0
    329e:	f362 0307 	bfi	r3, r2, #0, #8
    32a2:	4c1b      	ldr	r4, [pc, #108]	; (3310 <z_fatal_error+0x84>)
    32a4:	4a1b      	ldr	r2, [pc, #108]	; (3314 <z_fatal_error+0x88>)
    32a6:	2e04      	cmp	r6, #4
    32a8:	eba4 0402 	sub.w	r4, r4, r2
    32ac:	bf96      	itet	ls
    32ae:	4a1a      	ldrls	r2, [pc, #104]	; (3318 <z_fatal_error+0x8c>)
    32b0:	4a1a      	ldrhi	r2, [pc, #104]	; (331c <z_fatal_error+0x90>)
    32b2:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
    32b6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    32ba:	4607      	mov	r7, r0
    32bc:	f364 138f 	bfi	r3, r4, #6, #10
    32c0:	4817      	ldr	r0, [pc, #92]	; (3320 <z_fatal_error+0x94>)
    32c2:	4631      	mov	r1, r6
    32c4:	f001 f8b8 	bl	4438 <log_2>
	 * if (k_is_in_isr()) {
	 *     LOG_ERR("Fault during interrupt handling\n");
	 * }
	 */

	LOG_ERR("Current thread: %p (%s)", thread,
    32c8:	f04f 0500 	mov.w	r5, #0
    32cc:	2301      	movs	r3, #1
    32ce:	f363 0507 	bfi	r5, r3, #0, #8
	const char *thread_name = k_thread_name_get(thread);
    32d2:	4638      	mov	r0, r7
	LOG_ERR("Current thread: %p (%s)", thread,
    32d4:	f364 158f 	bfi	r5, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
    32d8:	f001 ff84 	bl	51e4 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    32dc:	b1a8      	cbz	r0, 330a <z_fatal_error+0x7e>
    32de:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
    32e0:	4b10      	ldr	r3, [pc, #64]	; (3324 <z_fatal_error+0x98>)
    32e2:	2a00      	cmp	r2, #0
    32e4:	bf08      	it	eq
    32e6:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
    32e8:	f7fd fa50 	bl	78c <log_strdup>
    32ec:	462b      	mov	r3, r5
    32ee:	4602      	mov	r2, r0
    32f0:	4639      	mov	r1, r7
    32f2:	480d      	ldr	r0, [pc, #52]	; (3328 <z_fatal_error+0x9c>)
    32f4:	f001 f8a0 	bl	4438 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    32f8:	4641      	mov	r1, r8
    32fa:	4630      	mov	r0, r6
    32fc:	f7ff ffaa 	bl	3254 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
    3300:	4638      	mov	r0, r7
		/* FIXME: #17656 */
		__ASSERT(!k_is_in_isr(),
			 "Attempted to recover from a fatal error in ISR");
	}
	k_thread_abort(thread);
}
    3302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3306:	f7fe bbb7 	b.w	1a78 <z_impl_k_thread_abort>
		thread_name = "unknown";
    330a:	4806      	ldr	r0, [pc, #24]	; (3324 <z_fatal_error+0x98>)
    330c:	e7ec      	b.n	32e8 <z_fatal_error+0x5c>
    330e:	bf00      	nop
    3310:	00005510 	.word	0x00005510
    3314:	000054f8 	.word	0x000054f8
    3318:	00005658 	.word	0x00005658
    331c:	00005d2b 	.word	0x00005d2b
    3320:	00005d41 	.word	0x00005d41
    3324:	00005d39 	.word	0x00005d39
    3328:	00005d5f 	.word	0x00005d5f

0000332c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    332c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    332e:	4d0b      	ldr	r5, [pc, #44]	; (335c <idle+0x30>)
    3330:	f04f 0220 	mov.w	r2, #32
    3334:	f3ef 8311 	mrs	r3, BASEPRI
    3338:	f382 8811 	msr	BASEPRI, r2
    333c:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    3340:	f001 ff8f 	bl	5262 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    3344:	2101      	movs	r1, #1
    3346:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
    3348:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    334a:	bfd8      	it	le
    334c:	4608      	movle	r0, r1
    334e:	f001 ff98 	bl	5282 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    3352:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	z_arch_cpu_idle();
    3354:	f7fe f870 	bl	1438 <z_arch_cpu_idle>
    3358:	e7ea      	b.n	3330 <idle+0x4>
    335a:	bf00      	nop
    335c:	20000284 	.word	0x20000284

00003360 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3360:	4802      	ldr	r0, [pc, #8]	; (336c <z_bss_zero+0xc>)
    3362:	4a03      	ldr	r2, [pc, #12]	; (3370 <z_bss_zero+0x10>)
    3364:	2100      	movs	r1, #0
    3366:	1a12      	subs	r2, r2, r0
    3368:	f001 bbff 	b.w	4b6a <memset>
    336c:	20000000 	.word	0x20000000
    3370:	200002cc 	.word	0x200002cc

00003374 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    3374:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    3376:	4806      	ldr	r0, [pc, #24]	; (3390 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    3378:	4a06      	ldr	r2, [pc, #24]	; (3394 <z_data_copy+0x20>)
    337a:	4907      	ldr	r1, [pc, #28]	; (3398 <z_data_copy+0x24>)
    337c:	1a12      	subs	r2, r2, r0
    337e:	f001 fbca 	bl	4b16 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    3382:	4a06      	ldr	r2, [pc, #24]	; (339c <z_data_copy+0x28>)
    3384:	4906      	ldr	r1, [pc, #24]	; (33a0 <z_data_copy+0x2c>)
    3386:	4807      	ldr	r0, [pc, #28]	; (33a4 <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    338c:	f001 bbc3 	b.w	4b16 <memcpy>
    3390:	200017b0 	.word	0x200017b0
    3394:	20001894 	.word	0x20001894
    3398:	00005dcc 	.word	0x00005dcc
    339c:	00000000 	.word	0x00000000
    33a0:	00005dcc 	.word	0x00005dcc
    33a4:	20000000 	.word	0x20000000

000033a8 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    33a8:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    33aa:	2002      	movs	r0, #2
    33ac:	f7ff ff16 	bl	31dc <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    33b0:	4807      	ldr	r0, [pc, #28]	; (33d0 <bg_thread_main+0x28>)
    33b2:	f000 ffed 	bl	4390 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    33b6:	2003      	movs	r0, #3
    33b8:	f7ff ff10 	bl	31dc <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    33bc:	f000 fc2e 	bl	3c1c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    33c0:	f7fd f85c 	bl	47c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    33c4:	4a03      	ldr	r2, [pc, #12]	; (33d4 <bg_thread_main+0x2c>)
    33c6:	7b13      	ldrb	r3, [r2, #12]
    33c8:	f023 0301 	bic.w	r3, r3, #1
    33cc:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    33ce:	bd08      	pop	{r3, pc}
    33d0:	00005d77 	.word	0x00005d77
    33d4:	20000218 	.word	0x20000218

000033d8 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    33d8:	b580      	push	{r7, lr}
    33da:	b0a2      	sub	sp, #136	; 0x88
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    33dc:	f7fd f936 	bl	64c <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
    33e0:	4b35      	ldr	r3, [pc, #212]	; (34b8 <z_cstart+0xe0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    33e2:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    33e6:	4c35      	ldr	r4, [pc, #212]	; (34bc <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
    33e8:	4e35      	ldr	r6, [pc, #212]	; (34c0 <z_cstart+0xe8>)
    33ea:	6963      	ldr	r3, [r4, #20]
    33ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    33f0:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    33f2:	2500      	movs	r5, #0
    33f4:	23e0      	movs	r3, #224	; 0xe0
    33f6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    33fa:	77e5      	strb	r5, [r4, #31]
    33fc:	7625      	strb	r5, [r4, #24]
    33fe:	7665      	strb	r5, [r4, #25]
    3400:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3402:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3404:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3408:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void z_arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    340a:	f7fe fb21 	bl	1a50 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    340e:	f7fe f80d 	bl	142c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3416:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3418:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* perform any architecture-specific initialization */
	z_arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
    341a:	ab07      	add	r3, sp, #28
    341c:	226c      	movs	r2, #108	; 0x6c
    341e:	4629      	mov	r1, r5
    3420:	4618      	mov	r0, r3
    3422:	f001 fba2 	bl	4b6a <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    3426:	4c27      	ldr	r4, [pc, #156]	; (34c4 <z_cstart+0xec>)
	struct k_thread dummy_thread = {
    3428:	2701      	movs	r7, #1
	_current = &dummy_thread;
    342a:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    342c:	4628      	mov	r0, r5
	struct k_thread dummy_thread = {
    342e:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3432:	f7ff fed3 	bl	31dc <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3436:	4638      	mov	r0, r7
    3438:	f7ff fed0 	bl	31dc <z_sys_device_do_config_level>
	z_sched_init();
    343c:	f000 fada 	bl	39f4 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    3440:	4b21      	ldr	r3, [pc, #132]	; (34c8 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
    3442:	6266      	str	r6, [r4, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    3444:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3448:	e9cd 7304 	strd	r7, r3, [sp, #16]
    344c:	e9cd 5502 	strd	r5, r5, [sp, #8]
    3450:	4b1e      	ldr	r3, [pc, #120]	; (34cc <z_cstart+0xf4>)
    3452:	491f      	ldr	r1, [pc, #124]	; (34d0 <z_cstart+0xf8>)
    3454:	e9cd 5500 	strd	r5, r5, [sp]
    3458:	4630      	mov	r0, r6
    345a:	f000 fb97 	bl	3b8c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    345e:	7b73      	ldrb	r3, [r6, #13]
    3460:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3464:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3468:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    346a:	d104      	bne.n	3476 <z_cstart+0x9e>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    346c:	69b3      	ldr	r3, [r6, #24]
    346e:	b913      	cbnz	r3, 3476 <z_cstart+0x9e>
		z_add_thread_to_ready_q(thread);
    3470:	4630      	mov	r0, r6
    3472:	f000 f967 	bl	3744 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
    3476:	4b17      	ldr	r3, [pc, #92]	; (34d4 <z_cstart+0xfc>)
    3478:	4d17      	ldr	r5, [pc, #92]	; (34d8 <z_cstart+0x100>)
    347a:	9305      	str	r3, [sp, #20]
    347c:	2201      	movs	r2, #1
    347e:	230f      	movs	r3, #15
    3480:	e9cd 3203 	strd	r3, r2, [sp, #12]
    3484:	2300      	movs	r3, #0
    3486:	e9cd 3301 	strd	r3, r3, [sp, #4]
    348a:	9300      	str	r3, [sp, #0]
    348c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3490:	4b12      	ldr	r3, [pc, #72]	; (34dc <z_cstart+0x104>)
    3492:	4913      	ldr	r1, [pc, #76]	; (34e0 <z_cstart+0x108>)
    3494:	4628      	mov	r0, r5
    3496:	f000 fb79 	bl	3b8c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    349a:	7b6b      	ldrb	r3, [r5, #13]
	_kernel.cpus[0].idle_thread = &z_idle_thread;
    349c:	60e5      	str	r5, [r4, #12]
    349e:	f023 0304 	bic.w	r3, r3, #4
    34a2:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    34a4:	4b0f      	ldr	r3, [pc, #60]	; (34e4 <z_cstart+0x10c>)
	z_arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    34a6:	490a      	ldr	r1, [pc, #40]	; (34d0 <z_cstart+0xf8>)
    34a8:	4805      	ldr	r0, [pc, #20]	; (34c0 <z_cstart+0xe8>)
	list->tail = (sys_dnode_t *)list;
    34aa:	e9c4 3306 	strd	r3, r3, [r4, #24]
    34ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
    34b2:	4b06      	ldr	r3, [pc, #24]	; (34cc <z_cstart+0xf4>)
    34b4:	f7fd ff9a 	bl	13ec <z_arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    34b8:	20001310 	.word	0x20001310
    34bc:	e000ed00 	.word	0xe000ed00
    34c0:	20000218 	.word	0x20000218
    34c4:	20000284 	.word	0x20000284
    34c8:	00005dc0 	.word	0x00005dc0
    34cc:	000033a9 	.word	0x000033a9
    34d0:	200005d0 	.word	0x200005d0
    34d4:	00005dc5 	.word	0x00005dc5
    34d8:	200001ac 	.word	0x200001ac
    34dc:	0000332d 	.word	0x0000332d
    34e0:	200009d0 	.word	0x200009d0
    34e4:	2000029c 	.word	0x2000029c

000034e8 <init_mem_slab_module>:
 */
static int init_mem_slab_module(struct device *dev)
{
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    34e8:	4b0b      	ldr	r3, [pc, #44]	; (3518 <init_mem_slab_module+0x30>)
    34ea:	480c      	ldr	r0, [pc, #48]	; (351c <init_mem_slab_module+0x34>)
{
    34ec:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
    34ee:	2400      	movs	r4, #0
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    34f0:	4283      	cmp	r3, r0
    34f2:	d301      	bcc.n	34f8 <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
    34f4:	2000      	movs	r0, #0
    34f6:	bd70      	pop	{r4, r5, r6, pc}
	p = slab->buffer;
    34f8:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    34fa:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    34fc:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    34fe:	2100      	movs	r1, #0
    3500:	42a9      	cmp	r1, r5
    3502:	d101      	bne.n	3508 <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3504:	331c      	adds	r3, #28
    3506:	e7f3      	b.n	34f0 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    3508:	695e      	ldr	r6, [r3, #20]
    350a:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
    350c:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
    350e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    3510:	3101      	adds	r1, #1
		p += slab->block_size;
    3512:	4432      	add	r2, r6
    3514:	e7f4      	b.n	3500 <init_mem_slab_module+0x18>
    3516:	bf00      	nop
    3518:	20001870 	.word	0x20001870
    351c:	20001870 	.word	0x20001870

00003520 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
    3520:	b510      	push	{r4, lr}
    3522:	4613      	mov	r3, r2
    3524:	460c      	mov	r4, r1
    3526:	f04f 0220 	mov.w	r2, #32
    352a:	f3ef 8111 	mrs	r1, BASEPRI
    352e:	f382 8811 	msr	BASEPRI, r2
    3532:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    3536:	6942      	ldr	r2, [r0, #20]
    3538:	b15a      	cbz	r2, 3552 <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
    353a:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    353c:	6813      	ldr	r3, [r2, #0]
    353e:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    3540:	6983      	ldr	r3, [r0, #24]
    3542:	3301      	adds	r3, #1
    3544:	6183      	str	r3, [r0, #24]
		result = 0;
    3546:	2000      	movs	r0, #0
	__asm__ volatile(
    3548:	f381 8811 	msr	BASEPRI, r1
    354c:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    3550:	e00d      	b.n	356e <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
    3552:	b91b      	cbnz	r3, 355c <k_mem_slab_alloc+0x3c>
		*mem = NULL;
    3554:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    3556:	f06f 000b 	mvn.w	r0, #11
    355a:	e7f5      	b.n	3548 <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    355c:	4602      	mov	r2, r0
    355e:	4804      	ldr	r0, [pc, #16]	; (3570 <k_mem_slab_alloc+0x50>)
    3560:	f000 fa06 	bl	3970 <z_pend_curr>
		if (result == 0) {
    3564:	b918      	cbnz	r0, 356e <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
    3566:	4b03      	ldr	r3, [pc, #12]	; (3574 <k_mem_slab_alloc+0x54>)
    3568:	689b      	ldr	r3, [r3, #8]
    356a:	695b      	ldr	r3, [r3, #20]
    356c:	6023      	str	r3, [r4, #0]
}
    356e:	bd10      	pop	{r4, pc}
    3570:	200002c9 	.word	0x200002c9
    3574:	20000284 	.word	0x20000284

00003578 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    3578:	b570      	push	{r4, r5, r6, lr}
    357a:	4604      	mov	r4, r0
    357c:	460d      	mov	r5, r1
	__asm__ volatile(
    357e:	f04f 0320 	mov.w	r3, #32
    3582:	f3ef 8611 	mrs	r6, BASEPRI
    3586:	f383 8811 	msr	BASEPRI, r3
    358a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    358e:	f001 fdd1 	bl	5134 <z_unpend_first_thread>

	if (pending_thread != NULL) {
    3592:	b180      	cbz	r0, 35b6 <k_mem_slab_free+0x3e>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    3594:	682a      	ldr	r2, [r5, #0]
	thread->base.swap_data = data;
    3596:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3598:	7b42      	ldrb	r2, [r0, #13]
}

static ALWAYS_INLINE void
z_arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    359a:	2100      	movs	r1, #0
    359c:	06d2      	lsls	r2, r2, #27
    359e:	6681      	str	r1, [r0, #104]	; 0x68
    35a0:	d103      	bne.n	35aa <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
    35a2:	6983      	ldr	r3, [r0, #24]
    35a4:	b90b      	cbnz	r3, 35aa <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
    35a6:	f000 f8cd 	bl	3744 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
    35aa:	4631      	mov	r1, r6
    35ac:	4808      	ldr	r0, [pc, #32]	; (35d0 <k_mem_slab_free+0x58>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    35ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    35b2:	f001 bd5f 	b.w	5074 <z_reschedule>
		**(char ***)mem = slab->free_list;
    35b6:	682b      	ldr	r3, [r5, #0]
    35b8:	6962      	ldr	r2, [r4, #20]
    35ba:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    35bc:	682b      	ldr	r3, [r5, #0]
    35be:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    35c0:	69a3      	ldr	r3, [r4, #24]
    35c2:	3b01      	subs	r3, #1
    35c4:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    35c6:	f386 8811 	msr	BASEPRI, r6
    35ca:	f3bf 8f6f 	isb	sy
}
    35ce:	bd70      	pop	{r4, r5, r6, pc}
    35d0:	200002c9 	.word	0x200002c9

000035d4 <resched.part.15>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    35d4:	f3ef 8005 	mrs	r0, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    35d8:	280d      	cmp	r0, #13
    35da:	d809      	bhi.n	35f0 <resched.part.15+0x1c>
    35dc:	b128      	cbz	r0, 35ea <resched.part.15+0x16>
    35de:	4b05      	ldr	r3, [pc, #20]	; (35f4 <resched.part.15+0x20>)
    35e0:	6858      	ldr	r0, [r3, #4]
    35e2:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    35e6:	f3c0 20c0 	ubfx	r0, r0, #11, #1
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
}
    35ea:	f080 0001 	eor.w	r0, r0, #1
    35ee:	4770      	bx	lr
    35f0:	2001      	movs	r0, #1
    35f2:	e7fa      	b.n	35ea <resched.part.15+0x16>
    35f4:	e000ed00 	.word	0xe000ed00

000035f8 <z_reset_time_slice>:
{
    35f8:	b510      	push	{r4, lr}
	if (slice_time != 0) {
    35fa:	4c08      	ldr	r4, [pc, #32]	; (361c <z_reset_time_slice+0x24>)
    35fc:	6823      	ldr	r3, [r4, #0]
    35fe:	b15b      	cbz	r3, 3618 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    3600:	f7fd fe0c 	bl	121c <z_clock_elapsed>
    3604:	6823      	ldr	r3, [r4, #0]
    3606:	4a06      	ldr	r2, [pc, #24]	; (3620 <z_reset_time_slice+0x28>)
    3608:	4418      	add	r0, r3
    360a:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    360c:	2100      	movs	r1, #0
    360e:	4618      	mov	r0, r3
}
    3610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    3614:	f001 be35 	b.w	5282 <z_set_timeout_expiry>
}
    3618:	bd10      	pop	{r4, pc}
    361a:	bf00      	nop
    361c:	200002bc 	.word	0x200002bc
    3620:	20000284 	.word	0x20000284

00003624 <k_sched_time_slice_set>:
{
    3624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3626:	460d      	mov	r5, r1
	__asm__ volatile(
    3628:	f04f 0320 	mov.w	r3, #32
    362c:	f3ef 8411 	mrs	r4, BASEPRI
    3630:	f383 8811 	msr	BASEPRI, r3
    3634:	f3bf 8f6f 	isb	sy
		_current_cpu->slice_ticks = 0;
    3638:	4b0d      	ldr	r3, [pc, #52]	; (3670 <k_sched_time_slice_set+0x4c>)

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	int cyc = sys_clock_hw_cycles_per_sec();

	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
    363a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    363e:	f240 36e7 	movw	r6, #999	; 0x3e7
    3642:	2700      	movs	r7, #0
    3644:	fbc1 6700 	smlal	r6, r7, r1, r0
    3648:	2200      	movs	r2, #0
    364a:	611a      	str	r2, [r3, #16]
    364c:	4630      	mov	r0, r6
    364e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3652:	2300      	movs	r3, #0
    3654:	4639      	mov	r1, r7
    3656:	f7fc fd41 	bl	dc <__aeabi_ldivmod>
    365a:	4b06      	ldr	r3, [pc, #24]	; (3674 <k_sched_time_slice_set+0x50>)
    365c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    365e:	4b06      	ldr	r3, [pc, #24]	; (3678 <k_sched_time_slice_set+0x54>)
    3660:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    3662:	f7ff ffc9 	bl	35f8 <z_reset_time_slice>
	__asm__ volatile(
    3666:	f384 8811 	msr	BASEPRI, r4
    366a:	f3bf 8f6f 	isb	sy
}
    366e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3670:	20000284 	.word	0x20000284
    3674:	200002bc 	.word	0x200002bc
    3678:	200002b8 	.word	0x200002b8

0000367c <k_sched_lock>:
	__asm__ volatile(
    367c:	f04f 0320 	mov.w	r3, #32
    3680:	f3ef 8111 	mrs	r1, BASEPRI
    3684:	f383 8811 	msr	BASEPRI, r3
    3688:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    368c:	4b04      	ldr	r3, [pc, #16]	; (36a0 <k_sched_lock+0x24>)
    368e:	689a      	ldr	r2, [r3, #8]
    3690:	7bd3      	ldrb	r3, [r2, #15]
    3692:	3b01      	subs	r3, #1
    3694:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3696:	f381 8811 	msr	BASEPRI, r1
    369a:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    369e:	4770      	bx	lr
    36a0:	20000284 	.word	0x20000284

000036a4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    36a4:	4b09      	ldr	r3, [pc, #36]	; (36cc <z_priq_dumb_remove+0x28>)
    36a6:	f103 0228 	add.w	r2, r3, #40	; 0x28
    36aa:	4282      	cmp	r2, r0
    36ac:	d105      	bne.n	36ba <z_priq_dumb_remove+0x16>
    36ae:	689b      	ldr	r3, [r3, #8]
    36b0:	428b      	cmp	r3, r1
    36b2:	d102      	bne.n	36ba <z_priq_dumb_remove+0x16>
    36b4:	7b4b      	ldrb	r3, [r1, #13]
    36b6:	06db      	lsls	r3, r3, #27
    36b8:	d106      	bne.n	36c8 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    36ba:	e9d1 3200 	ldrd	r3, r2, [r1]
    36be:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    36c0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    36c2:	2300      	movs	r3, #0
	node->prev = NULL;
    36c4:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    36c8:	4770      	bx	lr
    36ca:	bf00      	nop
    36cc:	20000284 	.word	0x20000284

000036d0 <update_cache>:
{
    36d0:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    36d2:	4c0d      	ldr	r4, [pc, #52]	; (3708 <update_cache+0x38>)
{
    36d4:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    36d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
    36da:	f001 fcf4 	bl	50c6 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
    36de:	4605      	mov	r5, r0
    36e0:	b900      	cbnz	r0, 36e4 <update_cache+0x14>
    36e2:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    36e4:	68a3      	ldr	r3, [r4, #8]
    36e6:	b94a      	cbnz	r2, 36fc <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    36e8:	7b5a      	ldrb	r2, [r3, #13]
    36ea:	06d2      	lsls	r2, r2, #27
    36ec:	d106      	bne.n	36fc <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    36ee:	69aa      	ldr	r2, [r5, #24]
    36f0:	b922      	cbnz	r2, 36fc <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
    36f2:	89da      	ldrh	r2, [r3, #14]
    36f4:	2a7f      	cmp	r2, #127	; 0x7f
    36f6:	d901      	bls.n	36fc <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    36f8:	6263      	str	r3, [r4, #36]	; 0x24
}
    36fa:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
    36fc:	429d      	cmp	r5, r3
    36fe:	d001      	beq.n	3704 <update_cache+0x34>
			z_reset_time_slice();
    3700:	f7ff ff7a 	bl	35f8 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
    3704:	6265      	str	r5, [r4, #36]	; 0x24
}
    3706:	e7f8      	b.n	36fa <update_cache+0x2a>
    3708:	20000284 	.word	0x20000284

0000370c <k_sched_unlock>:
{
    370c:	b510      	push	{r4, lr}
	__asm__ volatile(
    370e:	f04f 0320 	mov.w	r3, #32
    3712:	f3ef 8411 	mrs	r4, BASEPRI
    3716:	f383 8811 	msr	BASEPRI, r3
    371a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    371e:	4b08      	ldr	r3, [pc, #32]	; (3740 <k_sched_unlock+0x34>)
    3720:	689a      	ldr	r2, [r3, #8]
    3722:	7bd3      	ldrb	r3, [r2, #15]
    3724:	3301      	adds	r3, #1
    3726:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    3728:	2000      	movs	r0, #0
    372a:	f7ff ffd1 	bl	36d0 <update_cache>
	__asm__ volatile(
    372e:	f384 8811 	msr	BASEPRI, r4
    3732:	f3bf 8f6f 	isb	sy
}
    3736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    373a:	f001 bcba 	b.w	50b2 <z_reschedule_unlocked>
    373e:	bf00      	nop
    3740:	20000284 	.word	0x20000284

00003744 <z_add_thread_to_ready_q>:
{
    3744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    3746:	f04f 0320 	mov.w	r3, #32
    374a:	f3ef 8411 	mrs	r4, BASEPRI
    374e:	f383 8811 	msr	BASEPRI, r3
    3752:	f3bf 8f6f 	isb	sy
	return list->head == list;
    3756:	4a15      	ldr	r2, [pc, #84]	; (37ac <z_add_thread_to_ready_q+0x68>)
    3758:	4611      	mov	r1, r2
    375a:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    375e:	428b      	cmp	r3, r1
    3760:	d01d      	beq.n	379e <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3762:	b1e3      	cbz	r3, 379e <z_add_thread_to_ready_q+0x5a>
    3764:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    3766:	f990 500e 	ldrsb.w	r5, [r0, #14]
    376a:	f993 700e 	ldrsb.w	r7, [r3, #14]
    376e:	42af      	cmp	r7, r5
    3770:	dd10      	ble.n	3794 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
    3772:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3774:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    3778:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    377a:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    377c:	7b43      	ldrb	r3, [r0, #13]
    377e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3782:	7343      	strb	r3, [r0, #13]
		update_cache(0);
    3784:	2000      	movs	r0, #0
    3786:	f7ff ffa3 	bl	36d0 <update_cache>
	__asm__ volatile(
    378a:	f384 8811 	msr	BASEPRI, r4
    378e:	f3bf 8f6f 	isb	sy
}
    3792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    3794:	42b3      	cmp	r3, r6
    3796:	d002      	beq.n	379e <z_add_thread_to_ready_q+0x5a>
    3798:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    379a:	2b00      	cmp	r3, #0
    379c:	d1e5      	bne.n	376a <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
    379e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    37a0:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    37a2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    37a4:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
    37a6:	6018      	str	r0, [r3, #0]
	list->tail = node;
    37a8:	62d0      	str	r0, [r2, #44]	; 0x2c
    37aa:	e7e7      	b.n	377c <z_add_thread_to_ready_q+0x38>
    37ac:	20000284 	.word	0x20000284

000037b0 <z_move_thread_to_end_of_prio_q>:
{
    37b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37b2:	4604      	mov	r4, r0
	__asm__ volatile(
    37b4:	f04f 0320 	mov.w	r3, #32
    37b8:	f3ef 8511 	mrs	r5, BASEPRI
    37bc:	f383 8811 	msr	BASEPRI, r3
    37c0:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    37c4:	7b43      	ldrb	r3, [r0, #13]
    37c6:	065a      	lsls	r2, r3, #25
    37c8:	d503      	bpl.n	37d2 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    37ca:	4601      	mov	r1, r0
    37cc:	4817      	ldr	r0, [pc, #92]	; (382c <z_move_thread_to_end_of_prio_q+0x7c>)
    37ce:	f7ff ff69 	bl	36a4 <z_priq_dumb_remove>
	return list->head == list;
    37d2:	4a17      	ldr	r2, [pc, #92]	; (3830 <z_move_thread_to_end_of_prio_q+0x80>)
    37d4:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    37d8:	f102 0128 	add.w	r1, r2, #40	; 0x28
    37dc:	428b      	cmp	r3, r1
    37de:	d01f      	beq.n	3820 <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    37e0:	b1f3      	cbz	r3, 3820 <z_move_thread_to_end_of_prio_q+0x70>
	if (t1->base.prio < t2->base.prio) {
    37e2:	f994 600e 	ldrsb.w	r6, [r4, #14]
    37e6:	f993 700e 	ldrsb.w	r7, [r3, #14]
    37ea:	42b7      	cmp	r7, r6
    37ec:	dd13      	ble.n	3816 <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
    37ee:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    37f0:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    37f4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    37f6:	605c      	str	r4, [r3, #4]
    37f8:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    37fa:	6890      	ldr	r0, [r2, #8]
    37fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3800:	7363      	strb	r3, [r4, #13]
    3802:	1b03      	subs	r3, r0, r4
    3804:	4258      	negs	r0, r3
    3806:	4158      	adcs	r0, r3
    3808:	f7ff ff62 	bl	36d0 <update_cache>
	__asm__ volatile(
    380c:	f385 8811 	msr	BASEPRI, r5
    3810:	f3bf 8f6f 	isb	sy
}
    3814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    3816:	4283      	cmp	r3, r0
    3818:	d002      	beq.n	3820 <z_move_thread_to_end_of_prio_q+0x70>
    381a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    381c:	2b00      	cmp	r3, #0
    381e:	d1e2      	bne.n	37e6 <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
    3820:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    3824:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    3826:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3828:	62d4      	str	r4, [r2, #44]	; 0x2c
    382a:	e7e5      	b.n	37f8 <z_move_thread_to_end_of_prio_q+0x48>
    382c:	200002ac 	.word	0x200002ac
    3830:	20000284 	.word	0x20000284

00003834 <z_time_slice>:
	if (pending_current == _current) {
    3834:	4a15      	ldr	r2, [pc, #84]	; (388c <z_time_slice+0x58>)
    3836:	4916      	ldr	r1, [pc, #88]	; (3890 <z_time_slice+0x5c>)
{
    3838:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    383a:	680c      	ldr	r4, [r1, #0]
    383c:	6893      	ldr	r3, [r2, #8]
    383e:	42a3      	cmp	r3, r4
    3840:	4614      	mov	r4, r2
    3842:	d103      	bne.n	384c <z_time_slice+0x18>
}
    3844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    3848:	f7ff bed6 	b.w	35f8 <z_reset_time_slice>
	pending_current = NULL;
    384c:	2500      	movs	r5, #0
    384e:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
    3850:	4910      	ldr	r1, [pc, #64]	; (3894 <z_time_slice+0x60>)
    3852:	6809      	ldr	r1, [r1, #0]
    3854:	b1b9      	cbz	r1, 3886 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
    3856:	89d9      	ldrh	r1, [r3, #14]
    3858:	297f      	cmp	r1, #127	; 0x7f
    385a:	d814      	bhi.n	3886 <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
    385c:	490e      	ldr	r1, [pc, #56]	; (3898 <z_time_slice+0x64>)
    385e:	f993 500e 	ldrsb.w	r5, [r3, #14]
    3862:	6809      	ldr	r1, [r1, #0]
    3864:	428d      	cmp	r5, r1
    3866:	db0e      	blt.n	3886 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
    3868:	490c      	ldr	r1, [pc, #48]	; (389c <z_time_slice+0x68>)
    386a:	428b      	cmp	r3, r1
    386c:	d00b      	beq.n	3886 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
    386e:	6999      	ldr	r1, [r3, #24]
    3870:	b949      	cbnz	r1, 3886 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    3872:	6911      	ldr	r1, [r2, #16]
    3874:	4281      	cmp	r1, r0
    3876:	dc03      	bgt.n	3880 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    3878:	4618      	mov	r0, r3
    387a:	f7ff ff99 	bl	37b0 <z_move_thread_to_end_of_prio_q>
    387e:	e7e1      	b.n	3844 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
    3880:	1a09      	subs	r1, r1, r0
    3882:	6111      	str	r1, [r2, #16]
}
    3884:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    3886:	2300      	movs	r3, #0
    3888:	6123      	str	r3, [r4, #16]
    388a:	e7fb      	b.n	3884 <z_time_slice+0x50>
    388c:	20000284 	.word	0x20000284
    3890:	200002b4 	.word	0x200002b4
    3894:	200002bc 	.word	0x200002bc
    3898:	200002b8 	.word	0x200002b8
    389c:	200001ac 	.word	0x200001ac

000038a0 <z_remove_thread_from_ready_q>:
{
    38a0:	b538      	push	{r3, r4, r5, lr}
    38a2:	4604      	mov	r4, r0
	__asm__ volatile(
    38a4:	f04f 0320 	mov.w	r3, #32
    38a8:	f3ef 8511 	mrs	r5, BASEPRI
    38ac:	f383 8811 	msr	BASEPRI, r3
    38b0:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    38b4:	7b43      	ldrb	r3, [r0, #13]
    38b6:	065a      	lsls	r2, r3, #25
    38b8:	d507      	bpl.n	38ca <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    38ba:	4601      	mov	r1, r0
    38bc:	4809      	ldr	r0, [pc, #36]	; (38e4 <z_remove_thread_from_ready_q+0x44>)
    38be:	f7ff fef1 	bl	36a4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    38c2:	7b63      	ldrb	r3, [r4, #13]
    38c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    38c8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    38ca:	4b07      	ldr	r3, [pc, #28]	; (38e8 <z_remove_thread_from_ready_q+0x48>)
    38cc:	6898      	ldr	r0, [r3, #8]
    38ce:	1b03      	subs	r3, r0, r4
    38d0:	4258      	negs	r0, r3
    38d2:	4158      	adcs	r0, r3
    38d4:	f7ff fefc 	bl	36d0 <update_cache>
	__asm__ volatile(
    38d8:	f385 8811 	msr	BASEPRI, r5
    38dc:	f3bf 8f6f 	isb	sy
}
    38e0:	bd38      	pop	{r3, r4, r5, pc}
    38e2:	bf00      	nop
    38e4:	200002ac 	.word	0x200002ac
    38e8:	20000284 	.word	0x20000284

000038ec <pend>:
{
    38ec:	b570      	push	{r4, r5, r6, lr}
    38ee:	4604      	mov	r4, r0
    38f0:	460d      	mov	r5, r1
    38f2:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
    38f4:	f7ff ffd4 	bl	38a0 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    38f8:	7b63      	ldrb	r3, [r4, #13]
    38fa:	f043 0302 	orr.w	r3, r3, #2
    38fe:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    3900:	b17d      	cbz	r5, 3922 <pend+0x36>
	return list->head == list;
    3902:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    3904:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3906:	429d      	cmp	r5, r3
    3908:	d027      	beq.n	395a <pend+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    390a:	b333      	cbz	r3, 395a <pend+0x6e>
	if (t1->base.prio < t2->base.prio) {
    390c:	f994 200e 	ldrsb.w	r2, [r4, #14]
    3910:	f993 100e 	ldrsb.w	r1, [r3, #14]
    3914:	4291      	cmp	r1, r2
    3916:	dd1a      	ble.n	394e <pend+0x62>
	node->prev = successor->prev;
    3918:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    391a:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    391e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    3920:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
    3922:	1c73      	adds	r3, r6, #1
    3924:	d020      	beq.n	3968 <pend+0x7c>
    3926:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    392a:	f240 30e7 	movw	r0, #999	; 0x3e7
    392e:	2100      	movs	r1, #0
    3930:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3934:	fbc5 0106 	smlal	r0, r1, r5, r6
    3938:	2300      	movs	r3, #0
    393a:	f7fc fbcf 	bl	dc <__aeabi_ldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    393e:	490b      	ldr	r1, [pc, #44]	; (396c <pend+0x80>)
    3940:	1c42      	adds	r2, r0, #1
    3942:	f104 0018 	add.w	r0, r4, #24
}
    3946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    394a:	f000 b9fb 	b.w	3d44 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
    394e:	6869      	ldr	r1, [r5, #4]
    3950:	428b      	cmp	r3, r1
    3952:	d002      	beq.n	395a <pend+0x6e>
    3954:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3956:	2b00      	cmp	r3, #0
    3958:	d1da      	bne.n	3910 <pend+0x24>
	node->prev = list->tail;
    395a:	686b      	ldr	r3, [r5, #4]
    395c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    395e:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    3960:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    3962:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3964:	606c      	str	r4, [r5, #4]
    3966:	e7dc      	b.n	3922 <pend+0x36>
}
    3968:	bd70      	pop	{r4, r5, r6, pc}
    396a:	bf00      	nop
    396c:	000050d3 	.word	0x000050d3

00003970 <z_pend_curr>:
{
    3970:	b510      	push	{r4, lr}
    3972:	460c      	mov	r4, r1
    3974:	4611      	mov	r1, r2
	pending_current = _current;
    3976:	4a06      	ldr	r2, [pc, #24]	; (3990 <z_pend_curr+0x20>)
    3978:	6890      	ldr	r0, [r2, #8]
    397a:	4a06      	ldr	r2, [pc, #24]	; (3994 <z_pend_curr+0x24>)
    397c:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
    397e:	461a      	mov	r2, r3
    3980:	f7ff ffb4 	bl	38ec <pend>
    3984:	4620      	mov	r0, r4
}
    3986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    398a:	f7fd bc89 	b.w	12a0 <z_arch_swap>
    398e:	bf00      	nop
    3990:	20000284 	.word	0x20000284
    3994:	200002b4 	.word	0x200002b4

00003998 <z_tick_sleep.part.18>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
    3998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
    399a:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
    399c:	f001 fc8b 	bl	52b6 <z_tick_get_32>
    39a0:	1834      	adds	r4, r6, r0
	__asm__ volatile(
    39a2:	f04f 0320 	mov.w	r3, #32
    39a6:	f3ef 8711 	mrs	r7, BASEPRI
    39aa:	f383 8811 	msr	BASEPRI, r3
    39ae:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    39b2:	4d0d      	ldr	r5, [pc, #52]	; (39e8 <z_tick_sleep.part.18+0x50>)
    39b4:	4b0d      	ldr	r3, [pc, #52]	; (39ec <z_tick_sleep.part.18+0x54>)
    39b6:	68a8      	ldr	r0, [r5, #8]
    39b8:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
    39ba:	f7ff ff71 	bl	38a0 <z_remove_thread_from_ready_q>
    39be:	68a8      	ldr	r0, [r5, #8]
    39c0:	490b      	ldr	r1, [pc, #44]	; (39f0 <z_tick_sleep.part.18+0x58>)
    39c2:	4632      	mov	r2, r6
    39c4:	3018      	adds	r0, #24
    39c6:	f000 f9bd 	bl	3d44 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
    39ca:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    39cc:	7b53      	ldrb	r3, [r2, #13]
    39ce:	f043 0310 	orr.w	r3, r3, #16
    39d2:	7353      	strb	r3, [r2, #13]
    39d4:	4638      	mov	r0, r7
    39d6:	f7fd fc63 	bl	12a0 <z_arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    39da:	f001 fc6c 	bl	52b6 <z_tick_get_32>
    39de:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    39e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    39e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    39e6:	bf00      	nop
    39e8:	20000284 	.word	0x20000284
    39ec:	200002b4 	.word	0x200002b4
    39f0:	000050d3 	.word	0x000050d3

000039f4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    39f4:	4b04      	ldr	r3, [pc, #16]	; (3a08 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    39f6:	2100      	movs	r1, #0
    39f8:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    39fc:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    3a00:	4608      	mov	r0, r1
    3a02:	f7ff be0f 	b.w	3624 <k_sched_time_slice_set>
    3a06:	bf00      	nop
    3a08:	20000284 	.word	0x20000284

00003a0c <z_impl_k_yield>:
{
    3a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    3a0e:	4c23      	ldr	r4, [pc, #140]	; (3a9c <z_impl_k_yield+0x90>)
    3a10:	4b23      	ldr	r3, [pc, #140]	; (3aa0 <z_impl_k_yield+0x94>)
    3a12:	68a2      	ldr	r2, [r4, #8]
    3a14:	429a      	cmp	r2, r3
    3a16:	d029      	beq.n	3a6c <z_impl_k_yield+0x60>
    3a18:	f04f 0320 	mov.w	r3, #32
    3a1c:	f3ef 8611 	mrs	r6, BASEPRI
    3a20:	f383 8811 	msr	BASEPRI, r3
    3a24:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    3a28:	f104 0528 	add.w	r5, r4, #40	; 0x28
    3a2c:	68a1      	ldr	r1, [r4, #8]
    3a2e:	4628      	mov	r0, r5
    3a30:	f7ff fe38 	bl	36a4 <z_priq_dumb_remove>
	return list->head == list;
    3a34:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
    3a36:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3a38:	42aa      	cmp	r2, r5
    3a3a:	d028      	beq.n	3a8e <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3a3c:	b33a      	cbz	r2, 3a8e <z_impl_k_yield+0x82>
    3a3e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    3a40:	f993 100e 	ldrsb.w	r1, [r3, #14]
    3a44:	f992 700e 	ldrsb.w	r7, [r2, #14]
    3a48:	428f      	cmp	r7, r1
    3a4a:	dd1b      	ble.n	3a84 <z_impl_k_yield+0x78>
	node->prev = successor->prev;
    3a4c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    3a4e:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
    3a52:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    3a54:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
    3a56:	7b5a      	ldrb	r2, [r3, #13]
    3a58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    3a5c:	735a      	strb	r2, [r3, #13]
			update_cache(1);
    3a5e:	2001      	movs	r0, #1
    3a60:	f7ff fe36 	bl	36d0 <update_cache>
	__asm__ volatile(
    3a64:	f386 8811 	msr	BASEPRI, r6
    3a68:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    3a6c:	f04f 0320 	mov.w	r3, #32
    3a70:	f3ef 8011 	mrs	r0, BASEPRI
    3a74:	f383 8811 	msr	BASEPRI, r3
    3a78:	f3bf 8f6f 	isb	sy
}
    3a7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3a80:	f7fd bc0e 	b.w	12a0 <z_arch_swap>
	return (node == list->tail) ? NULL : node->next;
    3a84:	4282      	cmp	r2, r0
    3a86:	d002      	beq.n	3a8e <z_impl_k_yield+0x82>
    3a88:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3a8a:	2a00      	cmp	r2, #0
    3a8c:	d1da      	bne.n	3a44 <z_impl_k_yield+0x38>
	node->prev = list->tail;
    3a8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3a90:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
    3a92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
    3a94:	601d      	str	r5, [r3, #0]
	list->tail->next = node;
    3a96:	6013      	str	r3, [r2, #0]
	list->tail = node;
    3a98:	62e3      	str	r3, [r4, #44]	; 0x2c
    3a9a:	e7dc      	b.n	3a56 <z_impl_k_yield+0x4a>
    3a9c:	20000284 	.word	0x20000284
    3aa0:	200001ac 	.word	0x200001ac

00003aa4 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    3aa4:	4b01      	ldr	r3, [pc, #4]	; (3aac <z_impl_k_current_get+0x8>)
    3aa6:	6898      	ldr	r0, [r3, #8]
    3aa8:	4770      	bx	lr
    3aaa:	bf00      	nop
    3aac:	20000284 	.word	0x20000284

00003ab0 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3ab0:	b570      	push	{r4, r5, r6, lr}
    3ab2:	4604      	mov	r4, r0
    3ab4:	f04f 0320 	mov.w	r3, #32
    3ab8:	f3ef 8611 	mrs	r6, BASEPRI
    3abc:	f383 8811 	msr	BASEPRI, r3
    3ac0:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    3ac4:	f001 fb36 	bl	5134 <z_unpend_first_thread>
	if (thread != NULL) {
    3ac8:	4605      	mov	r5, r0
    3aca:	b170      	cbz	r0, 3aea <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3acc:	7b43      	ldrb	r3, [r0, #13]
    3ace:	06db      	lsls	r3, r3, #27
    3ad0:	d103      	bne.n	3ada <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
    3ad2:	6983      	ldr	r3, [r0, #24]
    3ad4:	b90b      	cbnz	r3, 3ada <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
    3ad6:	f7ff fe35 	bl	3744 <z_add_thread_to_ready_q>
    3ada:	2300      	movs	r3, #0
    3adc:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    3ade:	4631      	mov	r1, r6
    3ae0:	4805      	ldr	r0, [pc, #20]	; (3af8 <z_impl_k_sem_give+0x48>)
}
    3ae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
    3ae6:	f001 bac5 	b.w	5074 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3aea:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3aee:	429a      	cmp	r2, r3
    3af0:	bf18      	it	ne
    3af2:	3301      	addne	r3, #1
    3af4:	60a3      	str	r3, [r4, #8]
    3af6:	e7f2      	b.n	3ade <z_impl_k_sem_give+0x2e>
    3af8:	200002c9 	.word	0x200002c9

00003afc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    3afc:	b410      	push	{r4}
    3afe:	4602      	mov	r2, r0
    3b00:	460b      	mov	r3, r1
    3b02:	f04f 0020 	mov.w	r0, #32
    3b06:	f3ef 8111 	mrs	r1, BASEPRI
    3b0a:	f380 8811 	msr	BASEPRI, r0
    3b0e:	f3bf 8f6f 	isb	sy
	__ASSERT(((z_arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
    3b12:	6894      	ldr	r4, [r2, #8]
    3b14:	b144      	cbz	r4, 3b28 <z_impl_k_sem_take+0x2c>
		sem->count--;
    3b16:	3c01      	subs	r4, #1
    3b18:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
    3b1a:	f381 8811 	msr	BASEPRI, r1
    3b1e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
    3b22:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
    3b24:	bc10      	pop	{r4}
    3b26:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
    3b28:	b933      	cbnz	r3, 3b38 <z_impl_k_sem_take+0x3c>
    3b2a:	f381 8811 	msr	BASEPRI, r1
    3b2e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    3b32:	f06f 000f 	mvn.w	r0, #15
    3b36:	e7f5      	b.n	3b24 <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3b38:	4801      	ldr	r0, [pc, #4]	; (3b40 <z_impl_k_sem_take+0x44>)
}
    3b3a:	bc10      	pop	{r4}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3b3c:	f7ff bf18 	b.w	3970 <z_pend_curr>
    3b40:	200002c9 	.word	0x200002c9

00003b44 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    3b44:	b510      	push	{r4, lr}
    3b46:	4602      	mov	r2, r0
	__asm__ volatile(
    3b48:	f04f 0320 	mov.w	r3, #32
    3b4c:	f3ef 8411 	mrs	r4, BASEPRI
    3b50:	f383 8811 	msr	BASEPRI, r3
    3b54:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
    3b58:	7b43      	ldrb	r3, [r0, #13]
    3b5a:	0759      	lsls	r1, r3, #29
    3b5c:	d404      	bmi.n	3b68 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
    3b5e:	f384 8811 	msr	BASEPRI, r4
    3b62:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
    3b66:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3b68:	f023 0304 	bic.w	r3, r3, #4
    3b6c:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
    3b6e:	f001 fb2d 	bl	51cc <z_is_thread_ready>
    3b72:	b110      	cbz	r0, 3b7a <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
    3b74:	4610      	mov	r0, r2
    3b76:	f7ff fde5 	bl	3744 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
    3b7a:	4621      	mov	r1, r4
    3b7c:	4802      	ldr	r0, [pc, #8]	; (3b88 <z_impl_k_thread_start+0x44>)
}
    3b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
    3b82:	f001 ba77 	b.w	5074 <z_reschedule>
    3b86:	bf00      	nop
    3b88:	200002c9 	.word	0x200002c9

00003b8c <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    3b8c:	b530      	push	{r4, r5, lr}
    3b8e:	b087      	sub	sp, #28
    3b90:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    3b92:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    3b94:	9504      	str	r5, [sp, #16]
    3b96:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    3b98:	9503      	str	r5, [sp, #12]
    3b9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    3b9c:	9502      	str	r5, [sp, #8]
    3b9e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3ba0:	9501      	str	r5, [sp, #4]
    3ba2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    3ba4:	9500      	str	r5, [sp, #0]
    3ba6:	f7fd fbf7 	bl	1398 <z_arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    3baa:	4b03      	ldr	r3, [pc, #12]	; (3bb8 <z_setup_new_thread+0x2c>)
    3bac:	689b      	ldr	r3, [r3, #8]
    3bae:	b103      	cbz	r3, 3bb2 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    3bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    3bb2:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    3bb4:	b007      	add	sp, #28
    3bb6:	bd30      	pop	{r4, r5, pc}
    3bb8:	20000284 	.word	0x20000284

00003bbc <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    3bbc:	b570      	push	{r4, r5, r6, lr}
    3bbe:	b086      	sub	sp, #24
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    3bc0:	2600      	movs	r6, #0
    3bc2:	9605      	str	r6, [sp, #20]
    3bc4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    3bc6:	9604      	str	r6, [sp, #16]
    3bc8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    3bca:	9603      	str	r6, [sp, #12]
    3bcc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    3bce:	9602      	str	r6, [sp, #8]
    3bd0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
    3bd2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    3bd4:	9601      	str	r6, [sp, #4]
    3bd6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    3bd8:	9600      	str	r6, [sp, #0]
{
    3bda:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    3bdc:	f7ff ffd6 	bl	3b8c <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
    3be0:	1c6b      	adds	r3, r5, #1
    3be2:	d003      	beq.n	3bec <z_impl_k_thread_create+0x30>
	if (delay == 0) {
    3be4:	b92d      	cbnz	r5, 3bf2 <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
    3be6:	4620      	mov	r0, r4
    3be8:	f7ff ffac 	bl	3b44 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
    3bec:	4620      	mov	r0, r4
    3bee:	b006      	add	sp, #24
    3bf0:	bd70      	pop	{r4, r5, r6, pc}
    3bf2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    3bf6:	f240 30e7 	movw	r0, #999	; 0x3e7
    3bfa:	2100      	movs	r1, #0
    3bfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3c00:	2300      	movs	r3, #0
    3c02:	fbc6 0105 	smlal	r0, r1, r6, r5
    3c06:	f7fc fa69 	bl	dc <__aeabi_ldivmod>
    3c0a:	4903      	ldr	r1, [pc, #12]	; (3c18 <z_impl_k_thread_create+0x5c>)
    3c0c:	1c42      	adds	r2, r0, #1
    3c0e:	f104 0018 	add.w	r0, r4, #24
    3c12:	f000 f897 	bl	3d44 <z_add_timeout>
    3c16:	e7e9      	b.n	3bec <z_impl_k_thread_create+0x30>
    3c18:	000050d3 	.word	0x000050d3

00003c1c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    3c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    3c20:	4e28      	ldr	r6, [pc, #160]	; (3cc4 <z_init_static_threads+0xa8>)
    3c22:	4d29      	ldr	r5, [pc, #164]	; (3cc8 <z_init_static_threads+0xac>)
{
    3c24:	b087      	sub	sp, #28
    3c26:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    3c28:	42b5      	cmp	r5, r6
    3c2a:	f105 0430 	add.w	r4, r5, #48	; 0x30
    3c2e:	d310      	bcc.n	3c52 <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    3c30:	f7ff fd24 	bl	367c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3c34:	4c24      	ldr	r4, [pc, #144]	; (3cc8 <z_init_static_threads+0xac>)
    3c36:	f8df a094 	ldr.w	sl, [pc, #148]	; 3ccc <z_init_static_threads+0xb0>
    3c3a:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    3c3e:	f240 36e7 	movw	r6, #999	; 0x3e7
    3c42:	2700      	movs	r7, #0
    3c44:	4544      	cmp	r4, r8
    3c46:	d321      	bcc.n	3c8c <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
    3c48:	b007      	add	sp, #28
    3c4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    3c4e:	f7ff bd5d 	b.w	370c <k_sched_unlock>
		z_setup_new_thread(
    3c52:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3c56:	9305      	str	r3, [sp, #20]
    3c58:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3c5c:	9304      	str	r3, [sp, #16]
    3c5e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3c62:	9303      	str	r3, [sp, #12]
    3c64:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3c68:	9302      	str	r3, [sp, #8]
    3c6a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3c6e:	9301      	str	r3, [sp, #4]
    3c70:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3c74:	9300      	str	r3, [sp, #0]
    3c76:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    3c7a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    3c7e:	f7ff ff85 	bl	3b8c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3c82:	f854 3c30 	ldr.w	r3, [r4, #-48]
    3c86:	64dd      	str	r5, [r3, #76]	; 0x4c
    3c88:	4625      	mov	r5, r4
    3c8a:	e7cd      	b.n	3c28 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
    3c8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    3c8e:	1c4b      	adds	r3, r1, #1
    3c90:	d004      	beq.n	3c9c <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
    3c92:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
    3c94:	b921      	cbnz	r1, 3ca0 <z_init_static_threads+0x84>
    3c96:	4628      	mov	r0, r5
    3c98:	f7ff ff54 	bl	3b44 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    3c9c:	3430      	adds	r4, #48	; 0x30
    3c9e:	e7d1      	b.n	3c44 <z_init_static_threads+0x28>
    3ca0:	46b3      	mov	fp, r6
    3ca2:	46bc      	mov	ip, r7
    3ca4:	fbc9 bc01 	smlal	fp, ip, r9, r1
    3ca8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3cac:	2300      	movs	r3, #0
    3cae:	4658      	mov	r0, fp
    3cb0:	4661      	mov	r1, ip
    3cb2:	f7fc fa13 	bl	dc <__aeabi_ldivmod>
    3cb6:	4651      	mov	r1, sl
    3cb8:	1c42      	adds	r2, r0, #1
    3cba:	f105 0018 	add.w	r0, r5, #24
    3cbe:	f000 f841 	bl	3d44 <z_add_timeout>
    3cc2:	e7eb      	b.n	3c9c <z_init_static_threads+0x80>
    3cc4:	20001870 	.word	0x20001870
    3cc8:	20001870 	.word	0x20001870
    3ccc:	000050d3 	.word	0x000050d3

00003cd0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    3cd0:	4b03      	ldr	r3, [pc, #12]	; (3ce0 <elapsed+0x10>)
    3cd2:	681b      	ldr	r3, [r3, #0]
    3cd4:	b90b      	cbnz	r3, 3cda <elapsed+0xa>
    3cd6:	f7fd baa1 	b.w	121c <z_clock_elapsed>
}
    3cda:	2000      	movs	r0, #0
    3cdc:	4770      	bx	lr
    3cde:	bf00      	nop
    3ce0:	200002c0 	.word	0x200002c0

00003ce4 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3ce4:	6803      	ldr	r3, [r0, #0]
    3ce6:	b140      	cbz	r0, 3cfa <remove_timeout+0x16>
    3ce8:	4a07      	ldr	r2, [pc, #28]	; (3d08 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    3cea:	6852      	ldr	r2, [r2, #4]
    3cec:	4290      	cmp	r0, r2
    3cee:	d004      	beq.n	3cfa <remove_timeout+0x16>
	if (next(t) != NULL) {
    3cf0:	b11b      	cbz	r3, 3cfa <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    3cf2:	689a      	ldr	r2, [r3, #8]
    3cf4:	6881      	ldr	r1, [r0, #8]
    3cf6:	440a      	add	r2, r1
    3cf8:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    3cfa:	6842      	ldr	r2, [r0, #4]
    3cfc:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    3cfe:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3d00:	2300      	movs	r3, #0
	node->prev = NULL;
    3d02:	e9c0 3300 	strd	r3, r3, [r0]
}
    3d06:	4770      	bx	lr
    3d08:	200017d8 	.word	0x200017d8

00003d0c <next_timeout>:
	return list->head == list;
    3d0c:	4b0b      	ldr	r3, [pc, #44]	; (3d3c <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    3d0e:	b510      	push	{r4, lr}
    3d10:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3d12:	429c      	cmp	r4, r3
    3d14:	bf08      	it	eq
    3d16:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    3d18:	f7ff ffda 	bl	3cd0 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    3d1c:	b154      	cbz	r4, 3d34 <next_timeout+0x28>
    3d1e:	68a3      	ldr	r3, [r4, #8]
    3d20:	1a18      	subs	r0, r3, r0
    3d22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    3d26:	4b06      	ldr	r3, [pc, #24]	; (3d40 <next_timeout+0x34>)
    3d28:	691b      	ldr	r3, [r3, #16]
    3d2a:	b113      	cbz	r3, 3d32 <next_timeout+0x26>
    3d2c:	4298      	cmp	r0, r3
    3d2e:	bfa8      	it	ge
    3d30:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    3d32:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    3d34:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    3d38:	e7f5      	b.n	3d26 <next_timeout+0x1a>
    3d3a:	bf00      	nop
    3d3c:	200017d8 	.word	0x200017d8
    3d40:	20000284 	.word	0x20000284

00003d44 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    3d44:	b570      	push	{r4, r5, r6, lr}
    3d46:	4604      	mov	r4, r0
    3d48:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    3d4a:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
    3d4c:	f04f 0320 	mov.w	r3, #32
    3d50:	f3ef 8511 	mrs	r5, BASEPRI
    3d54:	f383 8811 	msr	BASEPRI, r3
    3d58:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    3d5c:	f7ff ffb8 	bl	3cd0 <elapsed>
	return list->head == list;
    3d60:	4b18      	ldr	r3, [pc, #96]	; (3dc4 <z_add_timeout+0x80>)
    3d62:	681a      	ldr	r2, [r3, #0]
    3d64:	2e01      	cmp	r6, #1
    3d66:	bfac      	ite	ge
    3d68:	1980      	addge	r0, r0, r6
    3d6a:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3d6c:	429a      	cmp	r2, r3
    3d6e:	60a0      	str	r0, [r4, #8]
    3d70:	d001      	beq.n	3d76 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3d72:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    3d74:	b932      	cbnz	r2, 3d84 <z_add_timeout+0x40>
	node->prev = list->tail;
    3d76:	685a      	ldr	r2, [r3, #4]
    3d78:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    3d7a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    3d7c:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
    3d7e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    3d80:	605c      	str	r4, [r3, #4]
    3d82:	e00a      	b.n	3d9a <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    3d84:	6890      	ldr	r0, [r2, #8]
    3d86:	68a1      	ldr	r1, [r4, #8]
    3d88:	4288      	cmp	r0, r1
    3d8a:	dd15      	ble.n	3db8 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
    3d8c:	1a41      	subs	r1, r0, r1
    3d8e:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    3d90:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    3d92:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
    3d96:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    3d98:	6054      	str	r4, [r2, #4]
	return list->head == list;
    3d9a:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3d9c:	429a      	cmp	r2, r3
    3d9e:	d006      	beq.n	3dae <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    3da0:	4294      	cmp	r4, r2
    3da2:	d104      	bne.n	3dae <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
    3da4:	f7ff ffb2 	bl	3d0c <next_timeout>
    3da8:	2100      	movs	r1, #0
    3daa:	f7fd f9e9 	bl	1180 <z_clock_set_timeout>
	__asm__ volatile(
    3dae:	f385 8811 	msr	BASEPRI, r5
    3db2:	f3bf 8f6f 	isb	sy
		}
	}
}
    3db6:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    3db8:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    3dba:	42b2      	cmp	r2, r6
    3dbc:	60a1      	str	r1, [r4, #8]
    3dbe:	d0da      	beq.n	3d76 <z_add_timeout+0x32>
    3dc0:	6812      	ldr	r2, [r2, #0]
    3dc2:	e7d7      	b.n	3d74 <z_add_timeout+0x30>
    3dc4:	200017d8 	.word	0x200017d8

00003dc8 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    3dc8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    3dcc:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    3dce:	f7ff fd31 	bl	3834 <z_time_slice>
	__asm__ volatile(
    3dd2:	f04f 0320 	mov.w	r3, #32
    3dd6:	f3ef 8511 	mrs	r5, BASEPRI
    3dda:	f383 8811 	msr	BASEPRI, r3
    3dde:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    3de2:	4e21      	ldr	r6, [pc, #132]	; (3e68 <z_clock_announce+0xa0>)
    3de4:	4f21      	ldr	r7, [pc, #132]	; (3e6c <z_clock_announce+0xa4>)
	return list->head == list;
    3de6:	f8df 9088 	ldr.w	r9, [pc, #136]	; 3e70 <z_clock_announce+0xa8>
    3dea:	6034      	str	r4, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    3dec:	46b8      	mov	r8, r7
    3dee:	f8d9 4000 	ldr.w	r4, [r9]
    3df2:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3df4:	454c      	cmp	r4, r9
    3df6:	e9d7 bc00 	ldrd	fp, ip, [r7]
    3dfa:	d005      	beq.n	3e08 <z_clock_announce+0x40>
    3dfc:	b124      	cbz	r4, 3e08 <z_clock_announce+0x40>
    3dfe:	68a3      	ldr	r3, [r4, #8]
    3e00:	4293      	cmp	r3, r2
    3e02:	dd14      	ble.n	3e2e <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    3e04:	1a9b      	subs	r3, r3, r2
    3e06:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
    3e08:	eb1b 0002 	adds.w	r0, fp, r2
    3e0c:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
    3e10:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    3e12:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
    3e16:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    3e18:	f7ff ff78 	bl	3d0c <next_timeout>
    3e1c:	4621      	mov	r1, r4
    3e1e:	f7fd f9af 	bl	1180 <z_clock_set_timeout>
	__asm__ volatile(
    3e22:	f385 8811 	msr	BASEPRI, r5
    3e26:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    3e2a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
    3e2e:	eb1b 0003 	adds.w	r0, fp, r3
    3e32:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
    3e36:	1ad3      	subs	r3, r2, r3
    3e38:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    3e3a:	2300      	movs	r3, #0
		curr_tick += dt;
    3e3c:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
    3e40:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    3e42:	4620      	mov	r0, r4
    3e44:	f7ff ff4e 	bl	3ce4 <remove_timeout>
    3e48:	f385 8811 	msr	BASEPRI, r5
    3e4c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    3e50:	68e3      	ldr	r3, [r4, #12]
    3e52:	4798      	blx	r3
	__asm__ volatile(
    3e54:	f04f 0320 	mov.w	r3, #32
    3e58:	f3ef 8511 	mrs	r5, BASEPRI
    3e5c:	f383 8811 	msr	BASEPRI, r3
    3e60:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    3e64:	e7c3      	b.n	3dee <z_clock_announce+0x26>
    3e66:	bf00      	nop
    3e68:	200002c0 	.word	0x200002c0
    3e6c:	20000000 	.word	0x20000000
    3e70:	200017d8 	.word	0x200017d8

00003e74 <z_tick_get>:

s64_t z_tick_get(void)
{
    3e74:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
    3e78:	f04f 0320 	mov.w	r3, #32
    3e7c:	f3ef 8411 	mrs	r4, BASEPRI
    3e80:	f383 8811 	msr	BASEPRI, r3
    3e84:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    3e88:	f7fd f9c8 	bl	121c <z_clock_elapsed>
    3e8c:	4b07      	ldr	r3, [pc, #28]	; (3eac <z_tick_get+0x38>)
    3e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e92:	eb12 0b00 	adds.w	fp, r2, r0
    3e96:	f143 0c00 	adc.w	ip, r3, #0
    3e9a:	4658      	mov	r0, fp
    3e9c:	4661      	mov	r1, ip
	__asm__ volatile(
    3e9e:	f384 8811 	msr	BASEPRI, r4
    3ea2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    3ea6:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
    3eaa:	bf00      	nop
    3eac:	20000000 	.word	0x20000000

00003eb0 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
    3eb0:	6a02      	ldr	r2, [r0, #32]
    3eb2:	2a00      	cmp	r2, #0
{
    3eb4:	b538      	push	{r3, r4, r5, lr}
    3eb6:	4604      	mov	r4, r0
	if (timer->period > 0) {
    3eb8:	dd02      	ble.n	3ec0 <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    3eba:	490e      	ldr	r1, [pc, #56]	; (3ef4 <z_timer_expiration_handler+0x44>)
    3ebc:	f7ff ff42 	bl	3d44 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    3ec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3ec2:	3301      	adds	r3, #1
    3ec4:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    3ec6:	69a3      	ldr	r3, [r4, #24]
    3ec8:	b10b      	cbz	r3, 3ece <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
    3eca:	4620      	mov	r0, r4
    3ecc:	4798      	blx	r3
	return list->head == list;
    3ece:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3ed2:	42a5      	cmp	r5, r4
    3ed4:	d00d      	beq.n	3ef2 <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    3ed6:	b165      	cbz	r5, 3ef2 <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
    3ed8:	4628      	mov	r0, r5
    3eda:	f001 f8b2 	bl	5042 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3ede:	7b6b      	ldrb	r3, [r5, #13]
    3ee0:	06db      	lsls	r3, r3, #27
    3ee2:	d104      	bne.n	3eee <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
    3ee4:	69ab      	ldr	r3, [r5, #24]
    3ee6:	b913      	cbnz	r3, 3eee <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
    3ee8:	4628      	mov	r0, r5
    3eea:	f7ff fc2b 	bl	3744 <z_add_thread_to_ready_q>
    3eee:	2300      	movs	r3, #0
    3ef0:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	z_arch_thread_return_value_set(thread, 0);
}
    3ef2:	bd38      	pop	{r3, r4, r5, pc}
    3ef4:	00003eb1 	.word	0x00003eb1

00003ef8 <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
    3ef8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3efc:	f240 36e7 	movw	r6, #999	; 0x3e7
    3f00:	2700      	movs	r7, #0
    3f02:	4604      	mov	r4, r0
    3f04:	4688      	mov	r8, r1
    3f06:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    3f0a:	4630      	mov	r0, r6
    3f0c:	4639      	mov	r1, r7
    3f0e:	fbc5 0102 	smlal	r0, r1, r5, r2
    3f12:	2300      	movs	r3, #0
    3f14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3f18:	f7fc f8e0 	bl	dc <__aeabi_ldivmod>
    3f1c:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = z_ms_to_ticks(period);
    3f1e:	9000      	str	r0, [sp, #0]
    3f20:	4630      	mov	r0, r6
    3f22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3f26:	2300      	movs	r3, #0
    3f28:	fbc5 0108 	smlal	r0, r1, r5, r8
    3f2c:	f7fc f8d6 	bl	dc <__aeabi_ldivmod>
	duration_in_ticks = z_ms_to_ticks(duration);
    3f30:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
    3f32:	4620      	mov	r0, r4
    3f34:	f001 f97f 	bl	5236 <z_abort_timeout>
	timer->period = period_in_ticks;
    3f38:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    3f3a:	4905      	ldr	r1, [pc, #20]	; (3f50 <z_impl_k_timer_start+0x58>)
    3f3c:	9a01      	ldr	r2, [sp, #4]
	timer->period = period_in_ticks;
    3f3e:	6223      	str	r3, [r4, #32]
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    3f40:	4620      	mov	r0, r4
	timer->status = 0U;
    3f42:	2300      	movs	r3, #0
    3f44:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
    3f46:	b002      	add	sp, #8
    3f48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    3f4c:	f7ff befa 	b.w	3d44 <z_add_timeout>
    3f50:	00003eb1 	.word	0x00003eb1

00003f54 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    3f54:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    3f56:	4c07      	ldr	r4, [pc, #28]	; (3f74 <init_static_pools+0x20>)
    3f58:	4d07      	ldr	r5, [pc, #28]	; (3f78 <init_static_pools+0x24>)
    3f5a:	42ac      	cmp	r4, r5
    3f5c:	d301      	bcc.n	3f62 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    3f5e:	2000      	movs	r0, #0
    3f60:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3f62:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
    3f66:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
    3f68:	e9c4 3305 	strd	r3, r3, [r4, #20]
    3f6c:	f000 f840 	bl	3ff0 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    3f70:	341c      	adds	r4, #28
    3f72:	e7f2      	b.n	3f5a <init_static_pools+0x6>
    3f74:	20001870 	.word	0x20001870
    3f78:	20001870 	.word	0x20001870

00003f7c <es_led_init>:

#include <gpio.h>


int es_led_init(es_led_t* led, const char* dev_name, u32_t pin)
{
    3f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f7e:	4605      	mov	r5, r0
    3f80:	4616      	mov	r6, r2
    3f82:	4608      	mov	r0, r1
    3f84:	f7ff f940 	bl	3208 <z_impl_device_get_binding>
    led->dev   = device_get_binding(dev_name);
    led->pin   = pin;
    led->value = 0;
    3f88:	2400      	movs	r4, #0
    led->pin   = pin;
    3f8a:	e9c5 0600 	strd	r0, r6, [r5]
    led->value = 0;
    3f8e:	722c      	strb	r4, [r5, #8]
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
    3f90:	6843      	ldr	r3, [r0, #4]
    3f92:	4632      	mov	r2, r6
    3f94:	681f      	ldr	r7, [r3, #0]
    3f96:	4621      	mov	r1, r4
    3f98:	2381      	movs	r3, #129	; 0x81
    3f9a:	47b8      	blx	r7
    led->value = 1;
}

void es_led_off(es_led_t* led)
{
    led->value = 0;
    3f9c:	722c      	strb	r4, [r5, #8]
}
    3f9e:	4620      	mov	r0, r4
    3fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003fa2 <es_led_on>:
    led->value = 1;
    3fa2:	2301      	movs	r3, #1
    3fa4:	7203      	strb	r3, [r0, #8]
}
    3fa6:	4770      	bx	lr

00003fa8 <es_button_create>:
#include "es_button.h"

int es_button_create(es_button_t* button, const char* dev_name, u32_t pin,
                     gpio_callback_handler_t callback)
{
    3fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3faa:	4604      	mov	r4, r0
    3fac:	4615      	mov	r5, r2
    3fae:	461e      	mov	r6, r3
    3fb0:	4608      	mov	r0, r1
    3fb2:	f7ff f929 	bl	3208 <z_impl_device_get_binding>
    button->dev = device_get_binding(dev_name);
    button->pin = pin;
    3fb6:	6125      	str	r5, [r4, #16]
    button->dev = device_get_binding(dev_name);
    3fb8:	6020      	str	r0, [r4, #0]
    3fba:	6843      	ldr	r3, [r0, #4]
    3fbc:	462a      	mov	r2, r5
    3fbe:	681f      	ldr	r7, [r3, #0]
    3fc0:	2100      	movs	r1, #0
    3fc2:	f44f 739b 	mov.w	r3, #310	; 0x136
    3fc6:	47b8      	blx	r7
    gpio_pin_configure(button->dev, pin,
                       GPIO_DIR_IN | GPIO_PUD_PULL_UP | GPIO_INT | GPIO_INT_DEBOUNCE
                           | GPIO_INT_EDGE | GPIO_INT_ACTIVE_HIGH);
    gpio_init_callback(&button->gpio_cb, callback, BIT(pin));
    3fc8:	2201      	movs	r2, #1
    gpio_add_callback(button->dev, &button->gpio_cb);
    3fca:	6820      	ldr	r0, [r4, #0]
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    3fcc:	60a6      	str	r6, [r4, #8]
    gpio_init_callback(&button->gpio_cb, callback, BIT(pin));
    3fce:	fa02 f305 	lsl.w	r3, r2, r5
	callback->pin_mask = pin_mask;
    3fd2:	60e3      	str	r3, [r4, #12]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
    3fd4:	6843      	ldr	r3, [r0, #4]
    3fd6:	68db      	ldr	r3, [r3, #12]
    3fd8:	1d21      	adds	r1, r4, #4
    3fda:	b103      	cbz	r3, 3fde <es_button_create+0x36>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    3fdc:	4798      	blx	r3
    gpio_pin_enable_callback(button->dev, pin);
    3fde:	6820      	ldr	r0, [r4, #0]
	if (api->enable_callback == NULL) {
    3fe0:	6843      	ldr	r3, [r0, #4]
    3fe2:	691b      	ldr	r3, [r3, #16]
    3fe4:	b113      	cbz	r3, 3fec <es_button_create+0x44>
	return api->enable_callback(port, access_op, pin);
    3fe6:	462a      	mov	r2, r5
    3fe8:	2100      	movs	r1, #0
    3fea:	4798      	blx	r3
    return 0;
}
    3fec:	2000      	movs	r0, #0
    3fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003ff0 <z_sys_mem_pool_base_init>:

	return (*word >> (4*(bit / 4))) & 0xf;
}

void z_sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
    3ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    3ff4:	6846      	ldr	r6, [r0, #4]
    3ff6:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    3ff8:	6801      	ldr	r1, [r0, #0]

	p->max_inline_level = -1;

	for (i = 0; i < p->n_levels; i++) {
    3ffa:	f890 800a 	ldrb.w	r8, [r0, #10]
	p->max_inline_level = -1;
    3ffe:	23ff      	movs	r3, #255	; 0xff
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    4000:	fb06 fc07 	mul.w	ip, r6, r7
	p->max_inline_level = -1;
    4004:	72c3      	strb	r3, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    4006:	4461      	add	r1, ip
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    4008:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
    400a:	2300      	movs	r3, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
    400c:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < p->n_levels; i++) {
    4010:	4598      	cmp	r8, r3
    4012:	dc05      	bgt.n	4020 <z_sys_mem_pool_base_init+0x30>
    4014:	2300      	movs	r3, #0
		}

		sz = WB_DN(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
    4016:	4619      	mov	r1, r3
    4018:	428f      	cmp	r7, r1
    401a:	dc20      	bgt.n	405e <z_sys_mem_pool_base_init+0x6e>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
	}
}
    401c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sys_dlist_init(&p->levels[i].free_list);
    4020:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		int nblocks = buflen / sz;
    4024:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
    4028:	fb09 fe03 	mul.w	lr, r9, r3
    402c:	eb0a 040e 	add.w	r4, sl, lr
    4030:	f104 0b04 	add.w	fp, r4, #4
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    4034:	2d20      	cmp	r5, #32
    4036:	e9c4 bb01 	strd	fp, fp, [r4, #4]
    403a:	d805      	bhi.n	4048 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
    403c:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
    403e:	0892      	lsrs	r2, r2, #2
    4040:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
    4044:	3301      	adds	r3, #1
    4046:	e7e3      	b.n	4010 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
    4048:	f115 041f 	adds.w	r4, r5, #31
    404c:	bf48      	it	mi
    404e:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
    4052:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
    4054:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
    4058:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    405c:	e7ef      	b.n	403e <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
    405e:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
    4060:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
    4062:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
    4066:	18ec      	adds	r4, r5, r3
	node->next = list;
    4068:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
    406c:	6895      	ldr	r5, [r2, #8]
    406e:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
    4070:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
    4072:	3101      	adds	r1, #1
    4074:	602c      	str	r4, [r5, #0]
	list->tail = node;
    4076:	4433      	add	r3, r6
    4078:	6094      	str	r4, [r2, #8]
    407a:	e7cd      	b.n	4018 <z_sys_mem_pool_base_init+0x28>

0000407c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    407c:	4604      	mov	r4, r0
    407e:	b508      	push	{r3, lr}
    4080:	4608      	mov	r0, r1
    4082:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    4084:	461a      	mov	r2, r3
    4086:	47a0      	blx	r4
	return z_impl_k_current_get();
    4088:	f7ff fd0c 	bl	3aa4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    408c:	f7fd fcf4 	bl	1a78 <z_impl_k_thread_abort>

00004090 <z_arch_printk_char_out>:
}
    4090:	2000      	movs	r0, #0
    4092:	4770      	bx	lr

00004094 <print_err>:
{
    4094:	b570      	push	{r4, r5, r6, lr}
    4096:	4604      	mov	r4, r0
    4098:	460d      	mov	r5, r1
	out('E', ctx);
    409a:	2045      	movs	r0, #69	; 0x45
    409c:	47a0      	blx	r4
	out('R', ctx);
    409e:	4629      	mov	r1, r5
    40a0:	2052      	movs	r0, #82	; 0x52
    40a2:	47a0      	blx	r4
	out('R', ctx);
    40a4:	4629      	mov	r1, r5
    40a6:	4623      	mov	r3, r4
    40a8:	2052      	movs	r0, #82	; 0x52
}
    40aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    40ae:	4718      	bx	r3

000040b0 <z_vprintk>:
{
    40b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    40b4:	b08b      	sub	sp, #44	; 0x2c
    40b6:	461c      	mov	r4, r3
	char length_mod = 0;
    40b8:	f04f 0800 	mov.w	r8, #0
    40bc:	1e53      	subs	r3, r2, #1
{
    40be:	4606      	mov	r6, r0
    40c0:	460f      	mov	r7, r1
    40c2:	9302      	str	r3, [sp, #8]
	int min_width = -1;
    40c4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    40c8:	46c1      	mov	r9, r8
			might_format = 0;
    40ca:	2500      	movs	r5, #0
					break;
    40cc:	e005      	b.n	40da <z_vprintk+0x2a>
		if (!might_format) {
    40ce:	b96d      	cbnz	r5, 40ec <z_vprintk+0x3c>
			if (*fmt != '%') {
    40d0:	2825      	cmp	r0, #37	; 0x25
    40d2:	f000 814f 	beq.w	4374 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
    40d6:	4639      	mov	r1, r7
    40d8:	47b0      	blx	r6
	while (*fmt) {
    40da:	9b02      	ldr	r3, [sp, #8]
    40dc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    40e0:	9302      	str	r3, [sp, #8]
    40e2:	2800      	cmp	r0, #0
    40e4:	d1f3      	bne.n	40ce <z_vprintk+0x1e>
}
    40e6:	b00b      	add	sp, #44	; 0x2c
    40e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    40ec:	2864      	cmp	r0, #100	; 0x64
    40ee:	d06e      	beq.n	41ce <z_vprintk+0x11e>
    40f0:	d81a      	bhi.n	4128 <z_vprintk+0x78>
    40f2:	2839      	cmp	r0, #57	; 0x39
    40f4:	d80a      	bhi.n	410c <z_vprintk+0x5c>
    40f6:	2831      	cmp	r0, #49	; 0x31
    40f8:	d260      	bcs.n	41bc <z_vprintk+0x10c>
    40fa:	282d      	cmp	r0, #45	; 0x2d
    40fc:	f000 8140 	beq.w	4380 <z_vprintk+0x2d0>
    4100:	2830      	cmp	r0, #48	; 0x30
    4102:	d04c      	beq.n	419e <z_vprintk+0xee>
    4104:	2825      	cmp	r0, #37	; 0x25
    4106:	d107      	bne.n	4118 <z_vprintk+0x68>
				out((int)'%', ctx);
    4108:	4639      	mov	r1, r7
    410a:	e00b      	b.n	4124 <z_vprintk+0x74>
			switch (*fmt) {
    410c:	2858      	cmp	r0, #88	; 0x58
    410e:	f000 80bb 	beq.w	4288 <z_vprintk+0x1d8>
    4112:	2863      	cmp	r0, #99	; 0x63
    4114:	f000 812a 	beq.w	436c <z_vprintk+0x2bc>
					out((int)'%', ctx);
    4118:	4639      	mov	r1, r7
    411a:	2025      	movs	r0, #37	; 0x25
    411c:	47b0      	blx	r6
					out((int)*fmt, ctx);
    411e:	9b02      	ldr	r3, [sp, #8]
    4120:	7818      	ldrb	r0, [r3, #0]
    4122:	4639      	mov	r1, r7
    4124:	47b0      	blx	r6
    4126:	e7d0      	b.n	40ca <z_vprintk+0x1a>
			switch (*fmt) {
    4128:	2870      	cmp	r0, #112	; 0x70
    412a:	f000 80a3 	beq.w	4274 <z_vprintk+0x1c4>
    412e:	d811      	bhi.n	4154 <z_vprintk+0xa4>
    4130:	2869      	cmp	r0, #105	; 0x69
    4132:	d04c      	beq.n	41ce <z_vprintk+0x11e>
    4134:	286c      	cmp	r0, #108	; 0x6c
    4136:	d105      	bne.n	4144 <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
    4138:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    413c:	d12a      	bne.n	4194 <z_vprintk+0xe4>
					length_mod = 'L';
    413e:	f04f 084c 	mov.w	r8, #76	; 0x4c
    4142:	e7ca      	b.n	40da <z_vprintk+0x2a>
			switch (*fmt) {
    4144:	2868      	cmp	r0, #104	; 0x68
    4146:	d1e7      	bne.n	4118 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
    4148:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
    414c:	d122      	bne.n	4194 <z_vprintk+0xe4>
					length_mod = 'H';
    414e:	f04f 0848 	mov.w	r8, #72	; 0x48
    4152:	e7c2      	b.n	40da <z_vprintk+0x2a>
			switch (*fmt) {
    4154:	2875      	cmp	r0, #117	; 0x75
    4156:	d071      	beq.n	423c <z_vprintk+0x18c>
    4158:	d818      	bhi.n	418c <z_vprintk+0xdc>
    415a:	2873      	cmp	r0, #115	; 0x73
    415c:	d1dc      	bne.n	4118 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
    415e:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
    4162:	46ab      	mov	fp, r5
    4164:	465b      	mov	r3, fp
    4166:	f81b 0b01 	ldrb.w	r0, [fp], #1
    416a:	2800      	cmp	r0, #0
    416c:	f040 80fb 	bne.w	4366 <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
    4170:	f1b9 0f03 	cmp.w	r9, #3
    4174:	f040 810a 	bne.w	438c <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
    4178:	1b5d      	subs	r5, r3, r5
    417a:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
    417e:	2d00      	cmp	r5, #0
    4180:	dda3      	ble.n	40ca <z_vprintk+0x1a>
						out(' ', ctx);
    4182:	4639      	mov	r1, r7
    4184:	2020      	movs	r0, #32
    4186:	47b0      	blx	r6
    4188:	3d01      	subs	r5, #1
    418a:	e7f8      	b.n	417e <z_vprintk+0xce>
			switch (*fmt) {
    418c:	2878      	cmp	r0, #120	; 0x78
    418e:	d07b      	beq.n	4288 <z_vprintk+0x1d8>
    4190:	287a      	cmp	r0, #122	; 0x7a
    4192:	d1c1      	bne.n	4118 <z_vprintk+0x68>
				} else if (length_mod == 0) {
    4194:	f1b8 0f00 	cmp.w	r8, #0
    4198:	d1be      	bne.n	4118 <z_vprintk+0x68>
    419a:	4680      	mov	r8, r0
    419c:	e79d      	b.n	40da <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
    419e:	f1ba 0f00 	cmp.w	sl, #0
    41a2:	da0e      	bge.n	41c2 <z_vprintk+0x112>
    41a4:	f1b9 0f00 	cmp.w	r9, #0
    41a8:	f000 80ed 	beq.w	4386 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
    41ac:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    41b0:	f1b9 0f00 	cmp.w	r9, #0
    41b4:	bf08      	it	eq
    41b6:	f04f 0902 	moveq.w	r9, #2
    41ba:	e78e      	b.n	40da <z_vprintk+0x2a>
				if (min_width < 0) {
    41bc:	f1ba 0f00 	cmp.w	sl, #0
    41c0:	dbf4      	blt.n	41ac <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
    41c2:	230a      	movs	r3, #10
    41c4:	fb03 0a0a 	mla	sl, r3, sl, r0
    41c8:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    41cc:	e7f0      	b.n	41b0 <z_vprintk+0x100>
				if (length_mod == 'z') {
    41ce:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    41d2:	d102      	bne.n	41da <z_vprintk+0x12a>
					d = va_arg(ap, int);
    41d4:	f854 5b04 	ldr.w	r5, [r4], #4
    41d8:	e01f      	b.n	421a <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
    41da:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    41de:	d0f9      	beq.n	41d4 <z_vprintk+0x124>
				} else if (length_mod == 'L') {
    41e0:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    41e4:	d1f6      	bne.n	41d4 <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
    41e6:	3407      	adds	r4, #7
    41e8:	f024 0407 	bic.w	r4, r4, #7
    41ec:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
    41f0:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
    41f4:	9106      	str	r1, [sp, #24]
    41f6:	f143 0100 	adc.w	r1, r3, #0
    41fa:	9107      	str	r1, [sp, #28]
    41fc:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    4200:	2100      	movs	r1, #0
    4202:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4206:	4561      	cmp	r1, ip
    4208:	bf08      	it	eq
    420a:	4558      	cmpeq	r0, fp
    420c:	d204      	bcs.n	4218 <z_vprintk+0x168>
						print_err(out, ctx);
    420e:	4639      	mov	r1, r7
    4210:	4630      	mov	r0, r6
    4212:	f7ff ff3f 	bl	4094 <print_err>
						break;
    4216:	e758      	b.n	40ca <z_vprintk+0x1a>
					d = lld;
    4218:	4615      	mov	r5, r2
				if (d < 0) {
    421a:	2d00      	cmp	r5, #0
    421c:	da05      	bge.n	422a <z_vprintk+0x17a>
					out((int)'-', ctx);
    421e:	4639      	mov	r1, r7
    4220:	202d      	movs	r0, #45	; 0x2d
    4222:	47b0      	blx	r6
					d = -d;
    4224:	426d      	negs	r5, r5
					min_width--;
    4226:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    422a:	f8cd a000 	str.w	sl, [sp]
    422e:	464b      	mov	r3, r9
    4230:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
    4232:	4639      	mov	r1, r7
    4234:	4630      	mov	r0, r6
    4236:	f7fc f961 	bl	4fc <_printk_dec_ulong>
				break;
    423a:	e746      	b.n	40ca <z_vprintk+0x1a>
				if (length_mod == 'z') {
    423c:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    4240:	d102      	bne.n	4248 <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
    4242:	f854 2b04 	ldr.w	r2, [r4], #4
    4246:	e011      	b.n	426c <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
    4248:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    424c:	d0f9      	beq.n	4242 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
    424e:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    4252:	d1f6      	bne.n	4242 <z_vprintk+0x192>
					unsigned long long llu =
    4254:	3407      	adds	r4, #7
    4256:	f024 0407 	bic.w	r4, r4, #7
    425a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    425e:	2100      	movs	r1, #0
    4260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4264:	4299      	cmp	r1, r3
    4266:	bf08      	it	eq
    4268:	4290      	cmpeq	r0, r2
    426a:	d3d0      	bcc.n	420e <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
    426c:	f8cd a000 	str.w	sl, [sp]
    4270:	464b      	mov	r3, r9
    4272:	e7de      	b.n	4232 <z_vprintk+0x182>
				  out('0', ctx);
    4274:	4639      	mov	r1, r7
    4276:	2030      	movs	r0, #48	; 0x30
    4278:	47b0      	blx	r6
				  out('x', ctx);
    427a:	4639      	mov	r1, r7
    427c:	2078      	movs	r0, #120	; 0x78
    427e:	47b0      	blx	r6
				  min_width = 8;
    4280:	f04f 0a08 	mov.w	sl, #8
				  padding = PAD_ZERO_BEFORE;
    4284:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
    4288:	9b02      	ldr	r3, [sp, #8]
    428a:	781b      	ldrb	r3, [r3, #0]
    428c:	2b70      	cmp	r3, #112	; 0x70
    428e:	d104      	bne.n	429a <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
    4290:	f854 3b04 	ldr.w	r3, [r4], #4
    4294:	9304      	str	r3, [sp, #16]
    4296:	2300      	movs	r3, #0
    4298:	e00d      	b.n	42b6 <z_vprintk+0x206>
				} else if (length_mod == 'l') {
    429a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    429e:	d0f7      	beq.n	4290 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
    42a0:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    42a4:	d1f4      	bne.n	4290 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
    42a6:	3407      	adds	r4, #7
    42a8:	f024 0307 	bic.w	r3, r4, #7
    42ac:	461c      	mov	r4, r3
    42ae:	685b      	ldr	r3, [r3, #4]
    42b0:	f854 2b08 	ldr.w	r2, [r4], #8
    42b4:	9204      	str	r2, [sp, #16]
	int digits = 0;
    42b6:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    42b8:	2210      	movs	r2, #16
	int digits = 0;
    42ba:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
    42bc:	9105      	str	r1, [sp, #20]
	int shift = sizeof(num) * 8;
    42be:	f04f 0b40 	mov.w	fp, #64	; 0x40
		shift -= 4;
    42c2:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
    42c6:	9804      	ldr	r0, [sp, #16]
    42c8:	f1cb 0c20 	rsb	ip, fp, #32
    42cc:	f1ab 0120 	sub.w	r1, fp, #32
    42d0:	fa20 f00b 	lsr.w	r0, r0, fp
    42d4:	fa03 fc0c 	lsl.w	ip, r3, ip
    42d8:	ea40 000c 	orr.w	r0, r0, ip
    42dc:	fa23 f101 	lsr.w	r1, r3, r1
    42e0:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    42e2:	f010 000f 	ands.w	r0, r0, #15
    42e6:	d108      	bne.n	42fa <z_vprintk+0x24a>
    42e8:	9905      	ldr	r1, [sp, #20]
    42ea:	b911      	cbnz	r1, 42f2 <z_vprintk+0x242>
    42ec:	f1bb 0f00 	cmp.w	fp, #0
    42f0:	d124      	bne.n	433c <z_vprintk+0x28c>
			nibble += nibble > 9 ? 87 : 48;
    42f2:	2130      	movs	r1, #48	; 0x30
    42f4:	e005      	b.n	4302 <z_vprintk+0x252>
			found_largest_digit = 1;
    42f6:	9505      	str	r5, [sp, #20]
    42f8:	e7e3      	b.n	42c2 <z_vprintk+0x212>
			nibble += nibble > 9 ? 87 : 48;
    42fa:	2809      	cmp	r0, #9
    42fc:	bf8c      	ite	hi
    42fe:	2157      	movhi	r1, #87	; 0x57
    4300:	2130      	movls	r1, #48	; 0x30
    4302:	4408      	add	r0, r1
			out((int)nibble, ctx);
    4304:	b240      	sxtb	r0, r0
    4306:	4639      	mov	r1, r7
    4308:	9308      	str	r3, [sp, #32]
    430a:	9205      	str	r2, [sp, #20]
    430c:	47b0      	blx	r6
			digits++;
    430e:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
    4310:	9a05      	ldr	r2, [sp, #20]
			digits++;
    4312:	3301      	adds	r3, #1
    4314:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
    4316:	9b08      	ldr	r3, [sp, #32]
    4318:	f1bb 0f00 	cmp.w	fp, #0
    431c:	d1eb      	bne.n	42f6 <z_vprintk+0x246>
	if (padding == PAD_SPACE_AFTER) {
    431e:	f1b9 0f03 	cmp.w	r9, #3
    4322:	f47f aed2 	bne.w	40ca <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
    4326:	9b03      	ldr	r3, [sp, #12]
    4328:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
    432c:	2d00      	cmp	r5, #0
    432e:	f77f aecc 	ble.w	40ca <z_vprintk+0x1a>
			out(' ', ctx);
    4332:	4639      	mov	r1, r7
    4334:	2020      	movs	r0, #32
    4336:	47b0      	blx	r6
    4338:	3d01      	subs	r5, #1
    433a:	e7f7      	b.n	432c <z_vprintk+0x27c>
		if (remaining-- <= min_width) {
    433c:	1e51      	subs	r1, r2, #1
    433e:	4592      	cmp	sl, r2
    4340:	9108      	str	r1, [sp, #32]
    4342:	db07      	blt.n	4354 <z_vprintk+0x2a4>
			if (padding == PAD_ZERO_BEFORE) {
    4344:	f1b9 0f01 	cmp.w	r9, #1
    4348:	d106      	bne.n	4358 <z_vprintk+0x2a8>
    434a:	9309      	str	r3, [sp, #36]	; 0x24
				out('0', ctx);
    434c:	4639      	mov	r1, r7
    434e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    4350:	47b0      	blx	r6
    4352:	9b09      	ldr	r3, [sp, #36]	; 0x24
					x = va_arg(ap, unsigned int);
    4354:	9a08      	ldr	r2, [sp, #32]
    4356:	e7b4      	b.n	42c2 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
    4358:	f1b9 0f02 	cmp.w	r9, #2
    435c:	d1fa      	bne.n	4354 <z_vprintk+0x2a4>
    435e:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
    4360:	4639      	mov	r1, r7
    4362:	2020      	movs	r0, #32
    4364:	e7f4      	b.n	4350 <z_vprintk+0x2a0>
					out((int)(*s++), ctx);
    4366:	4639      	mov	r1, r7
    4368:	47b0      	blx	r6
    436a:	e6fb      	b.n	4164 <z_vprintk+0xb4>
				out(c, ctx);
    436c:	4639      	mov	r1, r7
    436e:	f854 0b04 	ldr.w	r0, [r4], #4
    4372:	e6d7      	b.n	4124 <z_vprintk+0x74>
				length_mod = 0;
    4374:	46a8      	mov	r8, r5
				padding = PAD_NONE;
    4376:	46a9      	mov	r9, r5
				min_width = -1;
    4378:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
    437c:	2501      	movs	r5, #1
    437e:	e6ac      	b.n	40da <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
    4380:	f04f 0903 	mov.w	r9, #3
    4384:	e6a9      	b.n	40da <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
    4386:	f04f 0901 	mov.w	r9, #1
    438a:	e6a6      	b.n	40da <z_vprintk+0x2a>
			might_format = 0;
    438c:	4605      	mov	r5, r0
		++fmt;
    438e:	e6a4      	b.n	40da <z_vprintk+0x2a>

00004390 <printk>:
{
    4390:	b40f      	push	{r0, r1, r2, r3}
    4392:	b507      	push	{r0, r1, r2, lr}
    4394:	a904      	add	r1, sp, #16
    4396:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    439a:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    439c:	f7fc f900 	bl	5a0 <vprintk>
}
    43a0:	b003      	add	sp, #12
    43a2:	f85d eb04 	ldr.w	lr, [sp], #4
    43a6:	b004      	add	sp, #16
    43a8:	4770      	bx	lr

000043aa <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    43aa:	4770      	bx	lr

000043ac <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
    43ac:	f7fe bd24 	b.w	2df8 <SystemInit>

000043b0 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    43b0:	2300      	movs	r3, #0
	list->head = NULL;
    43b2:	e9c0 3300 	strd	r3, r3, [r0]
}
    43b6:	4770      	bx	lr

000043b8 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    43b8:	6803      	ldr	r3, [r0, #0]
    43ba:	b923      	cbnz	r3, 43c6 <log_list_add_tail+0xe>
		list->head = msg;
    43bc:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
    43be:	2300      	movs	r3, #0
	list->tail = msg;
    43c0:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    43c2:	600b      	str	r3, [r1, #0]
}
    43c4:	4770      	bx	lr
		list->tail->next = msg;
    43c6:	6843      	ldr	r3, [r0, #4]
    43c8:	6019      	str	r1, [r3, #0]
    43ca:	e7f8      	b.n	43be <log_list_add_tail+0x6>

000043cc <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    43cc:	6800      	ldr	r0, [r0, #0]
    43ce:	4770      	bx	lr

000043d0 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
    43d0:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
    43d2:	b10b      	cbz	r3, 43d8 <log_list_head_get+0x8>
		list->head = list->head->next;
    43d4:	681a      	ldr	r2, [r3, #0]
    43d6:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
    43d8:	4618      	mov	r0, r3
    43da:	4770      	bx	lr

000043dc <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
    43dc:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    43de:	f7fc fbbb 	bl	b58 <log_msg_chunk_alloc>

	if (msg != NULL) {
    43e2:	b118      	cbz	r0, 43ec <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    43e4:	2301      	movs	r3, #1
    43e6:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    43e8:	2300      	movs	r3, #0
    43ea:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
    43ec:	bd08      	pop	{r3, pc}

000043ee <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t z_arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    43ee:	f7fc bf2f 	b.w	1250 <z_timer_cycle_get_32>

000043f2 <dummy_timestamp>:
    43f2:	2000      	movs	r0, #0
    43f4:	4770      	bx	lr

000043f6 <log_0>:
{
    43f6:	b538      	push	{r3, r4, r5, lr}
    43f8:	4605      	mov	r5, r0
    43fa:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
    43fc:	f7ff ffee 	bl	43dc <z_log_msg_std_alloc>

	if (msg != NULL) {
    4400:	b128      	cbz	r0, 440e <log_0+0x18>
		msg->str = str;
    4402:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
    4404:	4621      	mov	r1, r4
}
    4406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
    440a:	f7fc bac7 	b.w	99c <msg_finalize>
}
    440e:	bd38      	pop	{r3, r4, r5, pc}

00004410 <log_1>:
{
    4410:	b570      	push	{r4, r5, r6, lr}
    4412:	4604      	mov	r4, r0
    4414:	460e      	mov	r6, r1
    4416:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    4418:	f7ff ffe0 	bl	43dc <z_log_msg_std_alloc>

	if (msg != NULL) {
    441c:	b158      	cbz	r0, 4436 <log_1+0x26>
		msg->str = str;
    441e:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
    4420:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
    4422:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
    4424:	2201      	movs	r2, #1
    4426:	f362 1407 	bfi	r4, r2, #4, #4
    442a:	7244      	strb	r4, [r0, #9]
		msg_finalize(msg, src_level);
    442c:	4629      	mov	r1, r5
}
    442e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
    4432:	f7fc bab3 	b.w	99c <msg_finalize>
}
    4436:	bd70      	pop	{r4, r5, r6, pc}

00004438 <log_2>:
{
    4438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    443c:	4605      	mov	r5, r0
    443e:	4688      	mov	r8, r1
    4440:	4617      	mov	r7, r2
    4442:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    4444:	f7ff ffca 	bl	43dc <z_log_msg_std_alloc>

	if (msg != NULL) {
    4448:	b160      	cbz	r0, 4464 <log_2+0x2c>
		msg->str = str;
    444a:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
    444c:	7a45      	ldrb	r5, [r0, #9]
    444e:	2302      	movs	r3, #2
    4450:	f363 1507 	bfi	r5, r3, #4, #4
    4454:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    4456:	e9c0 8705 	strd	r8, r7, [r0, #20]
		msg_finalize(msg, src_level);
    445a:	4631      	mov	r1, r6
}
    445c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
    4460:	f7fc ba9c 	b.w	99c <msg_finalize>
}
    4464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004468 <log_3>:
{
    4468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    446c:	4605      	mov	r5, r0
    446e:	4689      	mov	r9, r1
    4470:	4690      	mov	r8, r2
    4472:	461f      	mov	r7, r3
    4474:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    4478:	f7ff ffb0 	bl	43dc <z_log_msg_std_alloc>

	if (msg != NULL) {
    447c:	b168      	cbz	r0, 449a <log_3+0x32>
		msg->str = str;
    447e:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
    4480:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
		msg->payload.single.args[2] = arg3;
    4482:	61c7      	str	r7, [r0, #28]
		msg->hdr.params.std.nargs = 3U;
    4484:	2303      	movs	r3, #3
    4486:	f363 1507 	bfi	r5, r3, #4, #4
    448a:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[1] = arg2;
    448c:	e9c0 9805 	strd	r9, r8, [r0, #20]
		msg_finalize(msg, src_level);
    4490:	4631      	mov	r1, r6
}
    4492:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
    4496:	f7fc ba81 	b.w	99c <msg_finalize>
}
    449a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000449e <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    449e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    44a2:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
    44a4:	8903      	ldrh	r3, [r0, #8]
{
    44a6:	f89d 7020 	ldrb.w	r7, [sp, #32]
	u32_t available_len = msg->hdr.params.hexdump.length;
    44aa:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
    44ac:	42a3      	cmp	r3, r4
{
    44ae:	460e      	mov	r6, r1
	if (offset >= available_len) {
    44b0:	d803      	bhi.n	44ba <log_msg_hexdump_data_op+0x1c>
		*length = 0;
    44b2:	2300      	movs	r3, #0
    44b4:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    44b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
    44ba:	6811      	ldr	r1, [r2, #0]
    44bc:	4421      	add	r1, r4
    44be:	4299      	cmp	r1, r3
		*length = available_len - offset;
    44c0:	bf84      	itt	hi
    44c2:	1b19      	subhi	r1, r3, r4
    44c4:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    44c6:	2b0c      	cmp	r3, #12
	req_len = *length;
    44c8:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    44cc:	d928      	bls.n	4520 <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
    44ce:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
    44d0:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
    44d4:	d82b      	bhi.n	452e <log_msg_hexdump_data_op+0x90>
		head_data = msg->payload.ext.data.bytes;
    44d6:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    44d8:	2308      	movs	r3, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    44da:	454b      	cmp	r3, r9
    44dc:	bf28      	it	cs
    44de:	464b      	movcs	r3, r9
    44e0:	461d      	mov	r5, r3
		if (put_op) {
    44e2:	4420      	add	r0, r4
			(void)memcpy(&head_data[offset], data, cpy_len);
    44e4:	461a      	mov	r2, r3
		if (put_op) {
    44e6:	b1ff      	cbz	r7, 4528 <log_msg_hexdump_data_op+0x8a>
			(void)memcpy(&head_data[offset], data, cpy_len);
    44e8:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
    44ea:	f000 fb14 	bl	4b16 <memcpy>
		req_len -= cpy_len;
    44ee:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
    44f2:	442e      	add	r6, r5
	while (req_len > 0) {
    44f4:	f1b9 0f00 	cmp.w	r9, #0
    44f8:	d0dd      	beq.n	44b6 <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    44fa:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    44fe:	454d      	cmp	r5, r9
    4500:	bf28      	it	cs
    4502:	464d      	movcs	r5, r9
		if (put_op) {
    4504:	1d20      	adds	r0, r4, #4
    4506:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
    4508:	462a      	mov	r2, r5
		if (put_op) {
    450a:	b1bf      	cbz	r7, 453c <log_msg_hexdump_data_op+0x9e>
			(void)memcpy(&cont->payload.bytes[offset],
    450c:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
    450e:	f000 fb02 	bl	4b16 <memcpy>
		req_len -= cpy_len;
    4512:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
    4516:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
    451a:	442e      	add	r6, r5
		offset = 0;
    451c:	2400      	movs	r4, #0
    451e:	e7e9      	b.n	44f4 <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
    4520:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
    4522:	f04f 0800 	mov.w	r8, #0
    4526:	e7d8      	b.n	44da <log_msg_hexdump_data_op+0x3c>
			(void)memcpy(data, &head_data[offset], cpy_len);
    4528:	4601      	mov	r1, r0
    452a:	4630      	mov	r0, r6
    452c:	e7dd      	b.n	44ea <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
    452e:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
    4530:	2c1b      	cmp	r4, #27
    4532:	d9df      	bls.n	44f4 <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
    4534:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
    4538:	3c1c      	subs	r4, #28
    453a:	e7f9      	b.n	4530 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(data, &cont->payload.bytes[offset],
    453c:	4601      	mov	r1, r0
    453e:	4630      	mov	r0, r6
    4540:	e7e5      	b.n	450e <log_msg_hexdump_data_op+0x70>

00004542 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    4542:	3004      	adds	r0, #4
    4544:	f3bf 8f5b 	dmb	ish
    4548:	e850 3f00 	ldrex	r3, [r0]
    454c:	3301      	adds	r3, #1
    454e:	e840 3200 	strex	r2, r3, [r0]
    4552:	2a00      	cmp	r2, #0
    4554:	d1f8      	bne.n	4548 <log_msg_get+0x6>
    4556:	f3bf 8f5b 	dmb	ish
}
    455a:	4770      	bx	lr

0000455c <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    455c:	7a40      	ldrb	r0, [r0, #9]
}
    455e:	0900      	lsrs	r0, r0, #4
    4560:	4770      	bx	lr

00004562 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
    4562:	7a43      	ldrb	r3, [r0, #9]
    4564:	091b      	lsrs	r3, r3, #4
    4566:	428b      	cmp	r3, r1
    4568:	d916      	bls.n	4598 <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    456a:	2b03      	cmp	r3, #3
    456c:	d803      	bhi.n	4576 <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
    456e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    4572:	6948      	ldr	r0, [r1, #20]
    4574:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    4576:	2901      	cmp	r1, #1
    4578:	d803      	bhi.n	4582 <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
    457a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    457e:	6988      	ldr	r0, [r1, #24]
    4580:	4770      	bx	lr
	cont = msg->payload.ext.next;
    4582:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    4584:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
    4586:	2906      	cmp	r1, #6
    4588:	d803      	bhi.n	4592 <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
    458a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    458e:	6848      	ldr	r0, [r1, #4]
    4590:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
    4592:	3907      	subs	r1, #7
		cont = cont->next;
    4594:	681b      	ldr	r3, [r3, #0]
    4596:	e7f6      	b.n	4586 <log_msg_arg_get+0x24>
		return 0;
    4598:	2000      	movs	r0, #0
}
    459a:	4770      	bx	lr

0000459c <log_msg_put>:
{
    459c:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    459e:	1d02      	adds	r2, r0, #4
    45a0:	f3bf 8f5b 	dmb	ish
    45a4:	e852 1f00 	ldrex	r1, [r2]
    45a8:	3901      	subs	r1, #1
    45aa:	e842 1c00 	strex	ip, r1, [r2]
    45ae:	f1bc 0f00 	cmp.w	ip, #0
    45b2:	d1f7      	bne.n	45a4 <log_msg_put+0x8>
    45b4:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
    45b8:	685b      	ldr	r3, [r3, #4]
    45ba:	b90b      	cbnz	r3, 45c0 <log_msg_put+0x24>
		msg_free(msg);
    45bc:	f7fc bade 	b.w	b7c <msg_free>
}
    45c0:	4770      	bx	lr

000045c2 <log_msg_str_get>:
}
    45c2:	6900      	ldr	r0, [r0, #16]
    45c4:	4770      	bx	lr

000045c6 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
    45c6:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    45c8:	2400      	movs	r4, #0
    45ca:	9400      	str	r4, [sp, #0]
    45cc:	f7ff ff67 	bl	449e <log_msg_hexdump_data_op>
}
    45d0:	b002      	add	sp, #8
    45d2:	bd10      	pop	{r4, pc}

000045d4 <buffer_write>:
{
    45d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45d6:	4606      	mov	r6, r0
    45d8:	460d      	mov	r5, r1
    45da:	4614      	mov	r4, r2
    45dc:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    45de:	4621      	mov	r1, r4
    45e0:	4628      	mov	r0, r5
    45e2:	463a      	mov	r2, r7
    45e4:	47b0      	blx	r6
	} while (len != 0);
    45e6:	1a24      	subs	r4, r4, r0
		buf += processed;
    45e8:	4405      	add	r5, r0
	} while (len != 0);
    45ea:	d1f8      	bne.n	45de <buffer_write+0xa>
}
    45ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000045ee <std_print>:
{
    45ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    45f2:	b08e      	sub	sp, #56	; 0x38
    45f4:	af0e      	add	r7, sp, #56	; 0x38
    45f6:	4681      	mov	r9, r0
    45f8:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
    45fa:	f7ff ffe2 	bl	45c2 <log_msg_str_get>
    45fe:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
    4600:	4648      	mov	r0, r9
    4602:	f7ff ffab 	bl	455c <log_msg_nargs_get>
	u32_t *args = alloca(sizeof(u32_t)*nargs);
    4606:	0083      	lsls	r3, r0, #2
    4608:	3307      	adds	r3, #7
    460a:	f023 0307 	bic.w	r3, r3, #7
    460e:	ebad 0d03 	sub.w	sp, sp, r3
	u32_t nargs = log_msg_nargs_get(msg);
    4612:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
    4614:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
    4616:	f04f 0800 	mov.w	r8, #0
    461a:	45d0      	cmp	r8, sl
    461c:	d116      	bne.n	464c <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
    461e:	4648      	mov	r0, r9
    4620:	f7ff ff9c 	bl	455c <log_msg_nargs_get>
    4624:	280f      	cmp	r0, #15
    4626:	d81e      	bhi.n	4666 <std_print+0x78>
    4628:	e8df f010 	tbh	[pc, r0, lsl #1]
    462c:	00200019 	.word	0x00200019
    4630:	002d0026 	.word	0x002d0026
    4634:	00410036 	.word	0x00410036
    4638:	005d004e 	.word	0x005d004e
    463c:	0081006e 	.word	0x0081006e
    4640:	00ad0096 	.word	0x00ad0096
    4644:	00e100c6 	.word	0x00e100c6
    4648:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
    464c:	4641      	mov	r1, r8
    464e:	4648      	mov	r0, r9
    4650:	f7ff ff87 	bl	4562 <log_msg_arg_get>
    4654:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
    4658:	f108 0801 	add.w	r8, r8, #1
    465c:	e7dd      	b.n	461a <std_print+0x2c>
		print_formatted(log_output, str);
    465e:	4631      	mov	r1, r6
    4660:	4628      	mov	r0, r5
    4662:	f7fc fabd 	bl	be0 <print_formatted>
}
    4666:	46bd      	mov	sp, r7
    4668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
    466c:	6822      	ldr	r2, [r4, #0]
    466e:	4631      	mov	r1, r6
    4670:	4628      	mov	r0, r5
    4672:	f7fc fab5 	bl	be0 <print_formatted>
		break;
    4676:	e7f6      	b.n	4666 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
    4678:	e9d4 2300 	ldrd	r2, r3, [r4]
    467c:	4631      	mov	r1, r6
    467e:	4628      	mov	r0, r5
    4680:	f7fc faae 	bl	be0 <print_formatted>
		break;
    4684:	e7ef      	b.n	4666 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
    4686:	68a3      	ldr	r3, [r4, #8]
    4688:	9300      	str	r3, [sp, #0]
    468a:	e9d4 2300 	ldrd	r2, r3, [r4]
    468e:	4631      	mov	r1, r6
    4690:	4628      	mov	r0, r5
    4692:	f7fc faa5 	bl	be0 <print_formatted>
		break;
    4696:	e7e6      	b.n	4666 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4698:	68e3      	ldr	r3, [r4, #12]
    469a:	9301      	str	r3, [sp, #4]
    469c:	68a3      	ldr	r3, [r4, #8]
    469e:	9300      	str	r3, [sp, #0]
    46a0:	e9d4 2300 	ldrd	r2, r3, [r4]
    46a4:	4631      	mov	r1, r6
    46a6:	4628      	mov	r0, r5
    46a8:	f7fc fa9a 	bl	be0 <print_formatted>
		break;
    46ac:	e7db      	b.n	4666 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    46ae:	6923      	ldr	r3, [r4, #16]
    46b0:	9302      	str	r3, [sp, #8]
    46b2:	68e3      	ldr	r3, [r4, #12]
    46b4:	9301      	str	r3, [sp, #4]
    46b6:	68a3      	ldr	r3, [r4, #8]
    46b8:	9300      	str	r3, [sp, #0]
    46ba:	e9d4 2300 	ldrd	r2, r3, [r4]
    46be:	4631      	mov	r1, r6
    46c0:	4628      	mov	r0, r5
    46c2:	f7fc fa8d 	bl	be0 <print_formatted>
		break;
    46c6:	e7ce      	b.n	4666 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    46c8:	6963      	ldr	r3, [r4, #20]
    46ca:	9303      	str	r3, [sp, #12]
    46cc:	6923      	ldr	r3, [r4, #16]
    46ce:	9302      	str	r3, [sp, #8]
    46d0:	68e3      	ldr	r3, [r4, #12]
    46d2:	9301      	str	r3, [sp, #4]
    46d4:	68a3      	ldr	r3, [r4, #8]
    46d6:	9300      	str	r3, [sp, #0]
    46d8:	e9d4 2300 	ldrd	r2, r3, [r4]
    46dc:	4631      	mov	r1, r6
    46de:	4628      	mov	r0, r5
    46e0:	f7fc fa7e 	bl	be0 <print_formatted>
		break;
    46e4:	e7bf      	b.n	4666 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    46e6:	69a3      	ldr	r3, [r4, #24]
    46e8:	9304      	str	r3, [sp, #16]
    46ea:	6963      	ldr	r3, [r4, #20]
    46ec:	9303      	str	r3, [sp, #12]
    46ee:	6923      	ldr	r3, [r4, #16]
    46f0:	9302      	str	r3, [sp, #8]
    46f2:	68e3      	ldr	r3, [r4, #12]
    46f4:	9301      	str	r3, [sp, #4]
    46f6:	68a3      	ldr	r3, [r4, #8]
    46f8:	9300      	str	r3, [sp, #0]
    46fa:	e9d4 2300 	ldrd	r2, r3, [r4]
    46fe:	4631      	mov	r1, r6
    4700:	4628      	mov	r0, r5
    4702:	f7fc fa6d 	bl	be0 <print_formatted>
		break;
    4706:	e7ae      	b.n	4666 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4708:	69e3      	ldr	r3, [r4, #28]
    470a:	9305      	str	r3, [sp, #20]
    470c:	69a3      	ldr	r3, [r4, #24]
    470e:	9304      	str	r3, [sp, #16]
    4710:	6963      	ldr	r3, [r4, #20]
    4712:	9303      	str	r3, [sp, #12]
    4714:	6923      	ldr	r3, [r4, #16]
    4716:	9302      	str	r3, [sp, #8]
    4718:	68e3      	ldr	r3, [r4, #12]
    471a:	9301      	str	r3, [sp, #4]
    471c:	68a3      	ldr	r3, [r4, #8]
    471e:	9300      	str	r3, [sp, #0]
    4720:	e9d4 2300 	ldrd	r2, r3, [r4]
    4724:	4631      	mov	r1, r6
    4726:	4628      	mov	r0, r5
    4728:	f7fc fa5a 	bl	be0 <print_formatted>
		break;
    472c:	e79b      	b.n	4666 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    472e:	6a23      	ldr	r3, [r4, #32]
    4730:	9306      	str	r3, [sp, #24]
    4732:	69e3      	ldr	r3, [r4, #28]
    4734:	9305      	str	r3, [sp, #20]
    4736:	69a3      	ldr	r3, [r4, #24]
    4738:	9304      	str	r3, [sp, #16]
    473a:	6963      	ldr	r3, [r4, #20]
    473c:	9303      	str	r3, [sp, #12]
    473e:	6923      	ldr	r3, [r4, #16]
    4740:	9302      	str	r3, [sp, #8]
    4742:	68e3      	ldr	r3, [r4, #12]
    4744:	9301      	str	r3, [sp, #4]
    4746:	68a3      	ldr	r3, [r4, #8]
    4748:	9300      	str	r3, [sp, #0]
    474a:	e9d4 2300 	ldrd	r2, r3, [r4]
    474e:	4631      	mov	r1, r6
    4750:	4628      	mov	r0, r5
    4752:	f7fc fa45 	bl	be0 <print_formatted>
		break;
    4756:	e786      	b.n	4666 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4758:	6a63      	ldr	r3, [r4, #36]	; 0x24
    475a:	9307      	str	r3, [sp, #28]
    475c:	6a23      	ldr	r3, [r4, #32]
    475e:	9306      	str	r3, [sp, #24]
    4760:	69e3      	ldr	r3, [r4, #28]
    4762:	9305      	str	r3, [sp, #20]
    4764:	69a3      	ldr	r3, [r4, #24]
    4766:	9304      	str	r3, [sp, #16]
    4768:	6963      	ldr	r3, [r4, #20]
    476a:	9303      	str	r3, [sp, #12]
    476c:	6923      	ldr	r3, [r4, #16]
    476e:	9302      	str	r3, [sp, #8]
    4770:	68e3      	ldr	r3, [r4, #12]
    4772:	9301      	str	r3, [sp, #4]
    4774:	68a3      	ldr	r3, [r4, #8]
    4776:	9300      	str	r3, [sp, #0]
    4778:	e9d4 2300 	ldrd	r2, r3, [r4]
    477c:	4631      	mov	r1, r6
    477e:	4628      	mov	r0, r5
    4780:	f7fc fa2e 	bl	be0 <print_formatted>
		break;
    4784:	e76f      	b.n	4666 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4786:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4788:	9308      	str	r3, [sp, #32]
    478a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    478c:	9307      	str	r3, [sp, #28]
    478e:	6a23      	ldr	r3, [r4, #32]
    4790:	9306      	str	r3, [sp, #24]
    4792:	69e3      	ldr	r3, [r4, #28]
    4794:	9305      	str	r3, [sp, #20]
    4796:	69a3      	ldr	r3, [r4, #24]
    4798:	9304      	str	r3, [sp, #16]
    479a:	6963      	ldr	r3, [r4, #20]
    479c:	9303      	str	r3, [sp, #12]
    479e:	6923      	ldr	r3, [r4, #16]
    47a0:	9302      	str	r3, [sp, #8]
    47a2:	68e3      	ldr	r3, [r4, #12]
    47a4:	9301      	str	r3, [sp, #4]
    47a6:	68a3      	ldr	r3, [r4, #8]
    47a8:	9300      	str	r3, [sp, #0]
    47aa:	e9d4 2300 	ldrd	r2, r3, [r4]
    47ae:	4631      	mov	r1, r6
    47b0:	4628      	mov	r0, r5
    47b2:	f7fc fa15 	bl	be0 <print_formatted>
		break;
    47b6:	e756      	b.n	4666 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    47b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    47ba:	9309      	str	r3, [sp, #36]	; 0x24
    47bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    47be:	9308      	str	r3, [sp, #32]
    47c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    47c2:	9307      	str	r3, [sp, #28]
    47c4:	6a23      	ldr	r3, [r4, #32]
    47c6:	9306      	str	r3, [sp, #24]
    47c8:	69e3      	ldr	r3, [r4, #28]
    47ca:	9305      	str	r3, [sp, #20]
    47cc:	69a3      	ldr	r3, [r4, #24]
    47ce:	9304      	str	r3, [sp, #16]
    47d0:	6963      	ldr	r3, [r4, #20]
    47d2:	9303      	str	r3, [sp, #12]
    47d4:	6923      	ldr	r3, [r4, #16]
    47d6:	9302      	str	r3, [sp, #8]
    47d8:	68e3      	ldr	r3, [r4, #12]
    47da:	9301      	str	r3, [sp, #4]
    47dc:	68a3      	ldr	r3, [r4, #8]
    47de:	9300      	str	r3, [sp, #0]
    47e0:	e9d4 2300 	ldrd	r2, r3, [r4]
    47e4:	4631      	mov	r1, r6
    47e6:	4628      	mov	r0, r5
    47e8:	f7fc f9fa 	bl	be0 <print_formatted>
		break;
    47ec:	e73b      	b.n	4666 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    47ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
    47f0:	930a      	str	r3, [sp, #40]	; 0x28
    47f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    47f4:	9309      	str	r3, [sp, #36]	; 0x24
    47f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    47f8:	9308      	str	r3, [sp, #32]
    47fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    47fc:	9307      	str	r3, [sp, #28]
    47fe:	6a23      	ldr	r3, [r4, #32]
    4800:	9306      	str	r3, [sp, #24]
    4802:	69e3      	ldr	r3, [r4, #28]
    4804:	9305      	str	r3, [sp, #20]
    4806:	69a3      	ldr	r3, [r4, #24]
    4808:	9304      	str	r3, [sp, #16]
    480a:	6963      	ldr	r3, [r4, #20]
    480c:	9303      	str	r3, [sp, #12]
    480e:	6923      	ldr	r3, [r4, #16]
    4810:	9302      	str	r3, [sp, #8]
    4812:	68e3      	ldr	r3, [r4, #12]
    4814:	9301      	str	r3, [sp, #4]
    4816:	68a3      	ldr	r3, [r4, #8]
    4818:	9300      	str	r3, [sp, #0]
    481a:	e9d4 2300 	ldrd	r2, r3, [r4]
    481e:	4631      	mov	r1, r6
    4820:	4628      	mov	r0, r5
    4822:	f7fc f9dd 	bl	be0 <print_formatted>
		break;
    4826:	e71e      	b.n	4666 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4828:	6b63      	ldr	r3, [r4, #52]	; 0x34
    482a:	930b      	str	r3, [sp, #44]	; 0x2c
    482c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    482e:	930a      	str	r3, [sp, #40]	; 0x28
    4830:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4832:	9309      	str	r3, [sp, #36]	; 0x24
    4834:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4836:	9308      	str	r3, [sp, #32]
    4838:	6a63      	ldr	r3, [r4, #36]	; 0x24
    483a:	9307      	str	r3, [sp, #28]
    483c:	6a23      	ldr	r3, [r4, #32]
    483e:	9306      	str	r3, [sp, #24]
    4840:	69e3      	ldr	r3, [r4, #28]
    4842:	9305      	str	r3, [sp, #20]
    4844:	69a3      	ldr	r3, [r4, #24]
    4846:	9304      	str	r3, [sp, #16]
    4848:	6963      	ldr	r3, [r4, #20]
    484a:	9303      	str	r3, [sp, #12]
    484c:	6923      	ldr	r3, [r4, #16]
    484e:	9302      	str	r3, [sp, #8]
    4850:	68e3      	ldr	r3, [r4, #12]
    4852:	9301      	str	r3, [sp, #4]
    4854:	68a3      	ldr	r3, [r4, #8]
    4856:	9300      	str	r3, [sp, #0]
    4858:	e9d4 2300 	ldrd	r2, r3, [r4]
    485c:	4631      	mov	r1, r6
    485e:	4628      	mov	r0, r5
    4860:	f7fc f9be 	bl	be0 <print_formatted>
		break;
    4864:	e6ff      	b.n	4666 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4866:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4868:	930c      	str	r3, [sp, #48]	; 0x30
    486a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    486c:	930b      	str	r3, [sp, #44]	; 0x2c
    486e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4870:	930a      	str	r3, [sp, #40]	; 0x28
    4872:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4874:	9309      	str	r3, [sp, #36]	; 0x24
    4876:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4878:	9308      	str	r3, [sp, #32]
    487a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    487c:	9307      	str	r3, [sp, #28]
    487e:	6a23      	ldr	r3, [r4, #32]
    4880:	9306      	str	r3, [sp, #24]
    4882:	69e3      	ldr	r3, [r4, #28]
    4884:	9305      	str	r3, [sp, #20]
    4886:	69a3      	ldr	r3, [r4, #24]
    4888:	9304      	str	r3, [sp, #16]
    488a:	6963      	ldr	r3, [r4, #20]
    488c:	9303      	str	r3, [sp, #12]
    488e:	6923      	ldr	r3, [r4, #16]
    4890:	9302      	str	r3, [sp, #8]
    4892:	68e3      	ldr	r3, [r4, #12]
    4894:	9301      	str	r3, [sp, #4]
    4896:	68a3      	ldr	r3, [r4, #8]
    4898:	9300      	str	r3, [sp, #0]
    489a:	e9d4 2300 	ldrd	r2, r3, [r4]
    489e:	4631      	mov	r1, r6
    48a0:	4628      	mov	r0, r5
    48a2:	f7fc f99d 	bl	be0 <print_formatted>
}
    48a6:	e6de      	b.n	4666 <std_print+0x78>

000048a8 <log_output_flush>:
		     log_output->control_block->offset,
    48a8:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
    48aa:	6881      	ldr	r1, [r0, #8]
{
    48ac:	b510      	push	{r4, lr}
    48ae:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
    48b0:	e9d2 2300 	ldrd	r2, r3, [r2]
    48b4:	6800      	ldr	r0, [r0, #0]
    48b6:	f7ff fe8d 	bl	45d4 <buffer_write>
	log_output->control_block->offset = 0;
    48ba:	6863      	ldr	r3, [r4, #4]
    48bc:	2200      	movs	r2, #0
    48be:	601a      	str	r2, [r3, #0]
}
    48c0:	bd10      	pop	{r4, pc}

000048c2 <out_func>:
{
    48c2:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
    48c4:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
    48c8:	681b      	ldr	r3, [r3, #0]
    48ca:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
    48cc:	684a      	ldr	r2, [r1, #4]
    48ce:	6813      	ldr	r3, [r2, #0]
    48d0:	3301      	adds	r3, #1
    48d2:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
    48d4:	68ca      	ldr	r2, [r1, #12]
    48d6:	4293      	cmp	r3, r2
    48d8:	d102      	bne.n	48e0 <out_func+0x1e>
		log_output_flush(out_ctx);
    48da:	4608      	mov	r0, r1
    48dc:	f7ff ffe4 	bl	48a8 <log_output_flush>
}
    48e0:	2000      	movs	r0, #0
    48e2:	bd08      	pop	{r3, pc}

000048e4 <char_out>:
{
    48e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48e6:	460d      	mov	r5, r1
    48e8:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
    48ea:	4604      	mov	r4, r0
    48ec:	1847      	adds	r7, r0, r1
    48ee:	42bc      	cmp	r4, r7
    48f0:	d101      	bne.n	48f6 <char_out+0x12>
}
    48f2:	4628      	mov	r0, r5
    48f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
    48f6:	f814 1b01 	ldrb.w	r1, [r4], #1
    48fa:	6873      	ldr	r3, [r6, #4]
    48fc:	4630      	mov	r0, r6
    48fe:	685b      	ldr	r3, [r3, #4]
    4900:	4798      	blx	r3
    4902:	e7f4      	b.n	48ee <char_out+0xa>

00004904 <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
    4904:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
    4906:	7a5a      	ldrb	r2, [r3, #9]
    4908:	b932      	cbnz	r2, 4918 <get_status+0x14>
	if (data->ref > 0) {
    490a:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
    490e:	2800      	cmp	r0, #0
    4910:	bfcc      	ite	gt
    4912:	2000      	movgt	r0, #0
    4914:	2001      	movle	r0, #1
    4916:	4770      	bx	lr
    4918:	2002      	movs	r0, #2
}
    491a:	4770      	bx	lr

0000491c <clock_stop>:
	const struct nrf_clock_control_config *config =
    491c:	6802      	ldr	r2, [r0, #0]
{
    491e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
    4920:	6895      	ldr	r5, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
    4922:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
    4924:	f04f 0320 	mov.w	r3, #32
    4928:	f3ef 8611 	mrs	r6, BASEPRI
    492c:	f383 8811 	msr	BASEPRI, r3
    4930:	f3bf 8f6f 	isb	sy
	data->ref--;
    4934:	7a23      	ldrb	r3, [r4, #8]
    4936:	3b01      	subs	r3, #1
    4938:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
    493a:	2b00      	cmp	r3, #0
	data->ref--;
    493c:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
    493e:	d11c      	bne.n	497a <clock_stop+0x5e>
	list->tail = NULL;
    4940:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
    4944:	686b      	ldr	r3, [r5, #4]
				config->stop_handler(dev) : true;
    4946:	b9a3      	cbnz	r3, 4972 <clock_stop+0x56>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    4948:	7aeb      	ldrb	r3, [r5, #11]
    494a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    494e:	2201      	movs	r2, #1
    4950:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
    4952:	892b      	ldrh	r3, [r5, #8]
    4954:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4958:	2200      	movs	r2, #0
    495a:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + (uint32_t)event));
    495c:	681b      	ldr	r3, [r3, #0]
    495e:	9301      	str	r3, [sp, #4]
    (void)dummy;
    4960:	9b01      	ldr	r3, [sp, #4]
		data->started = false;
    4962:	2000      	movs	r0, #0
    4964:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
    4966:	f386 8811 	msr	BASEPRI, r6
    496a:	f3bf 8f6f 	isb	sy
}
    496e:	b002      	add	sp, #8
    4970:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
    4972:	4798      	blx	r3
    4974:	2800      	cmp	r0, #0
    4976:	d1e7      	bne.n	4948 <clock_stop+0x2c>
    4978:	e7f3      	b.n	4962 <clock_stop+0x46>
	} else if (data->ref < 0) {
    497a:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
    497e:	bfbc      	itt	lt
    4980:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
    4982:	f06f 0044 	mvnlt.w	r0, #68	; 0x44
    4986:	e7ee      	b.n	4966 <clock_stop+0x4a>

00004988 <clock_async_start>:
{
    4988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
    498a:	6803      	ldr	r3, [r0, #0]
	struct nrf_clock_control *clk_data = dev->driver_data;
    498c:	6885      	ldr	r5, [r0, #8]
	const struct nrf_clock_control_config *config =
    498e:	689f      	ldr	r7, [r3, #8]
{
    4990:	4606      	mov	r6, r0
    4992:	4614      	mov	r4, r2
	__asm__ volatile(
    4994:	f04f 0320 	mov.w	r3, #32
    4998:	f3ef 8211 	mrs	r2, BASEPRI
    499c:	f383 8811 	msr	BASEPRI, r3
    49a0:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    49a4:	7a2b      	ldrb	r3, [r5, #8]
    49a6:	3301      	adds	r3, #1
    49a8:	b25b      	sxtb	r3, r3
    49aa:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
    49ac:	f382 8811 	msr	BASEPRI, r2
    49b0:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
    49b4:	7a6a      	ldrb	r2, [r5, #9]
    49b6:	b132      	cbz	r2, 49c6 <clock_async_start+0x3e>
		if (data) {
    49b8:	b90c      	cbnz	r4, 49be <clock_async_start+0x36>
	return 0;
    49ba:	2000      	movs	r0, #0
}
    49bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
    49be:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    49c2:	4798      	blx	r3
    49c4:	e7f9      	b.n	49ba <clock_async_start+0x32>
		if (ref == 1) {
    49c6:	2b01      	cmp	r3, #1
    49c8:	d106      	bne.n	49d8 <clock_async_start+0x50>
			do_start =  (config->start_handler) ?
    49ca:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
    49cc:	b933      	cbnz	r3, 49dc <clock_async_start+0x54>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    49ce:	7abb      	ldrb	r3, [r7, #10]
    49d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    49d4:	2201      	movs	r2, #1
    49d6:	601a      	str	r2, [r3, #0]
		if (data) {
    49d8:	b94c      	cbnz	r4, 49ee <clock_async_start+0x66>
    49da:	e7ee      	b.n	49ba <clock_async_start+0x32>
					config->start_handler(dev) : true;
    49dc:	4798      	blx	r3
    49de:	2800      	cmp	r0, #0
    49e0:	d1f5      	bne.n	49ce <clock_async_start+0x46>
			} else if (data) {
    49e2:	2c00      	cmp	r4, #0
    49e4:	d0e9      	beq.n	49ba <clock_async_start+0x32>
				data->cb(dev, data->user_data);
    49e6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    49ea:	4630      	mov	r0, r6
    49ec:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
    49ee:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
    49f0:	429c      	cmp	r4, r3
    49f2:	d00d      	beq.n	4a10 <clock_async_start+0x88>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    49f4:	b113      	cbz	r3, 49fc <clock_async_start+0x74>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    49f6:	681b      	ldr	r3, [r3, #0]
	} while (item);
    49f8:	2b00      	cmp	r3, #0
    49fa:	d1f9      	bne.n	49f0 <clock_async_start+0x68>
	parent->next = child;
    49fc:	2000      	movs	r0, #0
    49fe:	6020      	str	r0, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    4a00:	686b      	ldr	r3, [r5, #4]
    4a02:	b913      	cbnz	r3, 4a0a <clock_async_start+0x82>
	list->head = node;
    4a04:	e9c5 4400 	strd	r4, r4, [r5]
    4a08:	e7d7      	b.n	49ba <clock_async_start+0x32>
	parent->next = child;
    4a0a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4a0c:	606c      	str	r4, [r5, #4]
    4a0e:	e7d5      	b.n	49bc <clock_async_start+0x34>
				return -EALREADY;
    4a10:	f06f 0044 	mvn.w	r0, #68	; 0x44
    4a14:	e7d2      	b.n	49bc <clock_async_start+0x34>

00004a16 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    4a16:	2200      	movs	r2, #0
    4a18:	f7ff bfb6 	b.w	4988 <clock_async_start>

00004a1c <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    4a1c:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
    4a1e:	2000      	movs	r0, #0
	list->tail = NULL;
    4a20:	e9c3 0000 	strd	r0, r0, [r3]
}
    4a24:	4770      	bx	lr

00004a26 <hfclk_init>:
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    4a26:	2200      	movs	r2, #0
{
    4a28:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    4a2a:	2101      	movs	r1, #1
{
    4a2c:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    4a2e:	4610      	mov	r0, r2
    4a30:	f7fc fc9a 	bl	1368 <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    4a34:	2000      	movs	r0, #0
    4a36:	f7fc fc87 	bl	1348 <z_arch_irq_enable>
}

__STATIC_INLINE void nrf_clock_lf_src_set(nrf_clock_lfclk_t source)
{
    NRF_CLOCK->LFCLKSRC = (uint32_t)(source);
    4a3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a3e:	2201      	movs	r2, #1
    4a40:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NRF_CLOCK->INTENSET = int_mask;
    4a44:	2203      	movs	r2, #3
    4a46:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    4a4a:	68a3      	ldr	r3, [r4, #8]
	list->head = NULL;
    4a4c:	2000      	movs	r0, #0
	list->tail = NULL;
    4a4e:	e9c3 0000 	strd	r0, r0, [r3]
}
    4a52:	bd10      	pop	{r4, pc}

00004a54 <clkstarted_handle>:
{
    4a54:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
    4a56:	6884      	ldr	r4, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
    4a58:	6823      	ldr	r3, [r4, #0]
{
    4a5a:	4605      	mov	r5, r0
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    4a5c:	b12b      	cbz	r3, 4a6a <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4a5e:	6861      	ldr	r1, [r4, #4]
    4a60:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    4a62:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4a64:	428b      	cmp	r3, r1
	list->tail = node;
    4a66:	bf08      	it	eq
    4a68:	6062      	streq	r2, [r4, #4]
	data->started = true;
    4a6a:	2201      	movs	r2, #1
    4a6c:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
    4a6e:	b903      	cbnz	r3, 4a72 <clkstarted_handle+0x1e>
}
    4a70:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
    4a72:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    4a76:	4628      	mov	r0, r5
    4a78:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
    4a7a:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
    4a7c:	2b00      	cmp	r3, #0
    4a7e:	d0f7      	beq.n	4a70 <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4a80:	6861      	ldr	r1, [r4, #4]
    4a82:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    4a84:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4a86:	428b      	cmp	r3, r1
	list->tail = node;
    4a88:	bf08      	it	eq
    4a8a:	6062      	streq	r2, [r4, #4]
    4a8c:	e7ef      	b.n	4a6e <clkstarted_handle+0x1a>

00004a8e <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    4a8e:	4770      	bx	lr

00004a90 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    4a90:	4770      	bx	lr

00004a92 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
    4a92:	f7fc bcd7 	b.w	1444 <z_arm_bus_fault>

00004a96 <z_do_kernel_oops>:

void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    4a96:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
    4a98:	6800      	ldr	r0, [r0, #0]
    4a9a:	f7fc bce7 	b.w	146c <z_arm_fatal_error>

00004a9e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    4a9e:	b508      	push	{r3, lr}
	handler();
    4aa0:	f7fc fd36 	bl	1510 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
    4aa4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
    4aa8:	f7fc bbec 	b.w	1284 <z_arm_exc_exit>

00004aac <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    4aac:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    4aae:	2100      	movs	r1, #0
    4ab0:	a801      	add	r0, sp, #4
    4ab2:	f7fd f8d5 	bl	1c60 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    4ab6:	b003      	add	sp, #12
    4ab8:	f85d fb04 	ldr.w	pc, [sp], #4

00004abc <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
    4abc:	b570      	push	{r4, r5, r6, lr}
    4abe:	3901      	subs	r1, #1
    4ac0:	4605      	mov	r5, r0
    4ac2:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    4ac4:	b142      	cbz	r2, 4ad8 <strncpy+0x1c>
    4ac6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    4aca:	1e56      	subs	r6, r2, #1
    4acc:	b92b      	cbnz	r3, 4ada <strncpy+0x1e>
    4ace:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
    4ad0:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
    4ad4:	42a2      	cmp	r2, r4
    4ad6:	d1fb      	bne.n	4ad0 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
    4ad8:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
    4ada:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
    4ade:	4632      	mov	r2, r6
    4ae0:	e7ef      	b.n	4ac2 <strncpy+0x6>

00004ae2 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    4ae2:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
    4ae4:	7802      	ldrb	r2, [r0, #0]
    4ae6:	428a      	cmp	r2, r1
    4ae8:	4603      	mov	r3, r0
    4aea:	f100 0001 	add.w	r0, r0, #1
    4aee:	d004      	beq.n	4afa <strchr+0x18>
    4af0:	2a00      	cmp	r2, #0
    4af2:	d1f7      	bne.n	4ae4 <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
    4af4:	2900      	cmp	r1, #0
    4af6:	bf18      	it	ne
    4af8:	2300      	movne	r3, #0
}
    4afa:	4618      	mov	r0, r3
    4afc:	4770      	bx	lr

00004afe <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    4afe:	3801      	subs	r0, #1
    4b00:	3901      	subs	r1, #1
    4b02:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    4b06:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    4b0a:	4293      	cmp	r3, r2
    4b0c:	d101      	bne.n	4b12 <strcmp+0x14>
    4b0e:	2b00      	cmp	r3, #0
    4b10:	d1f7      	bne.n	4b02 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    4b12:	1a98      	subs	r0, r3, r2
    4b14:	4770      	bx	lr

00004b16 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    4b16:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    4b18:	ea81 0400 	eor.w	r4, r1, r0
    4b1c:	07a5      	lsls	r5, r4, #30
    4b1e:	4603      	mov	r3, r0
    4b20:	d00b      	beq.n	4b3a <memcpy+0x24>
    4b22:	3b01      	subs	r3, #1
    4b24:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    4b26:	4291      	cmp	r1, r2
    4b28:	d11a      	bne.n	4b60 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    4b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    4b2c:	2a00      	cmp	r2, #0
    4b2e:	d0fc      	beq.n	4b2a <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    4b30:	f811 4b01 	ldrb.w	r4, [r1], #1
    4b34:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    4b38:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    4b3a:	079c      	lsls	r4, r3, #30
    4b3c:	d1f6      	bne.n	4b2c <memcpy+0x16>
    4b3e:	0895      	lsrs	r5, r2, #2
    4b40:	00ac      	lsls	r4, r5, #2
    4b42:	1f1e      	subs	r6, r3, #4
    4b44:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    4b46:	42b9      	cmp	r1, r7
    4b48:	d105      	bne.n	4b56 <memcpy+0x40>
    4b4a:	f06f 0603 	mvn.w	r6, #3
    4b4e:	fb06 2205 	mla	r2, r6, r5, r2
    4b52:	4423      	add	r3, r4
    4b54:	e7e5      	b.n	4b22 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    4b56:	f851 cb04 	ldr.w	ip, [r1], #4
    4b5a:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
    4b5e:	e7f2      	b.n	4b46 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
    4b60:	f811 4b01 	ldrb.w	r4, [r1], #1
    4b64:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    4b68:	e7dd      	b.n	4b26 <memcpy+0x10>

00004b6a <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    4b6a:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    4b6c:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    4b6e:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    4b70:	079c      	lsls	r4, r3, #30
    4b72:	d110      	bne.n	4b96 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    4b74:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    4b78:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    4b7c:	0894      	lsrs	r4, r2, #2
    4b7e:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    4b82:	42b3      	cmp	r3, r6
    4b84:	d10d      	bne.n	4ba2 <memset+0x38>
    4b86:	f06f 0503 	mvn.w	r5, #3
    4b8a:	fb05 2404 	mla	r4, r5, r4, r2
    4b8e:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    4b90:	42a3      	cmp	r3, r4
    4b92:	d109      	bne.n	4ba8 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    4b94:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    4b96:	2a00      	cmp	r2, #0
    4b98:	d0fc      	beq.n	4b94 <memset+0x2a>
		*(d_byte++) = c_byte;
    4b9a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4b9e:	3a01      	subs	r2, #1
    4ba0:	e7e6      	b.n	4b70 <memset+0x6>
		*(d_word++) = c_word;
    4ba2:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    4ba6:	e7ec      	b.n	4b82 <memset+0x18>
		*(d_byte++) = c_byte;
    4ba8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4bac:	e7f0      	b.n	4b90 <memset+0x26>

00004bae <_to_x>:
{
    4bae:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bb0:	4603      	mov	r3, r0
		unsigned int d = n % base;
    4bb2:	fbb1 f7f2 	udiv	r7, r1, r2
    4bb6:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    4bba:	2d09      	cmp	r5, #9
    4bbc:	bf8c      	ite	hi
    4bbe:	2627      	movhi	r6, #39	; 0x27
    4bc0:	2600      	movls	r6, #0
    4bc2:	461c      	mov	r4, r3
    4bc4:	3530      	adds	r5, #48	; 0x30
    4bc6:	4435      	add	r5, r6
	} while (n);
    4bc8:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    4bca:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
    4bce:	d206      	bcs.n	4bde <_to_x+0x30>
	*buf = 0;
    4bd0:	2200      	movs	r2, #0
    4bd2:	7022      	strb	r2, [r4, #0]
	len = buf - start;
    4bd4:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
    4bd6:	4283      	cmp	r3, r0
    4bd8:	d804      	bhi.n	4be4 <_to_x+0x36>
}
    4bda:	4620      	mov	r0, r4
    4bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
    4bde:	4639      	mov	r1, r7
    4be0:	4623      	mov	r3, r4
    4be2:	e7e6      	b.n	4bb2 <_to_x+0x4>
		char tmp = *buf;
    4be4:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
    4be6:	7801      	ldrb	r1, [r0, #0]
    4be8:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
    4bec:	f800 2b01 	strb.w	r2, [r0], #1
    4bf0:	e7f1      	b.n	4bd6 <_to_x+0x28>

00004bf2 <_rlrshift>:
{
    4bf2:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
    4bf4:	e9d0 6500 	ldrd	r6, r5, [r0]
    4bf8:	0872      	lsrs	r2, r6, #1
    4bfa:	f006 0301 	and.w	r3, r6, #1
    4bfe:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
    4c02:	189b      	adds	r3, r3, r2
    4c04:	f04f 0100 	mov.w	r1, #0
    4c08:	ea4f 0455 	mov.w	r4, r5, lsr #1
    4c0c:	eb44 0101 	adc.w	r1, r4, r1
    4c10:	e9c0 3100 	strd	r3, r1, [r0]
}
    4c14:	bd70      	pop	{r4, r5, r6, pc}

00004c16 <_ldiv5>:
	uint64_t rem = *v, quot = 0U, q;
    4c16:	e9d0 3200 	ldrd	r3, r2, [r0]
{
    4c1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	rem += 2U;
    4c1e:	3302      	adds	r3, #2
		q = (uint64_t)(hi / 5U) << shifts[i];
    4c20:	f04f 0705 	mov.w	r7, #5
    4c24:	f04f 0c00 	mov.w	ip, #0
	rem += 2U;
    4c28:	f142 0200 	adc.w	r2, r2, #0
		rem -= q * 5U;
    4c2c:	ebb3 060c 	subs.w	r6, r3, ip
		q = (uint64_t)(hi / 5U) << shifts[i];
    4c30:	fbb2 fef7 	udiv	lr, r2, r7
		rem -= q * 5U;
    4c34:	fb07 f10e 	mul.w	r1, r7, lr
    4c38:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
    4c3c:	08f2      	lsrs	r2, r6, #3
    4c3e:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
    4c42:	fbb2 f1f7 	udiv	r1, r2, r7
    4c46:	00ca      	lsls	r2, r1, #3
		quot += q;
    4c48:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
    4c4c:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
    4c50:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
    4c54:	fba2 2307 	umull	r2, r3, r2, r7
    4c58:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
    4c5a:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
    4c5e:	eb18 0403 	adds.w	r4, r8, r3
    4c62:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
    4c66:	e9c0 4500 	strd	r4, r5, [r0]
}
    4c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00004c6e <_get_digit>:
	if (*digit_count > 0) {
    4c6e:	680b      	ldr	r3, [r1, #0]
    4c70:	2b00      	cmp	r3, #0
{
    4c72:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
    4c74:	dd10      	ble.n	4c98 <_get_digit+0x2a>
		*digit_count -= 1;
    4c76:	3b01      	subs	r3, #1
		*fr = *fr * 10U;
    4c78:	6802      	ldr	r2, [r0, #0]
		*digit_count -= 1;
    4c7a:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
    4c7c:	6844      	ldr	r4, [r0, #4]
    4c7e:	210a      	movs	r1, #10
    4c80:	fba2 5601 	umull	r5, r6, r2, r1
    4c84:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    4c88:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
    4c8c:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
    4c90:	0f31      	lsrs	r1, r6, #28
    4c92:	3130      	adds	r1, #48	; 0x30
}
    4c94:	4608      	mov	r0, r1
    4c96:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
    4c98:	2130      	movs	r1, #48	; 0x30
    4c9a:	e7fb      	b.n	4c94 <_get_digit+0x26>

00004c9c <_stdout_hook_default>:
}
    4c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4ca0:	4770      	bx	lr

00004ca2 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    4ca2:	684b      	ldr	r3, [r1, #4]
    4ca4:	2b01      	cmp	r3, #1
    4ca6:	dd07      	ble.n	4cb8 <sprintf_out+0x16>
		*(p->ptr) = c;
    4ca8:	680b      	ldr	r3, [r1, #0]
    4caa:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    4cac:	680b      	ldr	r3, [r1, #0]
    4cae:	3301      	adds	r3, #1
    4cb0:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    4cb2:	684b      	ldr	r3, [r1, #4]
    4cb4:	3b01      	subs	r3, #1
    4cb6:	604b      	str	r3, [r1, #4]
}
    4cb8:	2000      	movs	r0, #0
    4cba:	4770      	bx	lr

00004cbc <nrf_gpio_cfg_sense_set>:
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    4cbc:	0080      	lsls	r0, r0, #2
    4cbe:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    4cc2:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    4cc6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    4cca:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    4cce:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    4cd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    4cd6:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
    4cda:	4770      	bx	lr

00004cdc <gpio_nrfx_write>:
{
    4cdc:	b510      	push	{r4, lr}
	return port->config->config_info;
    4cde:	6804      	ldr	r4, [r0, #0]
    4ce0:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4ce2:	68a4      	ldr	r4, [r4, #8]
    4ce4:	69c0      	ldr	r0, [r0, #28]
    4ce6:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    4ce8:	2901      	cmp	r1, #1
    4cea:	d104      	bne.n	4cf6 <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
    4cec:	4058      	eors	r0, r3
    p_reg->OUT = value;
    4cee:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
}
    4cf2:	2000      	movs	r0, #0
    4cf4:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
    4cf6:	3300      	adds	r3, #0
    4cf8:	fa20 f002 	lsr.w	r0, r0, r2
    4cfc:	f04f 0101 	mov.w	r1, #1
    4d00:	bf18      	it	ne
    4d02:	2301      	movne	r3, #1
    4d04:	f000 0001 	and.w	r0, r0, #1
    4d08:	4091      	lsls	r1, r2
    4d0a:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
    4d0c:	bf14      	ite	ne
    4d0e:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    4d12:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
    4d16:	e7ec      	b.n	4cf2 <gpio_nrfx_write+0x16>

00004d18 <gpio_nrfx_read>:
{
    4d18:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
    4d1a:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    4d1c:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4d1e:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    4d20:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4d22:	6825      	ldr	r5, [r4, #0]
    return p_reg->DIR;
    4d24:	f8d5 6514 	ldr.w	r6, [r5, #1300]	; 0x514
    return p_reg->IN;
    4d28:	f8d5 4510 	ldr.w	r4, [r5, #1296]	; 0x510
    return p_reg->OUT;
    4d2c:	f8d5 5504 	ldr.w	r5, [r5, #1284]	; 0x504
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    4d30:	4060      	eors	r0, r4
    4d32:	406c      	eors	r4, r5
    4d34:	4034      	ands	r4, r6
    4d36:	4060      	eors	r0, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
    4d38:	2901      	cmp	r1, #1
		*value = (port_val & BIT(pin)) ? 1 : 0;
    4d3a:	bf1c      	itt	ne
    4d3c:	40d0      	lsrne	r0, r2
    4d3e:	f000 0001 	andne.w	r0, r0, #1
    4d42:	6018      	str	r0, [r3, #0]
}
    4d44:	2000      	movs	r0, #0
    4d46:	bd70      	pop	{r4, r5, r6, pc}

00004d48 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4d48:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
    4d4a:	6818      	ldr	r0, [r3, #0]
{
    4d4c:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    4d4e:	b158      	cbz	r0, 4d68 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4d50:	2400      	movs	r4, #0
    4d52:	4281      	cmp	r1, r0
    4d54:	d113      	bne.n	4d7e <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    4d56:	6808      	ldr	r0, [r1, #0]
    4d58:	b95c      	cbnz	r4, 4d72 <gpio_nrfx_manage_callback+0x2a>
    4d5a:	685c      	ldr	r4, [r3, #4]
	list->head = node;
    4d5c:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    4d5e:	42a1      	cmp	r1, r4
    4d60:	d100      	bne.n	4d64 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    4d62:	6058      	str	r0, [r3, #4]
	parent->next = child;
    4d64:	2000      	movs	r0, #0
    4d66:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    4d68:	b972      	cbnz	r2, 4d88 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    4d6a:	2000      	movs	r0, #0
}
    4d6c:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4d6e:	4628      	mov	r0, r5
    4d70:	e7ef      	b.n	4d52 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
    4d72:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    4d74:	6858      	ldr	r0, [r3, #4]
    4d76:	4281      	cmp	r1, r0
	list->tail = node;
    4d78:	bf08      	it	eq
    4d7a:	605c      	streq	r4, [r3, #4]
    4d7c:	e7f2      	b.n	4d64 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4d7e:	6805      	ldr	r5, [r0, #0]
	return node->next;
    4d80:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4d82:	2d00      	cmp	r5, #0
    4d84:	d1f3      	bne.n	4d6e <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    4d86:	b13a      	cbz	r2, 4d98 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    4d88:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    4d8a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    4d8c:	6858      	ldr	r0, [r3, #4]
	list->head = node;
    4d8e:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    4d90:	2800      	cmp	r0, #0
    4d92:	d1ea      	bne.n	4d6a <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    4d94:	6059      	str	r1, [r3, #4]
    4d96:	e7e9      	b.n	4d6c <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    4d98:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4d9c:	e7e6      	b.n	4d6c <gpio_nrfx_manage_callback+0x24>

00004d9e <gpio_nrfx_config>:
{
    4d9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4da2:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    4da4:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    4da6:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    4daa:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    4dae:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    4db0:	d041      	beq.n	4e36 <gpio_nrfx_config+0x98>
    4db2:	dc09      	bgt.n	4dc8 <gpio_nrfx_config+0x2a>
    4db4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    4db8:	d03f      	beq.n	4e3a <gpio_nrfx_config+0x9c>
    4dba:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    4dbe:	d03e      	beq.n	4e3e <gpio_nrfx_config+0xa0>
    4dc0:	b190      	cbz	r0, 4de8 <gpio_nrfx_config+0x4a>
		return -EINVAL;
    4dc2:	f06f 0015 	mvn.w	r0, #21
    4dc6:	e033      	b.n	4e30 <gpio_nrfx_config+0x92>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    4dc8:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    4dcc:	d039      	beq.n	4e42 <gpio_nrfx_config+0xa4>
    4dce:	dc04      	bgt.n	4dda <gpio_nrfx_config+0x3c>
    4dd0:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    4dd4:	d1f5      	bne.n	4dc2 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    4dd6:	2003      	movs	r0, #3
    4dd8:	e006      	b.n	4de8 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    4dda:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    4dde:	d032      	beq.n	4e46 <gpio_nrfx_config+0xa8>
    4de0:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    4de4:	d1ed      	bne.n	4dc2 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
    4de6:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    4de8:	f406 7740 	and.w	r7, r6, #768	; 0x300
    4dec:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    4df0:	d02b      	beq.n	4e4a <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_NOPULL;
    4df2:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
    4df6:	4263      	negs	r3, r4
    4df8:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    4dfa:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    4dfe:	ea4f 074c 	mov.w	r7, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
    4e02:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    4e04:	ea47 070c 	orr.w	r7, r7, ip
		from_pin = pin;
    4e08:	bf18      	it	ne
    4e0a:	b2d4      	uxtbne	r4, r2
    4e0c:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    4e10:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		to_pin   = pin;
    4e14:	bf12      	itee	ne
    4e16:	46a1      	movne	r9, r4
		to_pin   = 31U;
    4e18:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
    4e1c:	2400      	moveq	r4, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    4e1e:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
    4e22:	f04f 0b01 	mov.w	fp, #1
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    4e26:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    4e2a:	45a1      	cmp	r9, r4
    4e2c:	d20f      	bcs.n	4e4e <gpio_nrfx_config+0xb0>
	return 0;
    4e2e:	2000      	movs	r0, #0
}
    4e30:	b003      	add	sp, #12
    4e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
    4e36:	2002      	movs	r0, #2
    4e38:	e7d6      	b.n	4de8 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
    4e3a:	2001      	movs	r0, #1
    4e3c:	e7d4      	b.n	4de8 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
    4e3e:	2004      	movs	r0, #4
    4e40:	e7d2      	b.n	4de8 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
    4e42:	2005      	movs	r0, #5
    4e44:	e7d0      	b.n	4de8 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
    4e46:	2006      	movs	r0, #6
    4e48:	e7ce      	b.n	4de8 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
    4e4a:	2303      	movs	r3, #3
    4e4c:	e7d5      	b.n	4dfa <gpio_nrfx_config+0x5c>
	return port->config->config_info;
    4e4e:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    4e52:	6892      	ldr	r2, [r2, #8]
    4e54:	7911      	ldrb	r1, [r2, #4]
    4e56:	f004 021f 	and.w	r2, r4, #31
    4e5a:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    4e5e:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    4e62:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    4e66:	fa0b f204 	lsl.w	r2, fp, r4
    4e6a:	68a9      	ldr	r1, [r5, #8]
    4e6c:	2b00      	cmp	r3, #0
    4e6e:	d025      	beq.n	4ebc <gpio_nrfx_config+0x11e>
    4e70:	4311      	orrs	r1, r2
    4e72:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    4e74:	6969      	ldr	r1, [r5, #20]
    4e76:	9301      	str	r3, [sp, #4]
    4e78:	06b0      	lsls	r0, r6, #26
    4e7a:	bf4c      	ite	mi
    4e7c:	4311      	orrmi	r1, r2
    4e7e:	4391      	bicpl	r1, r2
    4e80:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    4e82:	69a9      	ldr	r1, [r5, #24]
    4e84:	0670      	lsls	r0, r6, #25
    4e86:	bf4c      	ite	mi
    4e88:	4311      	orrmi	r1, r2
    4e8a:	4391      	bicpl	r1, r2
    4e8c:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
    4e8e:	6929      	ldr	r1, [r5, #16]
    4e90:	0770      	lsls	r0, r6, #29
    4e92:	bf4c      	ite	mi
    4e94:	4311      	orrmi	r1, r2
    4e96:	4391      	bicpl	r1, r2
    4e98:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    4e9a:	69e9      	ldr	r1, [r5, #28]
    4e9c:	0630      	lsls	r0, r6, #24
    4e9e:	bf4c      	ite	mi
    4ea0:	430a      	orrmi	r2, r1
    4ea2:	ea21 0202 	bicpl.w	r2, r1, r2
    4ea6:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    4ea8:	4621      	mov	r1, r4
    4eaa:	4640      	mov	r0, r8
    4eac:	f7fd fc80 	bl	27b0 <gpiote_pin_int_cfg>
		if (res != 0) {
    4eb0:	2800      	cmp	r0, #0
    4eb2:	d1bd      	bne.n	4e30 <gpio_nrfx_config+0x92>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    4eb4:	3401      	adds	r4, #1
    4eb6:	b2e4      	uxtb	r4, r4
    4eb8:	9b01      	ldr	r3, [sp, #4]
    4eba:	e7b6      	b.n	4e2a <gpio_nrfx_config+0x8c>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    4ebc:	ea21 0102 	bic.w	r1, r1, r2
    4ec0:	e7d7      	b.n	4e72 <gpio_nrfx_config+0xd4>

00004ec2 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    4ec2:	2901      	cmp	r1, #1
{
    4ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    4ec8:	bf18      	it	ne
    4eca:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    4ecc:	6887      	ldr	r7, [r0, #8]
{
    4ece:	4606      	mov	r6, r0
		to_pin   = pin;
    4ed0:	bf12      	itee	ne
    4ed2:	4625      	movne	r5, r4
		to_pin   = 31U;
    4ed4:	251f      	moveq	r5, #31
		from_pin = 0U;
    4ed6:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    4ed8:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    4edc:	42ac      	cmp	r4, r5
    4ede:	d902      	bls.n	4ee6 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
    4ee0:	2000      	movs	r0, #0
}
    4ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    4ee6:	68fb      	ldr	r3, [r7, #12]
    4ee8:	fa08 f204 	lsl.w	r2, r8, r4
    4eec:	ea23 0302 	bic.w	r3, r3, r2
    4ef0:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    4ef2:	4621      	mov	r1, r4
    4ef4:	4630      	mov	r0, r6
    4ef6:	f7fd fc5b 	bl	27b0 <gpiote_pin_int_cfg>
		if (res != 0) {
    4efa:	2800      	cmp	r0, #0
    4efc:	d1f1      	bne.n	4ee2 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    4efe:	3401      	adds	r4, #1
    4f00:	b2e4      	uxtb	r4, r4
    4f02:	e7eb      	b.n	4edc <gpio_nrfx_pin_disable_callback+0x1a>

00004f04 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    4f04:	2901      	cmp	r1, #1
{
    4f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    4f0a:	bf18      	it	ne
    4f0c:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    4f0e:	6887      	ldr	r7, [r0, #8]
{
    4f10:	4606      	mov	r6, r0
		to_pin   = pin;
    4f12:	bf12      	itee	ne
    4f14:	4625      	movne	r5, r4
		to_pin   = 31U;
    4f16:	251f      	moveq	r5, #31
		from_pin = 0U;
    4f18:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    4f1a:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    4f1e:	42ac      	cmp	r4, r5
    4f20:	d902      	bls.n	4f28 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
    4f22:	2000      	movs	r0, #0
}
    4f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    4f28:	68fb      	ldr	r3, [r7, #12]
    4f2a:	fa08 f204 	lsl.w	r2, r8, r4
    4f2e:	4313      	orrs	r3, r2
    4f30:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    4f32:	4621      	mov	r1, r4
    4f34:	4630      	mov	r0, r6
    4f36:	f7fd fc3b 	bl	27b0 <gpiote_pin_int_cfg>
		if (res != 0) {
    4f3a:	2800      	cmp	r0, #0
    4f3c:	d1f2      	bne.n	4f24 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    4f3e:	3401      	adds	r4, #1
    4f40:	b2e4      	uxtb	r4, r4
    4f42:	e7ec      	b.n	4f1e <gpio_nrfx_pin_enable_callback+0x1a>

00004f44 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    4f44:	6882      	ldr	r2, [r0, #8]
{
    4f46:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    4f48:	e892 0003 	ldmia.w	r2, {r0, r1}
    4f4c:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4f50:	2000      	movs	r0, #0
    4f52:	4770      	bx	lr

00004f54 <nrf_pwm_event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4f54:	2300      	movs	r3, #0
    4f56:	5043      	str	r3, [r0, r1]
{
    4f58:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    4f5a:	5843      	ldr	r3, [r0, r1]
    4f5c:	9301      	str	r3, [sp, #4]
    (void)dummy;
    4f5e:	9b01      	ldr	r3, [sp, #4]
}
    4f60:	b002      	add	sp, #8
    4f62:	4770      	bx	lr

00004f64 <start_playback.isra.2>:
static uint32_t start_playback(nrfx_pwm_t const * const p_instance,
    4f64:	b538      	push	{r3, r4, r5, lr}
    4f66:	461d      	mov	r5, r3
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    4f68:	2302      	movs	r3, #2
    4f6a:	710b      	strb	r3, [r1, #4]
    if (p_cb->handler)
    4f6c:	680b      	ldr	r3, [r1, #0]
    p_cb->flags = flags;
    4f6e:	714a      	strb	r2, [r1, #5]
static uint32_t start_playback(nrfx_pwm_t const * const p_instance,
    4f70:	4604      	mov	r4, r0
    if (p_cb->handler)
    4f72:	b17b      	cbz	r3, 4f94 <start_playback.isra.2+0x30>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
    4f74:	f012 0f04 	tst.w	r2, #4
    4f78:	bf0c      	ite	eq
    4f7a:	2182      	moveq	r1, #130	; 0x82
    4f7c:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
    4f7e:	0710      	lsls	r0, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
    4f80:	bf48      	it	mi
    4f82:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
    4f86:	06d3      	lsls	r3, r2, #27
        nrf_pwm_int_set(p_instance->p_registers, int_mask);
    4f88:	6823      	ldr	r3, [r4, #0]
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
    4f8a:	bf48      	it	mi
    4f8c:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
    4f90:	f8c3 1300 	str.w	r1, [r3, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
    4f94:	6820      	ldr	r0, [r4, #0]
    4f96:	f44f 7182 	mov.w	r1, #260	; 0x104
    4f9a:	f7ff ffdb 	bl	4f54 <nrf_pwm_event_clear>
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
    4f9e:	6820      	ldr	r0, [r4, #0]
    4fa0:	f012 0f80 	tst.w	r2, #128	; 0x80
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4fa4:	bf05      	ittet	eq
    4fa6:	2301      	moveq	r3, #1
    4fa8:	5143      	streq	r3, [r0, r5]
    return ((uint32_t)p_reg + (uint32_t)task);
    4faa:	1940      	addne	r0, r0, r5
    return 0;
    4fac:	2000      	moveq	r0, #0
}
    4fae:	bd38      	pop	{r3, r4, r5, pc}

00004fb0 <nrfx_pwm_stop>:
{
    4fb0:	b538      	push	{r3, r4, r5, lr}
    4fb2:	4605      	mov	r5, r0
    4fb4:	460c      	mov	r4, r1
    if (nrfx_pwm_is_stopped(p_instance))
    4fb6:	f7fe f8fd 	bl	31b4 <nrfx_pwm_is_stopped>
    4fba:	b950      	cbnz	r0, 4fd2 <nrfx_pwm_stop+0x22>
        nrf_pwm_task_trigger(p_instance->p_registers, NRF_PWM_TASK_STOP);
    4fbc:	682b      	ldr	r3, [r5, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4fbe:	2201      	movs	r2, #1
    4fc0:	605a      	str	r2, [r3, #4]
            if (nrfx_pwm_is_stopped(p_instance))
    4fc2:	4628      	mov	r0, r5
    4fc4:	f7fe f8f6 	bl	31b4 <nrfx_pwm_is_stopped>
    4fc8:	b918      	cbnz	r0, 4fd2 <nrfx_pwm_stop+0x22>
        } while (wait_until_stopped);
    4fca:	2c00      	cmp	r4, #0
    4fcc:	d1f9      	bne.n	4fc2 <nrfx_pwm_stop+0x12>
}
    4fce:	4620      	mov	r0, r4
    4fd0:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
    4fd2:	2401      	movs	r4, #1
    4fd4:	e7fb      	b.n	4fce <nrfx_pwm_stop+0x1e>

00004fd6 <z_arch_system_halt>:
	__asm__ volatile(
    4fd6:	f04f 0220 	mov.w	r2, #32
    4fda:	f3ef 8311 	mrs	r3, BASEPRI
    4fde:	f382 8811 	msr	BASEPRI, r2
    4fe2:	f3bf 8f6f 	isb	sy
	}
    4fe6:	e7fe      	b.n	4fe6 <z_arch_system_halt+0x10>

00004fe8 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    4fe8:	f7ff bd52 	b.w	4a90 <z_clock_idle_exit>

00004fec <k_mem_slab_init>:
{
    4fec:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    4fee:	2400      	movs	r4, #0
	slab->block_size = block_size;
    4ff0:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
    4ff4:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
    4ff8:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    4ffa:	42a3      	cmp	r3, r4
    4ffc:	d102      	bne.n	5004 <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
    4ffe:	e9c0 0000 	strd	r0, r0, [r0]
}
    5002:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    5004:	6945      	ldr	r5, [r0, #20]
    5006:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    5008:	3401      	adds	r4, #1
		slab->free_list = p;
    500a:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    500c:	4411      	add	r1, r2
    500e:	e7f4      	b.n	4ffa <k_mem_slab_init+0xe>

00005010 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    5010:	7b43      	ldrb	r3, [r0, #13]
    5012:	06db      	lsls	r3, r3, #27
    5014:	bf03      	ittte	eq
    5016:	6980      	ldreq	r0, [r0, #24]
    5018:	fab0 f080 	clzeq	r0, r0
    501c:	0940      	lsreq	r0, r0, #5
    501e:	2000      	movne	r0, #0
}
    5020:	4770      	bx	lr

00005022 <z_find_first_thread_to_unpend>:
{
    5022:	b510      	push	{r4, lr}
    5024:	f04f 0320 	mov.w	r3, #32
    5028:	f3ef 8411 	mrs	r4, BASEPRI
    502c:	f383 8811 	msr	BASEPRI, r3
    5030:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    5034:	f000 f847 	bl	50c6 <z_priq_dumb_best>
	__asm__ volatile(
    5038:	f384 8811 	msr	BASEPRI, r4
    503c:	f3bf 8f6f 	isb	sy
}
    5040:	bd10      	pop	{r4, pc}

00005042 <z_unpend_thread_no_timeout>:
{
    5042:	b538      	push	{r3, r4, r5, lr}
    5044:	4604      	mov	r4, r0
	__asm__ volatile(
    5046:	f04f 0320 	mov.w	r3, #32
    504a:	f3ef 8511 	mrs	r5, BASEPRI
    504e:	f383 8811 	msr	BASEPRI, r3
    5052:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    5056:	4601      	mov	r1, r0
    5058:	6880      	ldr	r0, [r0, #8]
    505a:	f7fe fb23 	bl	36a4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    505e:	7b63      	ldrb	r3, [r4, #13]
    5060:	f023 0302 	bic.w	r3, r3, #2
    5064:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    5066:	f385 8811 	msr	BASEPRI, r5
    506a:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    506e:	2300      	movs	r3, #0
    5070:	60a3      	str	r3, [r4, #8]
}
    5072:	bd38      	pop	{r3, r4, r5, pc}

00005074 <z_reschedule>:
{
    5074:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
    5076:	b939      	cbnz	r1, 5088 <z_reschedule+0x14>
    5078:	f7fe faac 	bl	35d4 <resched.part.15>
	if (resched(key.key)) {
    507c:	b120      	cbz	r0, 5088 <z_reschedule+0x14>
    507e:	4608      	mov	r0, r1
}
    5080:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5084:	f7fc b90c 	b.w	12a0 <z_arch_swap>
    5088:	f381 8811 	msr	BASEPRI, r1
    508c:	f3bf 8f6f 	isb	sy
    5090:	bd08      	pop	{r3, pc}

00005092 <z_reschedule_irqlock>:
{
    5092:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
    5094:	4602      	mov	r2, r0
    5096:	b938      	cbnz	r0, 50a8 <z_reschedule_irqlock+0x16>
    5098:	f7fe fa9c 	bl	35d4 <resched.part.15>
	if (resched(key)) {
    509c:	b120      	cbz	r0, 50a8 <z_reschedule_irqlock+0x16>
    509e:	4610      	mov	r0, r2
}
    50a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    50a4:	f7fc b8fc 	b.w	12a0 <z_arch_swap>
    50a8:	f382 8811 	msr	BASEPRI, r2
    50ac:	f3bf 8f6f 	isb	sy
    50b0:	bd08      	pop	{r3, pc}

000050b2 <z_reschedule_unlocked>:
	__asm__ volatile(
    50b2:	f04f 0320 	mov.w	r3, #32
    50b6:	f3ef 8011 	mrs	r0, BASEPRI
    50ba:	f383 8811 	msr	BASEPRI, r3
    50be:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
    50c2:	f7ff bfe6 	b.w	5092 <z_reschedule_irqlock>

000050c6 <z_priq_dumb_best>:
	return list->head == list;
    50c6:	6803      	ldr	r3, [r0, #0]
}
    50c8:	4298      	cmp	r0, r3
    50ca:	bf14      	ite	ne
    50cc:	4618      	movne	r0, r3
    50ce:	2000      	moveq	r0, #0
    50d0:	4770      	bx	lr

000050d2 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
    50d2:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    50d6:	b570      	push	{r4, r5, r6, lr}
    50d8:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
    50da:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
    50de:	b1cb      	cbz	r3, 5114 <z_thread_timeout+0x42>
    50e0:	f04f 0320 	mov.w	r3, #32
    50e4:	f3ef 8611 	mrs	r6, BASEPRI
    50e8:	f383 8811 	msr	BASEPRI, r3
    50ec:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    50f0:	4629      	mov	r1, r5
    50f2:	f850 0c10 	ldr.w	r0, [r0, #-16]
    50f6:	f7fe fad5 	bl	36a4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    50fa:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    50fe:	f023 0302 	bic.w	r3, r3, #2
    5102:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
    5106:	f386 8811 	msr	BASEPRI, r6
    510a:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    510e:	2300      	movs	r3, #0
    5110:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    5114:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    5118:	f023 0314 	bic.w	r3, r3, #20
    511c:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    5120:	4628      	mov	r0, r5
    5122:	f7ff ff75 	bl	5010 <z_is_thread_ready>
    5126:	b120      	cbz	r0, 5132 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
    5128:	4628      	mov	r0, r5
}
    512a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    512e:	f7fe bb09 	b.w	3744 <z_add_thread_to_ready_q>
    5132:	bd70      	pop	{r4, r5, r6, pc}

00005134 <z_unpend_first_thread>:
{
    5134:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5136:	f04f 0320 	mov.w	r3, #32
    513a:	f3ef 8211 	mrs	r2, BASEPRI
    513e:	f383 8811 	msr	BASEPRI, r3
    5142:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    5146:	f7ff ffbe 	bl	50c6 <z_priq_dumb_best>
    514a:	4604      	mov	r4, r0
	__asm__ volatile(
    514c:	f382 8811 	msr	BASEPRI, r2
    5150:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    5154:	b1c8      	cbz	r0, 518a <z_unpend_first_thread+0x56>
	__asm__ volatile(
    5156:	f04f 0320 	mov.w	r3, #32
    515a:	f3ef 8511 	mrs	r5, BASEPRI
    515e:	f383 8811 	msr	BASEPRI, r3
    5162:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    5166:	4601      	mov	r1, r0
    5168:	6880      	ldr	r0, [r0, #8]
    516a:	f7fe fa9b 	bl	36a4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    516e:	7b63      	ldrb	r3, [r4, #13]
    5170:	f023 0302 	bic.w	r3, r3, #2
    5174:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    5176:	f385 8811 	msr	BASEPRI, r5
    517a:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    517e:	2300      	movs	r3, #0
    5180:	60a3      	str	r3, [r4, #8]
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5182:	f104 0018 	add.w	r0, r4, #24
    5186:	f000 f856 	bl	5236 <z_abort_timeout>
}
    518a:	4620      	mov	r0, r4
    518c:	bd38      	pop	{r3, r4, r5, pc}

0000518e <z_impl_k_sleep>:
{
    518e:	b538      	push	{r3, r4, r5, lr}
    5190:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    5194:	f240 34e7 	movw	r4, #999	; 0x3e7
    5198:	2500      	movs	r5, #0
    519a:	fbc1 4500 	smlal	r4, r5, r1, r0
    519e:	4620      	mov	r0, r4
    51a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    51a4:	2300      	movs	r3, #0
    51a6:	4629      	mov	r1, r5
    51a8:	f7fa ff98 	bl	dc <__aeabi_ldivmod>
	if (ticks == 0) {
    51ac:	4604      	mov	r4, r0
    51ae:	b948      	cbnz	r0, 51c4 <z_impl_k_sleep+0x36>
	z_impl_k_yield();
    51b0:	f7fe fc2c 	bl	3a0c <z_impl_k_yield>
}

static inline u64_t __ticks_to_ms(s64_t ticks)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	return (u64_t)ticks * MSEC_PER_SEC /
    51b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    51b8:	fb84 2302 	smull	r2, r3, r4, r2
    51bc:	0bd0      	lsrs	r0, r2, #15
}
    51be:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    51c2:	bd38      	pop	{r3, r4, r5, pc}
    51c4:	f7fe fbe8 	bl	3998 <z_tick_sleep.part.18>
    51c8:	4604      	mov	r4, r0
    51ca:	e7f3      	b.n	51b4 <z_impl_k_sleep+0x26>

000051cc <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    51cc:	7b43      	ldrb	r3, [r0, #13]
    51ce:	06db      	lsls	r3, r3, #27
    51d0:	bf03      	ittte	eq
    51d2:	6980      	ldreq	r0, [r0, #24]
    51d4:	fab0 f080 	clzeq	r0, r0
    51d8:	0940      	lsreq	r0, r0, #5
    51da:	2000      	movne	r0, #0
}
    51dc:	4770      	bx	lr

000051de <z_impl_k_thread_name_set>:
}
    51de:	f06f 0046 	mvn.w	r0, #70	; 0x46
    51e2:	4770      	bx	lr

000051e4 <k_thread_name_get>:
}
    51e4:	2000      	movs	r0, #0
    51e6:	4770      	bx	lr

000051e8 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    51e8:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    51ea:	b510      	push	{r4, lr}
    51ec:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    51ee:	b103      	cbz	r3, 51f2 <z_thread_single_abort+0xa>
		thread->fn_abort();
    51f0:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
    51f2:	4620      	mov	r0, r4
    51f4:	f7ff ffea 	bl	51cc <z_is_thread_ready>
    51f8:	b138      	cbz	r0, 520a <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
    51fa:	4620      	mov	r0, r4
    51fc:	f7fe fb50 	bl	38a0 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
    5200:	7b63      	ldrb	r3, [r4, #13]
    5202:	f043 0308 	orr.w	r3, r3, #8
    5206:	7363      	strb	r3, [r4, #13]
}
    5208:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
    520a:	7b63      	ldrb	r3, [r4, #13]
    520c:	079b      	lsls	r3, r3, #30
    520e:	d502      	bpl.n	5216 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
    5210:	4620      	mov	r0, r4
    5212:	f7ff ff16 	bl	5042 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
    5216:	69a3      	ldr	r3, [r4, #24]
    5218:	2b00      	cmp	r3, #0
    521a:	d0f1      	beq.n	5200 <z_thread_single_abort+0x18>
    521c:	f104 0018 	add.w	r0, r4, #24
    5220:	f000 f809 	bl	5236 <z_abort_timeout>
    5224:	e7ec      	b.n	5200 <z_thread_single_abort+0x18>

00005226 <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    5226:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
    5228:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
    522a:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    522c:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    522e:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
    5230:	e9c0 3306 	strd	r3, r3, [r0, #24]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    5234:	4770      	bx	lr

00005236 <z_abort_timeout>:
{
    5236:	b510      	push	{r4, lr}
	__asm__ volatile(
    5238:	f04f 0220 	mov.w	r2, #32
    523c:	f3ef 8411 	mrs	r4, BASEPRI
    5240:	f382 8811 	msr	BASEPRI, r2
    5244:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    5248:	6803      	ldr	r3, [r0, #0]
    524a:	b13b      	cbz	r3, 525c <z_abort_timeout+0x26>
			remove_timeout(to);
    524c:	f7fe fd4a 	bl	3ce4 <remove_timeout>
			ret = 0;
    5250:	2000      	movs	r0, #0
	__asm__ volatile(
    5252:	f384 8811 	msr	BASEPRI, r4
    5256:	f3bf 8f6f 	isb	sy
}
    525a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    525c:	f06f 0015 	mvn.w	r0, #21
    5260:	e7f7      	b.n	5252 <z_abort_timeout+0x1c>

00005262 <z_get_next_timeout_expiry>:
{
    5262:	b510      	push	{r4, lr}
	__asm__ volatile(
    5264:	f04f 0320 	mov.w	r3, #32
    5268:	f3ef 8411 	mrs	r4, BASEPRI
    526c:	f383 8811 	msr	BASEPRI, r3
    5270:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    5274:	f7fe fd4a 	bl	3d0c <next_timeout>
	__asm__ volatile(
    5278:	f384 8811 	msr	BASEPRI, r4
    527c:	f3bf 8f6f 	isb	sy
}
    5280:	bd10      	pop	{r4, pc}

00005282 <z_set_timeout_expiry>:
{
    5282:	b570      	push	{r4, r5, r6, lr}
    5284:	4604      	mov	r4, r0
    5286:	460e      	mov	r6, r1
	__asm__ volatile(
    5288:	f04f 0320 	mov.w	r3, #32
    528c:	f3ef 8511 	mrs	r5, BASEPRI
    5290:	f383 8811 	msr	BASEPRI, r3
    5294:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    5298:	f7fe fd38 	bl	3d0c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    529c:	2801      	cmp	r0, #1
    529e:	dd05      	ble.n	52ac <z_set_timeout_expiry+0x2a>
    52a0:	42a0      	cmp	r0, r4
    52a2:	dd03      	ble.n	52ac <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    52a4:	4631      	mov	r1, r6
    52a6:	4620      	mov	r0, r4
    52a8:	f7fb ff6a 	bl	1180 <z_clock_set_timeout>
	__asm__ volatile(
    52ac:	f385 8811 	msr	BASEPRI, r5
    52b0:	f3bf 8f6f 	isb	sy
}
    52b4:	bd70      	pop	{r4, r5, r6, pc}

000052b6 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
    52b6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
    52b8:	f7fe fddc 	bl	3e74 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
    52bc:	bd08      	pop	{r3, pc}

000052be <k_timer_init>:
	timer->status = 0U;
    52be:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    52c0:	e9c0 1206 	strd	r1, r2, [r0, #24]
    52c4:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
    52c8:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
    52ca:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
    52ce:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
    52d2:	6283      	str	r3, [r0, #40]	; 0x28
}
    52d4:	4770      	bx	lr

000052d6 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    52d6:	b510      	push	{r4, lr}
    52d8:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
    52da:	f7ff ffac 	bl	5236 <z_abort_timeout>

	if (inactive) {
    52de:	bb00      	cbnz	r0, 5322 <z_impl_k_timer_stop+0x4c>
		return;
	}

	if (timer->stop_fn != NULL) {
    52e0:	69e3      	ldr	r3, [r4, #28]
    52e2:	b10b      	cbz	r3, 52e8 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    52e4:	4620      	mov	r0, r4
    52e6:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
    52e8:	f104 0010 	add.w	r0, r4, #16
    52ec:	2100      	movs	r1, #0
    52ee:	f7ff fe98 	bl	5022 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
    52f2:	4604      	mov	r4, r0
    52f4:	b1a8      	cbz	r0, 5322 <z_impl_k_timer_stop+0x4c>
		z_unpend_thread_no_timeout(thread);
    52f6:	f7ff fea4 	bl	5042 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    52fa:	7b63      	ldrb	r3, [r4, #13]
    52fc:	06db      	lsls	r3, r3, #27
    52fe:	d104      	bne.n	530a <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
    5300:	69a3      	ldr	r3, [r4, #24]
    5302:	b913      	cbnz	r3, 530a <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
    5304:	4620      	mov	r0, r4
    5306:	f7fe fa1d 	bl	3744 <z_add_thread_to_ready_q>
	__asm__ volatile(
    530a:	f04f 0320 	mov.w	r3, #32
    530e:	f3ef 8011 	mrs	r0, BASEPRI
    5312:	f383 8811 	msr	BASEPRI, r3
    5316:	f3bf 8f6f 	isb	sy

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
    531a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(z_arch_irq_lock());
    531e:	f7ff beb8 	b.w	5092 <z_reschedule_irqlock>
    5322:	bd10      	pop	{r4, pc}

00005324 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    5324:	4770      	bx	lr
